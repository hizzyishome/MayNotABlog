{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/qrcode_for_gh.jpg","path":"images/qrcode_for_gh.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/reward/wechat.png","path":"images/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/reward/alipay.jpg","path":"images/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar/P1070776.jpg","path":"images/avatar/P1070776.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/s","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211530},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537027211522},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537027211522},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1537027211522},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1537027211522},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537027211522},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537027211522},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1537027211522},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1537027211522},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1537027211522},{"_id":"themes/next/_config.yml","hash":"c64ee7be7930e251ddbf9a91a54b4a4b49af2bbc","modified":1541473545292},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1537027211522},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1537027211522},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1537027211526},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1537027211530},{"_id":"source/archives/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/_data/menu.yml","hash":"aebf048ccd7eb9e78143992a9dd59657d19fc3f9","modified":1537027211502},{"_id":"source/_data/project.json","hash":"63b99e10018891b25eb7a32cfbd18dcabce4cc08","modified":1537027211502},{"_id":"source/_posts/GO-Web-旅行扎记.md","hash":"c654a0ddfe0f431016d055cef5c45a2e64323ea0","modified":1539326723200},{"_id":"source/_posts/口水Java虚拟机.md","hash":"1e25a425539ef94e66abad39b5798b5e5bd951e1","modified":1539326687780},{"_id":"source/_posts/手撕链表.md","hash":"0ff74946e055d6f5972408c52a2502dd0deec1f5","modified":1544495959194},{"_id":"source/_posts/最长不重复子串长度问题的思路整理.md","hash":"1810676061ee2b306056837fbbf635e0971cfdb2","modified":1539793144029},{"_id":"source/_posts/诗开头-md.md","hash":"375455dc6d605945f5fd3b76f6e6225623a25185","modified":1537027211506},{"_id":"source/about/index.md","hash":"c41002b5062101118ec958a25e5187ef53b64597","modified":1537027211506},{"_id":"source/categories/index.md","hash":"387b5545216f1ecb5bc2b46a0d0e8ef856b22e8d","modified":1537027211506},{"_id":"source/tags/index.md","hash":"b690db8796b1ffe9018b96a073a54223d5940735","modified":1537027211506},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1537027211522},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1537027211522},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1537027211522},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1537027211522},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1537027211522},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1537027211522},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1537027211522},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1537027211522},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1537027211522},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1537027211526},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1537027211526},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1537027211526},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1537027211526},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1537027211526},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1537027211526},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1537027211526},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1537027211526},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1537027211526},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1537027211526},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1537027211526},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1537027211526},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1537027211526},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1537027211526},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1537027211526},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1537027211526},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1537027211526},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1537027211526},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1537027211530},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1537027211530},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1537027211530},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1537027211530},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1537027211530},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1537027211530},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1537027211530},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1537027211530},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1537027211530},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537027211530},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1537027211530},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537027211574},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537027211574},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537027211574},{"_id":"source/_posts/诗开头-md/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/about/index/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/categories/index/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/tags/index/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211538},{"_id":"source/_posts/GO-Web-旅行扎记/huaji.jpeg","hash":"2ec8da90cf292413bb4ce5672801e35621cf0822","modified":1537027211502},{"_id":"source/_posts/口水Java虚拟机/3.png","hash":"1680d087861bf84368522c727b064f31dd5c3da4","modified":1537027211506},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1537027211522},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1537027211522},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1537027211522},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1537027211526},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1537027211526},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537027211526},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537027211526},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537027211526},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537027211526},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1537027211526},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1537027211526},{"_id":"themes/next/layout/_macro/post.swig","hash":"4364108600c4c90df8039953f076f1d2f5c5f21f","modified":1537027211526},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1537027211526},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1537027211526},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1537027211526},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1537027211526},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d64a38577dd2cf3c9a56c5b28d479fb315918ad1","modified":1537027211526},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cf8fe76993b513b97f379832222b6ec7e41a1c15","modified":1537027211526},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1537027211526},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1537027211526},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1537027211526},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1537027211526},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1537027211526},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1537027211530},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1537027211530},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1537027211530},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1537027211530},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1537027211530},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1537027211530},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537027211530},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537027211530},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1537027211530},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1537027211530},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1537027211530},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1537027211530},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1537027211530},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1537027211530},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"545102e3aa3ce494f7046abf71cefb7aaf671559","modified":1537027211530},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1537027211530},{"_id":"themes/next/scripts/tags/note.js","hash":"265dc7ee83d3fe317e88058e80aa8170230a005e","modified":1537027211530},{"_id":"themes/next/scripts/tags/tabs.js","hash":"6bdf2a1a23cb9922fa809c79af3b06339c28cd70","modified":1537027211530},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1537027211538},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537027211538},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537027211538},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537027211538},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537027211570},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537027211570},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537027211570},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537027211570},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537027211570},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537027211570},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537027211570},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537027211570},{"_id":"themes/next/source/images/qrcode_for_gh.jpg","hash":"af83f76fe4bf6d62cbc7a85e7ed96516b551ecb7","modified":1537027211570},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537027211570},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537027211570},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537027211570},{"_id":"source/_posts/口水Java虚拟机/1.png","hash":"7088fcb0026d4eaf80d5392ad9d3765f2bfc0a28","modified":1537027211506},{"_id":"source/_posts/口水Java虚拟机/2.png","hash":"301b5ae2e8427b7c378973aa3d64bbfc622af312","modified":1537027211506},{"_id":"source/_posts/手撕链表/链表类型和优势.png","hash":"ca407111e47400fb7916831b791bb2ac2b003f0a","modified":1539857882000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211530},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211530},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211534},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211538},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211538},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1537027211526},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1537027211526},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537027211526},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1537027211526},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1537027211526},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1537027211530},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1537027211530},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"8f1415d4013baa064136bf20420a326c20a9d8dd","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"73723630eee3988127f9b9e06fd234b276e4f458","modified":1537027211530},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1537027211530},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1537027211530},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537027211530},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537027211530},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1537027211534},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1537027211538},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537027211538},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1537027211538},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1537027211538},{"_id":"themes/next/source/images/reward/wechat.png","hash":"17928300d172d3da638783c921323000a8c68777","modified":1537027211570},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1537027211570},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1537027211570},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1537027211570},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1537027211570},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537027211570},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1537027211570},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1537027211570},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1537027211570},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1537027211570},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1537027211570},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537027211574},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537027211574},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537027211574},{"_id":"themes/next/source/images/reward/alipay.jpg","hash":"c2f3731dcd15c0c2f50f03787f5ab3e3af709b22","modified":1537027211570},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537027211570},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537027211530},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537027211534},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1537027211538},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1537027211570},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537027211574},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537027211538},{"_id":"source/_posts/手撕链表/LinkedList.png","hash":"4c77d48963b10cbf85dc6e81da301b92fd534835","modified":1539933930000},{"_id":"themes/next/source/images/avatar/P1070776.jpg","hash":"553ee8a36dd119315ef091bc599b226938e19046","modified":1537027211570},{"_id":"public/about/index.html","hash":"31adcccc100b4f04e85450dce03c132d418365e5","modified":1544496003114},{"_id":"public/categories/index.html","hash":"0f25cd25f4bfa90f132dac746a467651aa00666e","modified":1544496003114},{"_id":"public/tags/index.html","hash":"f684301c23dc7f3f273d9492d5b8654d2ac5df57","modified":1544496003114},{"_id":"public/archives/2018/07/index.html","hash":"3c4be3188687bc6ba4125129ff05ec3bf17cdaf0","modified":1544496003114},{"_id":"public/archives/2018/08/index.html","hash":"a150289ca2430de63f8f312ffa72a60a6017bcaf","modified":1544496003114},{"_id":"public/archives/2018/10/index.html","hash":"bee2b9119a981c2a87de38a0f4ea5534be8316c9","modified":1544496003114},{"_id":"public/categories/码文/index.html","hash":"8f3d526f87f557d4ac361e7e439be9e6344a7ed0","modified":1544496003114},{"_id":"public/categories/古风/index.html","hash":"1d66f5483fff182148ba2cfa56a5c0e0126ffc7e","modified":1544496003114},{"_id":"public/tags/Go/index.html","hash":"b8ec6c323f6dff7cb34cdb9d7fd456ed019cba77","modified":1544496003115},{"_id":"public/tags/Web/index.html","hash":"ac6ffce79d390ce2964f3154a0b38652c429ab55","modified":1544496003115},{"_id":"public/tags/Java/index.html","hash":"f3886221631bb9dc5c844552defc9ad7e248d580","modified":1544496003115},{"_id":"public/tags/jvm/index.html","hash":"3637891ae956fe63ccbfda4db28d9dd84f9a85d9","modified":1544496003115},{"_id":"public/tags/笔记/index.html","hash":"4e91bae7ef63f83de21c7683b175406891adb9e6","modified":1544496003115},{"_id":"public/tags/算法/index.html","hash":"ca762715f5524725f80043db1876f0924ad502ad","modified":1544496003115},{"_id":"public/tags/数据结构/index.html","hash":"e58e7f2b6272617e80e6a6d8b7abe42957392e85","modified":1544496003115},{"_id":"public/tags/人生不满百/index.html","hash":"37be03514d697376a74357045b754dbf6945f1cc","modified":1544496003115},{"_id":"public/tags/诗词/index.html","hash":"13038051f07d296b0c15dbf8c9801beee8ee13ea","modified":1544496003115},{"_id":"public/2018/10/18/手撕链表/index.html","hash":"0520f22599b51443daa83e84e46f2d0d6bcbc13f","modified":1544496003115},{"_id":"public/2018/10/12/最长不重复子串长度问题的思路整理/index.html","hash":"41b264779b7760e25363592b3754d236f8f57a8b","modified":1544496003115},{"_id":"public/2018/08/25/口水Java虚拟机/index.html","hash":"69183cf5e17194ab4300089ff5fce2b35b2fb9dd","modified":1544496003115},{"_id":"public/2018/07/17/GO-Web-旅行扎记/index.html","hash":"2a8f927b162ff0880e99205ac7ac4c8017e9f230","modified":1544496003115},{"_id":"public/2018/07/10/诗开头-md/index.html","hash":"088e9ca5578c9e8dae81b29c2334e036283bdd83","modified":1544496003115},{"_id":"public/archives/index.html","hash":"03bdc320781230d402434791f660c0cf35bbb759","modified":1544496003115},{"_id":"public/archives/2018/index.html","hash":"83b6e69357c91b3707be037f6e2b10527226d7e3","modified":1544496003115},{"_id":"public/index.html","hash":"d825c7fcdb4368318ee9295aaaac8cef62a239dd","modified":1544496003115},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1544496003119},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1544496003119},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1544496003119},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1544496003119},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1544496003119},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1544496003119},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1544496003119},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1544496003119},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1544496003119},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1544496003119},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1544496003119},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1544496003119},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544496003119},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1544496003119},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544496003119},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1544496003119},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1544496003119},{"_id":"public/images/qrcode_for_gh.jpg","hash":"af83f76fe4bf6d62cbc7a85e7ed96516b551ecb7","modified":1544496003119},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1544496003120},{"_id":"public/images/reward/wechat.png","hash":"17928300d172d3da638783c921323000a8c68777","modified":1544496003120},{"_id":"public/2018/07/17/GO-Web-旅行扎记/huaji.jpeg","hash":"2ec8da90cf292413bb4ce5672801e35621cf0822","modified":1544496003120},{"_id":"public/2018/08/25/口水Java虚拟机/3.png","hash":"1680d087861bf84368522c727b064f31dd5c3da4","modified":1544496003120},{"_id":"public/images/reward/alipay.jpg","hash":"c2f3731dcd15c0c2f50f03787f5ab3e3af709b22","modified":1544496003485},{"_id":"public/2018/10/18/手撕链表/链表类型和优势.png","hash":"ca407111e47400fb7916831b791bb2ac2b003f0a","modified":1544496003488},{"_id":"public/2018/08/25/口水Java虚拟机/1.png","hash":"7088fcb0026d4eaf80d5392ad9d3765f2bfc0a28","modified":1544496003488},{"_id":"public/2018/08/25/口水Java虚拟机/2.png","hash":"301b5ae2e8427b7c378973aa3d64bbfc622af312","modified":1544496003488},{"_id":"public/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1544496003490},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1544496003490},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1544496003490},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1544496003490},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1544496003490},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1544496003490},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1544496003490},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1544496003490},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1544496003490},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1544496003490},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1544496003490},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1544496003490},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1544496003490},{"_id":"public/css/main.css","hash":"fc153cf0bc0e0ac47f064dd6851529c8d9fddbf3","modified":1544496003490},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1544496003490},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1544496003490},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544496003490},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1544496003490},{"_id":"public/2018/10/18/手撕链表/LinkedList.png","hash":"4c77d48963b10cbf85dc6e81da301b92fd534835","modified":1544496003501},{"_id":"public/images/avatar/P1070776.jpg","hash":"553ee8a36dd119315ef091bc599b226938e19046","modified":1544496003517}],"Category":[{"name":"码文","_id":"cjpj50wbs0004w9j3nxa0olwl"},{"name":"古风","_id":"cjpj50wc1000gw9j33u5maxd7"}],"Data":[{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}},{"_id":"project","data":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}],"Page":[{"title":"about","date":"2018-07-09T16:37:17.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-10 00:37:17\ntype: \"about\"\n---\n","updated":"2018-09-15T16:00:11.506Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjpj50wbo0001w9j3ig373bqy","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":""},{"title":"categories","date":"2018-07-09T16:37:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-10 00:37:03\ntype: \"categories\"\n---\n","updated":"2018-09-15T16:00:11.506Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjpj50wbr0003w9j3khr3k47g","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-09T16:35:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-10 00:35:26\ntype: \"tags\"\n---\n","updated":"2018-09-15T16:00:11.506Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjpj50wgh000yw9j3b518316e","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":""}],"Post":[{"title":"GO Web 旅行扎记","comments":1,"date":"2018-07-17T09:41:54.000Z","updated":"2018-07-17T09:41:54.000Z","_content":"## 第一站 · 出发前先收拾好行囊 &emsp;<font color=gray>——环境搭建</font>\n\n&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了 \n**GOROOT**和**GOPATH**，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。\n\n![huaji](./huaji.jpeg)  \n\n[安装](https://golang.org/doc/install)官方说的很清楚了，这里几个点特意提出下。\n\n- Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中\n```bash\nexport GOROOT=$HOME/go1.X\nexport PATH=$PATH:$GOROOT/bin\n```\n- Workspaces工作空间  \n&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。**所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。**\n\n>\nA workspace is a directory hierarchy with three directories at its root :\n- src contains Go source files,\n- pkg contains package objects, and \n- bin contains executable commands.  \nThe go tool builds source packages and installs the resulting binaries to the pkg and bin directories.\n  \n  &emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：\n  - src里面是Go的源码文件\n  - pkg里面是包对象\n  - bin里面是可以执行的Go相关命令  \n  go工具构建源码并将生成的二进制文件安装到pkg和bin目录。\n  \n  ","source":"_posts/GO-Web-旅行扎记.md","raw":"---\ntitle: GO Web 旅行扎记\ncomments: true\ndate: 2018-07-17 17:41:54\nupdated: 2018-07-17 17:41:54\ntags:\n    - Go\n    - Web\ncategories: 码文\n---\n## 第一站 · 出发前先收拾好行囊 &emsp;<font color=gray>——环境搭建</font>\n\n&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了 \n**GOROOT**和**GOPATH**，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。\n\n![huaji](./huaji.jpeg)  \n\n[安装](https://golang.org/doc/install)官方说的很清楚了，这里几个点特意提出下。\n\n- Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中\n```bash\nexport GOROOT=$HOME/go1.X\nexport PATH=$PATH:$GOROOT/bin\n```\n- Workspaces工作空间  \n&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。**所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。**\n\n>\nA workspace is a directory hierarchy with three directories at its root :\n- src contains Go source files,\n- pkg contains package objects, and \n- bin contains executable commands.  \nThe go tool builds source packages and installs the resulting binaries to the pkg and bin directories.\n  \n  &emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：\n  - src里面是Go的源码文件\n  - pkg里面是包对象\n  - bin里面是可以执行的Go相关命令  \n  go工具构建源码并将生成的二进制文件安装到pkg和bin目录。\n  \n  ","slug":"GO-Web-旅行扎记","published":1,"layout":"post","photos":[],"link":"","_id":"cjpj50wbk0000w9j3woancdmj","content":"<h2 id=\"第一站-·-出发前先收拾好行囊-emsp-——环境搭建\"><a href=\"#第一站-·-出发前先收拾好行囊-emsp-——环境搭建\" class=\"headerlink\" title=\"第一站 · 出发前先收拾好行囊 &emsp;——环境搭建\"></a>第一站 · 出发前先收拾好行囊 &emsp;<font color=\"gray\">——环境搭建</font></h2><p>&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了<br><strong>GOROOT</strong>和<strong>GOPATH</strong>，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。</p>\n<p><img src=\"/2018/07/17/GO-Web-旅行扎记/huaji.jpeg\" alt=\"huaji\">  </p>\n<p><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">安装</a>官方说的很清楚了，这里几个点特意提出下。</p>\n<ul>\n<li><p>Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"variable\">$HOME</span>/go1.X</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Workspaces工作空间<br>&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。<strong>所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。</strong></p>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<p>A workspace is a directory hierarchy with three directories at its root :</p>\n<ul>\n<li>src contains Go source files,</li>\n<li>pkg contains package objects, and </li>\n<li><p>bin contains executable commands.<br>The go tool builds source packages and installs the resulting binaries to the pkg and bin directories.</p>\n<p>&emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：</p>\n<ul>\n<li>src里面是Go的源码文件</li>\n<li>pkg里面是包对象</li>\n<li>bin里面是可以执行的Go相关命令<br>go工具构建源码并将生成的二进制文件安装到pkg和bin目录。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":"<h2 id=\"第一站-·-出发前先收拾好行囊-emsp-——环境搭建\"><a href=\"#第一站-·-出发前先收拾好行囊-emsp-——环境搭建\" class=\"headerlink\" title=\"第一站 · 出发前先收拾好行囊 &emsp;——环境搭建\"></a>第一站 · 出发前先收拾好行囊 &emsp;<font color=\"gray\">——环境搭建</font></h2><p>&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了<br><strong>GOROOT</strong>和<strong>GOPATH</strong>，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。</p>\n<p><img src=\"/2018/07/17/GO-Web-旅行扎记/huaji.jpeg\" alt=\"huaji\">  </p>\n<p><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">安装</a>官方说的很清楚了，这里几个点特意提出下。</p>\n<ul>\n<li><p>Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"variable\">$HOME</span>/go1.X</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Workspaces工作空间<br>&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。<strong>所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。</strong></p>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<p>A workspace is a directory hierarchy with three directories at its root :</p>\n<ul>\n<li>src contains Go source files,</li>\n<li>pkg contains package objects, and </li>\n<li><p>bin contains executable commands.<br>The go tool builds source packages and installs the resulting binaries to the pkg and bin directories.</p>\n<p>&emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：</p>\n<ul>\n<li>src里面是Go的源码文件</li>\n<li>pkg里面是包对象</li>\n<li>bin里面是可以执行的Go相关命令<br>go工具构建源码并将生成的二进制文件安装到pkg和bin目录。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"口水Java虚拟机","comments":1,"date":"2018-08-25T04:14:45.000Z","updated":"2018-08-25T04:14:45.000Z","_content":"\n## Java运行方式\n- 在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)\n- C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。\n\n## 为什么 Java 要在虚拟机里运行？\n- Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。\n- 设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。\n- 不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。\n- Java 虚拟机可以由硬件实现\n- 各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，\n可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。\n- 虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。\n其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。\n\n## Java 虚拟机具体是怎样运行 Java 字节码的？\n1. 虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中\n2. 加载后的Java类会被存放于方法区（Method Area）中\n3. 实际运行时，虚拟机会执行方法区内的代码。\n4. 运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。\n这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。\n5. 当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。\n\n- 和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。\n- 不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，\n以及存放各个线程执行位置的PC寄存器。\n\n![1](./1.png)  \n\n- 从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。\n\n1. HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. ***无需等待编译***\n2. 第二种是即时编译（Just-In-Time compilation，JIT），\n将一个方法中包含的所有字节码编译成机器码后再执行。 ***实际运行速度更快***\n\n- HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。\n先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。\n\n## Java 虚拟机的运行效率究竟是怎么样的？\n\n- 即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。\n- 对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；\n另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。\n- 为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。\n- C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。\n- C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。\n- Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。\n- 为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，\n并且按 1:2 的比例配置给 C1 及 C2 编译器。\n- 在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。\n![2](./2.png)\n\n## Java 虚拟机的 boolean 类型\n- 在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。\n- 在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。\n这个编码规则约束了 Java 字节码的具体实现。\n\n## Java 的基本类型\n![3](./3.png)\n- byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。\n从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。\n- 在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。\nchar 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。","source":"_posts/口水Java虚拟机.md","raw":"---\ntitle: 口水Java虚拟机\ncomments: true\ndate: 2018-08-25 12:14:45\nupdated: 2018-08-25 12:14:45\ntags:\n    - Java\n    - jvm\n    - 笔记\ncategories: 码文\n---\n\n## Java运行方式\n- 在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)\n- C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。\n\n## 为什么 Java 要在虚拟机里运行？\n- Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。\n- 设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。\n- 不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。\n- Java 虚拟机可以由硬件实现\n- 各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，\n可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。\n- 虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。\n其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。\n\n## Java 虚拟机具体是怎样运行 Java 字节码的？\n1. 虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中\n2. 加载后的Java类会被存放于方法区（Method Area）中\n3. 实际运行时，虚拟机会执行方法区内的代码。\n4. 运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。\n这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。\n5. 当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。\n\n- 和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。\n- 不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，\n以及存放各个线程执行位置的PC寄存器。\n\n![1](./1.png)  \n\n- 从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。\n\n1. HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. ***无需等待编译***\n2. 第二种是即时编译（Just-In-Time compilation，JIT），\n将一个方法中包含的所有字节码编译成机器码后再执行。 ***实际运行速度更快***\n\n- HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。\n先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。\n\n## Java 虚拟机的运行效率究竟是怎么样的？\n\n- 即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。\n- 对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；\n另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。\n- 为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。\n- C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。\n- C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。\n- Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。\n- 为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，\n并且按 1:2 的比例配置给 C1 及 C2 编译器。\n- 在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。\n![2](./2.png)\n\n## Java 虚拟机的 boolean 类型\n- 在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。\n- 在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。\n这个编码规则约束了 Java 字节码的具体实现。\n\n## Java 的基本类型\n![3](./3.png)\n- byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。\n从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。\n- 在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。\nchar 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。","slug":"口水Java虚拟机","published":1,"layout":"post","photos":[],"link":"","_id":"cjpj50wbp0002w9j35yo8jgrn","content":"<h2 id=\"Java运行方式\"><a href=\"#Java运行方式\" class=\"headerlink\" title=\"Java运行方式\"></a>Java运行方式</h2><ul>\n<li>在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)</li>\n<li>C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。</li>\n</ul>\n<h2 id=\"为什么-Java-要在虚拟机里运行？\"><a href=\"#为什么-Java-要在虚拟机里运行？\" class=\"headerlink\" title=\"为什么 Java 要在虚拟机里运行？\"></a>为什么 Java 要在虚拟机里运行？</h2><ul>\n<li>Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。</li>\n<li>设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。</li>\n<li>不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。</li>\n<li>Java 虚拟机可以由硬件实现</li>\n<li>各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，<br>可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。</li>\n<li>虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。<br>其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。</li>\n</ul>\n<h2 id=\"Java-虚拟机具体是怎样运行-Java-字节码的？\"><a href=\"#Java-虚拟机具体是怎样运行-Java-字节码的？\" class=\"headerlink\" title=\"Java 虚拟机具体是怎样运行 Java 字节码的？\"></a>Java 虚拟机具体是怎样运行 Java 字节码的？</h2><ol>\n<li>虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中</li>\n<li>加载后的Java类会被存放于方法区（Method Area）中</li>\n<li>实际运行时，虚拟机会执行方法区内的代码。</li>\n<li>运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。<br>这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。</li>\n<li>当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。</li>\n</ol>\n<ul>\n<li>和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。</li>\n<li>不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，<br>以及存放各个线程执行位置的PC寄存器。</li>\n</ul>\n<p><img src=\"/2018/08/25/口水Java虚拟机/1.png\" alt=\"1\">  </p>\n<ul>\n<li>从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。</li>\n</ul>\n<ol>\n<li>HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. <strong><em>无需等待编译</em></strong></li>\n<li>第二种是即时编译（Just-In-Time compilation，JIT），<br>将一个方法中包含的所有字节码编译成机器码后再执行。 <strong><em>实际运行速度更快</em></strong></li>\n</ol>\n<ul>\n<li>HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。<br>先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。</li>\n</ul>\n<h2 id=\"Java-虚拟机的运行效率究竟是怎么样的？\"><a href=\"#Java-虚拟机的运行效率究竟是怎么样的？\" class=\"headerlink\" title=\"Java 虚拟机的运行效率究竟是怎么样的？\"></a>Java 虚拟机的运行效率究竟是怎么样的？</h2><ul>\n<li>即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。</li>\n<li>对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；<br>另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</li>\n<li>为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。</li>\n<li>C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。</li>\n<li>C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。</li>\n<li>Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。</li>\n<li>为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，<br>并且按 1:2 的比例配置给 C1 及 C2 编译器。</li>\n<li>在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。<br><img src=\"/2018/08/25/口水Java虚拟机/2.png\" alt=\"2\"></li>\n</ul>\n<h2 id=\"Java-虚拟机的-boolean-类型\"><a href=\"#Java-虚拟机的-boolean-类型\" class=\"headerlink\" title=\"Java 虚拟机的 boolean 类型\"></a>Java 虚拟机的 boolean 类型</h2><ul>\n<li>在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。</li>\n<li>在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。<br>这个编码规则约束了 Java 字节码的具体实现。</li>\n</ul>\n<h2 id=\"Java-的基本类型\"><a href=\"#Java-的基本类型\" class=\"headerlink\" title=\"Java 的基本类型\"></a>Java 的基本类型</h2><p><img src=\"/2018/08/25/口水Java虚拟机/3.png\" alt=\"3\"></p>\n<ul>\n<li>byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。<br>从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。</li>\n<li>在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。<br>char 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":"<h2 id=\"Java运行方式\"><a href=\"#Java运行方式\" class=\"headerlink\" title=\"Java运行方式\"></a>Java运行方式</h2><ul>\n<li>在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)</li>\n<li>C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。</li>\n</ul>\n<h2 id=\"为什么-Java-要在虚拟机里运行？\"><a href=\"#为什么-Java-要在虚拟机里运行？\" class=\"headerlink\" title=\"为什么 Java 要在虚拟机里运行？\"></a>为什么 Java 要在虚拟机里运行？</h2><ul>\n<li>Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。</li>\n<li>设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。</li>\n<li>不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。</li>\n<li>Java 虚拟机可以由硬件实现</li>\n<li>各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，<br>可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。</li>\n<li>虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。<br>其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。</li>\n</ul>\n<h2 id=\"Java-虚拟机具体是怎样运行-Java-字节码的？\"><a href=\"#Java-虚拟机具体是怎样运行-Java-字节码的？\" class=\"headerlink\" title=\"Java 虚拟机具体是怎样运行 Java 字节码的？\"></a>Java 虚拟机具体是怎样运行 Java 字节码的？</h2><ol>\n<li>虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中</li>\n<li>加载后的Java类会被存放于方法区（Method Area）中</li>\n<li>实际运行时，虚拟机会执行方法区内的代码。</li>\n<li>运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。<br>这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。</li>\n<li>当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。</li>\n</ol>\n<ul>\n<li>和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。</li>\n<li>不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，<br>以及存放各个线程执行位置的PC寄存器。</li>\n</ul>\n<p><img src=\"/2018/08/25/口水Java虚拟机/1.png\" alt=\"1\">  </p>\n<ul>\n<li>从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。</li>\n</ul>\n<ol>\n<li>HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. <strong><em>无需等待编译</em></strong></li>\n<li>第二种是即时编译（Just-In-Time compilation，JIT），<br>将一个方法中包含的所有字节码编译成机器码后再执行。 <strong><em>实际运行速度更快</em></strong></li>\n</ol>\n<ul>\n<li>HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。<br>先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。</li>\n</ul>\n<h2 id=\"Java-虚拟机的运行效率究竟是怎么样的？\"><a href=\"#Java-虚拟机的运行效率究竟是怎么样的？\" class=\"headerlink\" title=\"Java 虚拟机的运行效率究竟是怎么样的？\"></a>Java 虚拟机的运行效率究竟是怎么样的？</h2><ul>\n<li>即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。</li>\n<li>对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；<br>另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</li>\n<li>为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。</li>\n<li>C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。</li>\n<li>C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。</li>\n<li>Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。</li>\n<li>为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，<br>并且按 1:2 的比例配置给 C1 及 C2 编译器。</li>\n<li>在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。<br><img src=\"/2018/08/25/口水Java虚拟机/2.png\" alt=\"2\"></li>\n</ul>\n<h2 id=\"Java-虚拟机的-boolean-类型\"><a href=\"#Java-虚拟机的-boolean-类型\" class=\"headerlink\" title=\"Java 虚拟机的 boolean 类型\"></a>Java 虚拟机的 boolean 类型</h2><ul>\n<li>在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。</li>\n<li>在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。<br>这个编码规则约束了 Java 字节码的具体实现。</li>\n</ul>\n<h2 id=\"Java-的基本类型\"><a href=\"#Java-的基本类型\" class=\"headerlink\" title=\"Java 的基本类型\"></a>Java 的基本类型</h2><p><img src=\"/2018/08/25/口水Java虚拟机/3.png\" alt=\"3\"></p>\n<ul>\n<li>byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。<br>从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。</li>\n<li>在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。<br>char 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。</li>\n</ul>\n"},{"title":"最长不重复子串长度问题的思路整理","comments":1,"date":"2018-10-12T02:58:16.000Z","updated":"2018-10-12T02:58:16.000Z","_content":"","source":"_posts/最长不重复子串长度问题的思路整理.md","raw":"---\ntitle: 最长不重复子串长度问题的思路整理\ncomments: true\ndate: 2018-10-12 10:58:16\nupdated: 2018-10-12 10:58:16\ntags:\n- 算法\ncategories:\n- 码文\n---\n","slug":"最长不重复子串长度问题的思路整理","published":1,"layout":"post","photos":[],"link":"","_id":"cjpj50wbt0006w9j38yst35y1","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":""},{"title":"手撕链表","comments":1,"date":"2018-10-18T09:56:16.000Z","updated":"2018-10-18T09:56:16.000Z","_content":"\n##### 一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。 \n##### 最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\n### 链表及其变体的特点\n![链表类型和优势](链表类型和优势.png)\n大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开\n都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。\n\n### 链表成员变量方法示意图\n![LinkedList](手撕链表/LinkedList.png)\n\n基于Jdk 8 中的LinkedList源码。\n可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。  \n核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。\n\n#### 1. linkFirst\n```\n    // train\n    public void linkFirst(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (head != null) {\n            Node<T> item = head;\n            head = tNode;\n            head.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    } \n```\n\n```\n    // JDK\n    private void linkFirst(E e) {\n        final Node<E> f = first;\n        final Node<E> newNode = new Node<>(null, e, f);\n        first = newNode;\n        if (f == null)\n            last = newNode;\n        else\n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口\n- jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，\n更合理\n- 关于modCount，在其父类AbstractList中有如下注释\n```\n    /**\n     * The number of times this list has been <i>structurally modified</i>.\n     * Structural modifications are those that change the size of the\n     * list, or otherwise perturb it in such a fashion that iterations in\n     * progress may yield incorrect results.\n     *\n     * <p>This field is used by the iterator and list iterator implementation\n     * returned by the {@code iterator} and {@code listIterator} methods.\n     * If the value of this field changes unexpectedly, the iterator (or list\n     * iterator) will throw a {@code ConcurrentModificationException} in\n     * response to the {@code next}, {@code remove}, {@code previous},\n     * {@code set} or {@code add} operations.  This provides\n     * <i>fail-fast</i> behavior, rather than non-deterministic behavior in\n     * the face of concurrent modification during iteration.\n     *\n     * <p><b>Use of this field by subclasses is optional.</b> If a subclass\n     * wishes to provide fail-fast iterators (and list iterators), then it\n     * merely has to increment this field in its {@code add(int, E)} and\n     * {@code remove(int)} methods (and any other methods that it overrides\n     * that result in structural modifications to the list).  A single call to\n     * {@code add(int, E)} or {@code remove(int)} must add no more than\n     * one to this field, or the iterators (and list iterators) will throw\n     * bogus {@code ConcurrentModificationExceptions}.  If an implementation\n     * does not wish to provide fail-fast iterators, this field may be\n     * ignored.\n     */\n    protected transient int modCount = 0;\n```\n    1. modCount为list结构修改次数。\n    2. 结构修改 -> 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下\n    对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）\n    3. iterator 和 listIterator 会用到，遍历过程中该值如果变化，\n    抛出ConcurrentModificationException\n    4. fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个\n    集合的内容进行操作时，就可能会产生fail-fast事件。\n    例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所\n    改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，\n    产生fail-fast事件。\n    5. 在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要\n    对该值做修改。\n#### 2. linkLast\n```\n    // train\n    public void linkLast(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (tail != null) {\n            Node<T> item = tail;\n            tail = tNode;\n            tail.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素\n是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）\n\n#### 3. linkBefore\n```\n    // train\n    public void linkBefore(T t, Node<T> item) {\n        Node<T> tNode = new Node<T>(t);\n        if (item != null) {\n            Node<T> prev = item.prev;\n            if (prev == null) {// item is head node\n                linkFirst(t);\n            } else {\n                prev.next = tNode;\n                tNode.prev = prev;\n                tNode.next = item;\n            }\n        } else {\n            throw new NullPointerException(\"Node item is null\");\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n        final Node<E> pred = succ.prev;\n        final Node<E> newNode = new Node<>(pred, e, succ);\n        succ.prev = newNode;\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，\n基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。\n\n#### 4. unlinkFirst\n```\n    // train\n    public T unlinkFirst(Node<T> f){\n        T val = f.val;\n        if (f != null) {\n            head = f.next;\n            f.val = null;\n            f.next = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n        final E element = f.item;\n        final Node<E> next = f.next;\n        f.item = null;\n        f.next = null; // help GC\n        first = next;\n        if (next == null)\n            last = null;\n        else\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- 设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致\nOOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC\n而是对GC有帮助而已，是否进行GC不是这里能决定的。[(相关资料)](https://blog.csdn.net/levena/article/details/78318830)\n\n#### 5. unlinkLast\n```\n    // train\n    public T unlinkLast(Node<T> l){\n        T val = l.val;\n        if (l != null) {\n            tail = l.prev;\n            l.prev = null;\n            l.val = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n        final E element = l.item;\n        final Node<E> prev = l.prev;\n        l.item = null;\n        l.prev = null; // help GC\n        last = prev;\n        if (prev == null)\n            first = null;\n        else\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n\n#### 6. unlink\n```\n    // train\n        public T unlink(Node<T> x){\n            T val = x.val;\n            if (x != null) {\n                Node<T> tNode = x.prev.next;\n                x.prev.next = x.next.prev;\n                x.next.prev = tNode;\n                x.prev = null;\n                x.val = null;\n                x.next = null;\n            } else {\n                throw new NullPointerException(\"Node is null\");\n            }\n            return val;\n        }\n```\n\n```\n    // JDK\n    E unlink(Node<E> x) {\n        // assert x != null;\n        final E element = x.item;\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n        if (prev == null) {\n            first = next;\n        } else {\n            prev.next = next;\n            x.prev = null;\n        }\n\n        if (next == null) {\n            last = prev;\n        } else {\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- jdk中在做删除相关操作是后，会把删除的值返回。\n\n#### 7. getFirst && getLast\n```\n    // train\n    public T getFirst(){\n        if (head != null) {\n            return head.val;\n        }\n        return null;\n    }\n\n    public T getLast(){\n        if (tail != null) {\n            return tail.val;\n        }\n        return null;\n    }\n```\n\n```\n    // JDK\n    public E getFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return f.item;\n    }\n\n    public E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n```\n分析：　\n- 下面就都是public了，是双向链表的基础操作\n- jdk在获取不存在的节点时，抛出NoSuchElementException\n\n#### 8. size\n```\n    // train\n    public int size(){\n        return size;\n    }\n```\n\n```\n    // JDK\n    public int size(){\n        return size;\n    }\n```\n分析：　\n- emmm,这还分析啥\n\n\n#### 9. indexOf\n```\n    // train\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o != null) {\n            for (Node<T> i = head; i != null; i = i.next) {\n                if (i.val.equals(o)) {\n                    return index;\n                }\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n\n```\n    // JDK\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n分析：　\n- 智障了吧，人家找null都要返回第一个null\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 10. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public void clear() {\n        // Clearing all of the links between nodes is \"unnecessary\", but:\n        // - helps a generational GC if the discarded nodes inhabit\n        //   more than one generation\n        // - is sure to free memory even if there is a reachable Iterator\n        for (Node<E> x = first; x != null; ) {\n            Node<E> next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }\n```\n分析：　\n- 这里说清空链表中所有\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 11. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        Node<E> pred, succ;\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            Node<E> newNode = new Node<>(pred, e, null);\n            if (pred == null)\n                first = newNode;\n            else\n                pred.next = newNode;\n            pred = newNode;\n        }\n\n        if (succ == null) {\n            last = pred;\n        } else {\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n```\n分析：　\n- allAll默认是在最后添加Collection的子类\n- 添加都是把集合对象通过toArray方法转化成数组，然后添加\n- 对index的位置有越界检查\n\n\n#### 12. clear\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。\n- JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说\n位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令\n是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，\n而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，\n移一位就乘2,这种乘法当然考虑移位了。\n\n### 常见链表相关操作实现\n\n#### 1.\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这\n","source":"_posts/手撕链表.md","raw":"---\ntitle: 手撕链表\ncomments: true\ndate: 2018-10-18 17:56:16\nupdated: 2018-10-18 17:56:16\ntags:\n- 数据结构\ncategories:\n- 码文\n---\n\n##### 一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。 \n##### 最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\n### 链表及其变体的特点\n![链表类型和优势](链表类型和优势.png)\n大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开\n都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。\n\n### 链表成员变量方法示意图\n![LinkedList](手撕链表/LinkedList.png)\n\n基于Jdk 8 中的LinkedList源码。\n可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。  \n核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。\n\n#### 1. linkFirst\n```\n    // train\n    public void linkFirst(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (head != null) {\n            Node<T> item = head;\n            head = tNode;\n            head.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    } \n```\n\n```\n    // JDK\n    private void linkFirst(E e) {\n        final Node<E> f = first;\n        final Node<E> newNode = new Node<>(null, e, f);\n        first = newNode;\n        if (f == null)\n            last = newNode;\n        else\n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口\n- jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，\n更合理\n- 关于modCount，在其父类AbstractList中有如下注释\n```\n    /**\n     * The number of times this list has been <i>structurally modified</i>.\n     * Structural modifications are those that change the size of the\n     * list, or otherwise perturb it in such a fashion that iterations in\n     * progress may yield incorrect results.\n     *\n     * <p>This field is used by the iterator and list iterator implementation\n     * returned by the {@code iterator} and {@code listIterator} methods.\n     * If the value of this field changes unexpectedly, the iterator (or list\n     * iterator) will throw a {@code ConcurrentModificationException} in\n     * response to the {@code next}, {@code remove}, {@code previous},\n     * {@code set} or {@code add} operations.  This provides\n     * <i>fail-fast</i> behavior, rather than non-deterministic behavior in\n     * the face of concurrent modification during iteration.\n     *\n     * <p><b>Use of this field by subclasses is optional.</b> If a subclass\n     * wishes to provide fail-fast iterators (and list iterators), then it\n     * merely has to increment this field in its {@code add(int, E)} and\n     * {@code remove(int)} methods (and any other methods that it overrides\n     * that result in structural modifications to the list).  A single call to\n     * {@code add(int, E)} or {@code remove(int)} must add no more than\n     * one to this field, or the iterators (and list iterators) will throw\n     * bogus {@code ConcurrentModificationExceptions}.  If an implementation\n     * does not wish to provide fail-fast iterators, this field may be\n     * ignored.\n     */\n    protected transient int modCount = 0;\n```\n    1. modCount为list结构修改次数。\n    2. 结构修改 -> 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下\n    对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）\n    3. iterator 和 listIterator 会用到，遍历过程中该值如果变化，\n    抛出ConcurrentModificationException\n    4. fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个\n    集合的内容进行操作时，就可能会产生fail-fast事件。\n    例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所\n    改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，\n    产生fail-fast事件。\n    5. 在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要\n    对该值做修改。\n#### 2. linkLast\n```\n    // train\n    public void linkLast(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (tail != null) {\n            Node<T> item = tail;\n            tail = tNode;\n            tail.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素\n是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）\n\n#### 3. linkBefore\n```\n    // train\n    public void linkBefore(T t, Node<T> item) {\n        Node<T> tNode = new Node<T>(t);\n        if (item != null) {\n            Node<T> prev = item.prev;\n            if (prev == null) {// item is head node\n                linkFirst(t);\n            } else {\n                prev.next = tNode;\n                tNode.prev = prev;\n                tNode.next = item;\n            }\n        } else {\n            throw new NullPointerException(\"Node item is null\");\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n        final Node<E> pred = succ.prev;\n        final Node<E> newNode = new Node<>(pred, e, succ);\n        succ.prev = newNode;\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，\n基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。\n\n#### 4. unlinkFirst\n```\n    // train\n    public T unlinkFirst(Node<T> f){\n        T val = f.val;\n        if (f != null) {\n            head = f.next;\n            f.val = null;\n            f.next = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n        final E element = f.item;\n        final Node<E> next = f.next;\n        f.item = null;\n        f.next = null; // help GC\n        first = next;\n        if (next == null)\n            last = null;\n        else\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- 设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致\nOOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC\n而是对GC有帮助而已，是否进行GC不是这里能决定的。[(相关资料)](https://blog.csdn.net/levena/article/details/78318830)\n\n#### 5. unlinkLast\n```\n    // train\n    public T unlinkLast(Node<T> l){\n        T val = l.val;\n        if (l != null) {\n            tail = l.prev;\n            l.prev = null;\n            l.val = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n        final E element = l.item;\n        final Node<E> prev = l.prev;\n        l.item = null;\n        l.prev = null; // help GC\n        last = prev;\n        if (prev == null)\n            first = null;\n        else\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n\n#### 6. unlink\n```\n    // train\n        public T unlink(Node<T> x){\n            T val = x.val;\n            if (x != null) {\n                Node<T> tNode = x.prev.next;\n                x.prev.next = x.next.prev;\n                x.next.prev = tNode;\n                x.prev = null;\n                x.val = null;\n                x.next = null;\n            } else {\n                throw new NullPointerException(\"Node is null\");\n            }\n            return val;\n        }\n```\n\n```\n    // JDK\n    E unlink(Node<E> x) {\n        // assert x != null;\n        final E element = x.item;\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n        if (prev == null) {\n            first = next;\n        } else {\n            prev.next = next;\n            x.prev = null;\n        }\n\n        if (next == null) {\n            last = prev;\n        } else {\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- jdk中在做删除相关操作是后，会把删除的值返回。\n\n#### 7. getFirst && getLast\n```\n    // train\n    public T getFirst(){\n        if (head != null) {\n            return head.val;\n        }\n        return null;\n    }\n\n    public T getLast(){\n        if (tail != null) {\n            return tail.val;\n        }\n        return null;\n    }\n```\n\n```\n    // JDK\n    public E getFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return f.item;\n    }\n\n    public E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n```\n分析：　\n- 下面就都是public了，是双向链表的基础操作\n- jdk在获取不存在的节点时，抛出NoSuchElementException\n\n#### 8. size\n```\n    // train\n    public int size(){\n        return size;\n    }\n```\n\n```\n    // JDK\n    public int size(){\n        return size;\n    }\n```\n分析：　\n- emmm,这还分析啥\n\n\n#### 9. indexOf\n```\n    // train\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o != null) {\n            for (Node<T> i = head; i != null; i = i.next) {\n                if (i.val.equals(o)) {\n                    return index;\n                }\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n\n```\n    // JDK\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n分析：　\n- 智障了吧，人家找null都要返回第一个null\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 10. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public void clear() {\n        // Clearing all of the links between nodes is \"unnecessary\", but:\n        // - helps a generational GC if the discarded nodes inhabit\n        //   more than one generation\n        // - is sure to free memory even if there is a reachable Iterator\n        for (Node<E> x = first; x != null; ) {\n            Node<E> next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }\n```\n分析：　\n- 这里说清空链表中所有\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 11. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        Node<E> pred, succ;\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            Node<E> newNode = new Node<>(pred, e, null);\n            if (pred == null)\n                first = newNode;\n            else\n                pred.next = newNode;\n            pred = newNode;\n        }\n\n        if (succ == null) {\n            last = pred;\n        } else {\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n```\n分析：　\n- allAll默认是在最后添加Collection的子类\n- 添加都是把集合对象通过toArray方法转化成数组，然后添加\n- 对index的位置有越界检查\n\n\n#### 12. clear\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。\n- JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说\n位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令\n是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，\n而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，\n移一位就乘2,这种乘法当然考虑移位了。\n\n### 常见链表相关操作实现\n\n#### 1.\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这\n","slug":"手撕链表","published":1,"layout":"post","photos":[],"link":"","_id":"cjpj50wbv0007w9j3dlwh9gwd","content":"<h5 id=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"><a href=\"#一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\" class=\"headerlink\" title=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"></a>一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。</h5><h5 id=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"><a href=\"#最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\" class=\"headerlink\" title=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"></a>最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。</h5><h3 id=\"链表及其变体的特点\"><a href=\"#链表及其变体的特点\" class=\"headerlink\" title=\"链表及其变体的特点\"></a>链表及其变体的特点</h3><p><img src=\"/2018/10/18/手撕链表/链表类型和优势.png\" alt=\"链表类型和优势\"><br>大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开<br>都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。</p>\n<h3 id=\"链表成员变量方法示意图\"><a href=\"#链表成员变量方法示意图\" class=\"headerlink\" title=\"链表成员变量方法示意图\"></a>链表成员变量方法示意图</h3><p><img src=\"/2018/10/18/手撕链表/LinkedList.png\" alt=\"LinkedList\"></p>\n<p>基于Jdk 8 中的LinkedList源码。<br>可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。<br>核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。</p>\n<h4 id=\"1-linkFirst\"><a href=\"#1-linkFirst\" class=\"headerlink\" title=\"1. linkFirst\"></a>1. linkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkFirst(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = head;</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        head.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private void linkFirst(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</span><br><span class=\"line\">    first = newNode;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        last = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        f.prev = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口</li>\n<li>jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，<br>更合理</li>\n<li><p>关于modCount，在其父类AbstractList中有如下注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span><br><span class=\"line\"> * Structural modifications are those that change the size of the</span><br><span class=\"line\"> * list, or otherwise perturb it in such a fashion that iterations in</span><br><span class=\"line\"> * progress may yield incorrect results.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This field is used by the iterator and list iterator implementation</span><br><span class=\"line\"> * returned by the &#123;@code iterator&#125; and &#123;@code listIterator&#125; methods.</span><br><span class=\"line\"> * If the value of this field changes unexpectedly, the iterator (or list</span><br><span class=\"line\"> * iterator) will throw a &#123;@code ConcurrentModificationException&#125; in</span><br><span class=\"line\"> * response to the &#123;@code next&#125;, &#123;@code remove&#125;, &#123;@code previous&#125;,</span><br><span class=\"line\"> * &#123;@code set&#125; or &#123;@code add&#125; operations.  This provides</span><br><span class=\"line\"> * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in</span><br><span class=\"line\"> * the face of concurrent modification during iteration.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass</span><br><span class=\"line\"> * wishes to provide fail-fast iterators (and list iterators), then it</span><br><span class=\"line\"> * merely has to increment this field in its &#123;@code add(int, E)&#125; and</span><br><span class=\"line\"> * &#123;@code remove(int)&#125; methods (and any other methods that it overrides</span><br><span class=\"line\"> * that result in structural modifications to the list).  A single call to</span><br><span class=\"line\"> * &#123;@code add(int, E)&#125; or &#123;@code remove(int)&#125; must add no more than</span><br><span class=\"line\"> * one to this field, or the iterators (and list iterators) will throw</span><br><span class=\"line\"> * bogus &#123;@code ConcurrentModificationExceptions&#125;.  If an implementation</span><br><span class=\"line\"> * does not wish to provide fail-fast iterators, this field may be</span><br><span class=\"line\"> * ignored.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected transient int modCount = 0;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>modCount为list结构修改次数。</li>\n<li>结构修改 -&gt; 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下<br>对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）</li>\n<li>iterator 和 listIterator 会用到，遍历过程中该值如果变化，<br>抛出ConcurrentModificationException</li>\n<li>fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个<br>集合的内容进行操作时，就可能会产生fail-fast事件。<br>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所<br>改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，<br>产生fail-fast事件。</li>\n<li>在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要<br>对该值做修改。<h4 id=\"2-linkLast\"><a href=\"#2-linkLast\" class=\"headerlink\" title=\"2. linkLast\"></a>2. linkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkLast(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = tail;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">        tail.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkLast(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素<br>是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）</li>\n</ul>\n<h4 id=\"3-linkBefore\"><a href=\"#3-linkBefore\" class=\"headerlink\" title=\"3. linkBefore\"></a>3. linkBefore</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkBefore(T t, Node&lt;T&gt; item) &#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (item != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; prev = item.prev;</span><br><span class=\"line\">        if (prev == null) &#123;// item is head node</span><br><span class=\"line\">            linkFirst(t);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            prev.next = tNode;</span><br><span class=\"line\">            tNode.prev = prev;</span><br><span class=\"line\">            tNode.next = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node item is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class=\"line\">    // assert succ != null;</span><br><span class=\"line\">    final Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">    succ.prev = newNode;</span><br><span class=\"line\">    if (pred == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        pred.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，<br>基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。</li>\n</ul>\n<h4 id=\"4-unlinkFirst\"><a href=\"#4-unlinkFirst\" class=\"headerlink\" title=\"4. unlinkFirst\"></a>4. unlinkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkFirst(Node&lt;T&gt; f)&#123;</span><br><span class=\"line\">    T val = f.val;</span><br><span class=\"line\">    if (f != null) &#123;</span><br><span class=\"line\">        head = f.next;</span><br><span class=\"line\">        f.val = null;</span><br><span class=\"line\">        f.next = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class=\"line\">    // assert f == first &amp;&amp; f != null;</span><br><span class=\"line\">    final E element = f.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = f.next;</span><br><span class=\"line\">    f.item = null;</span><br><span class=\"line\">    f.next = null; // help GC</span><br><span class=\"line\">    first = next;</span><br><span class=\"line\">    if (next == null)</span><br><span class=\"line\">        last = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        next.prev = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致<br>OOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC<br>而是对GC有帮助而已，是否进行GC不是这里能决定的。<a href=\"https://blog.csdn.net/levena/article/details/78318830\" target=\"_blank\" rel=\"noopener\">(相关资料)</a></li>\n</ul>\n<h4 id=\"5-unlinkLast\"><a href=\"#5-unlinkLast\" class=\"headerlink\" title=\"5. unlinkLast\"></a>5. unlinkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkLast(Node&lt;T&gt; l)&#123;</span><br><span class=\"line\">    T val = l.val;</span><br><span class=\"line\">    if (l != null) &#123;</span><br><span class=\"line\">        tail = l.prev;</span><br><span class=\"line\">        l.prev = null;</span><br><span class=\"line\">        l.val = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class=\"line\">    // assert l == last &amp;&amp; l != null;</span><br><span class=\"line\">    final E element = l.item;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = l.prev;</span><br><span class=\"line\">    l.item = null;</span><br><span class=\"line\">    l.prev = null; // help GC</span><br><span class=\"line\">    last = prev;</span><br><span class=\"line\">    if (prev == null)</span><br><span class=\"line\">        first = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        prev.next = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-unlink\"><a href=\"#6-unlink\" class=\"headerlink\" title=\"6. unlink\"></a>6. unlink</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">    public T unlink(Node&lt;T&gt; x)&#123;</span><br><span class=\"line\">        T val = x.val;</span><br><span class=\"line\">        if (x != null) &#123;</span><br><span class=\"line\">            Node&lt;T&gt; tNode = x.prev.next;</span><br><span class=\"line\">            x.prev.next = x.next.prev;</span><br><span class=\"line\">            x.next.prev = tNode;</span><br><span class=\"line\">            x.prev = null;</span><br><span class=\"line\">            x.val = null;</span><br><span class=\"line\">            x.next = null;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class=\"line\">    // assert x != null;</span><br><span class=\"line\">    final E element = x.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (prev == null) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (next == null) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    x.item = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk中在做删除相关操作是后，会把删除的值返回。</li>\n</ul>\n<h4 id=\"7-getFirst-amp-amp-getLast\"><a href=\"#7-getFirst-amp-amp-getLast\" class=\"headerlink\" title=\"7. getFirst &amp;&amp; getLast\"></a>7. getFirst &amp;&amp; getLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T getFirst()&#123;</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        return head.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public T getLast()&#123;</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        return tail.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public E getFirst() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return f.item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public E getLast() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return l.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>下面就都是public了，是双向链表的基础操作</li>\n<li>jdk在获取不存在的节点时，抛出NoSuchElementException</li>\n</ul>\n<h4 id=\"8-size\"><a href=\"#8-size\" class=\"headerlink\" title=\"8. size\"></a>8. size</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>emmm,这还分析啥</li>\n</ul>\n<h4 id=\"9-indexOf\"><a href=\"#9-indexOf\" class=\"headerlink\" title=\"9. indexOf\"></a>9. indexOf</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o != null) &#123;</span><br><span class=\"line\">        for (Node&lt;T&gt; i = head; i != null; i = i.next) &#123;</span><br><span class=\"line\">            if (i.val.equals(o)) &#123;</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o == null) &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (x.item == null)</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (o.equals(x.item))</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>智障了吧，人家找null都要返回第一个null</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"10-clear\"><a href=\"#10-clear\" class=\"headerlink\" title=\"10. clear\"></a>10. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void clear() &#123;</span><br><span class=\"line\">    // Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</span><br><span class=\"line\">    // - helps a generational GC if the discarded nodes inhabit</span><br><span class=\"line\">    //   more than one generation</span><br><span class=\"line\">    // - is sure to free memory even if there is a reachable Iterator</span><br><span class=\"line\">    for (Node&lt;E&gt; x = first; x != null; ) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">        x.item = null;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">        x = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    first = last = null;</span><br><span class=\"line\">    size = 0;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里说清空链表中所有</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"11-clear\"><a href=\"#11-clear\" class=\"headerlink\" title=\"11. clear\"></a>11. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    int numNew = a.length;</span><br><span class=\"line\">    if (numNew == 0)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;E&gt; pred, succ;</span><br><span class=\"line\">    if (index == size) &#123;</span><br><span class=\"line\">        succ = null;</span><br><span class=\"line\">        pred = last;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        succ = node(index);</span><br><span class=\"line\">        pred = succ.prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Object o : a) &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;</span><br><span class=\"line\">        Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);</span><br><span class=\"line\">        if (pred == null)</span><br><span class=\"line\">            first = newNode;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            pred.next = newNode;</span><br><span class=\"line\">        pred = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (succ == null) &#123;</span><br><span class=\"line\">        last = pred;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        pred.next = succ;</span><br><span class=\"line\">        succ.prev = pred;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    size += numNew;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void checkPositionIndex(int index) &#123;</span><br><span class=\"line\">    if (!isPositionIndex(index))</span><br><span class=\"line\">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private boolean isPositionIndex(int index) &#123;</span><br><span class=\"line\">    return index &gt;= 0 &amp;&amp; index &lt;= size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>allAll默认是在最后添加Collection的子类</li>\n<li>添加都是把集合对象通过toArray方法转化成数组，然后添加</li>\n<li>对index的位置有越界检查</li>\n</ul>\n<h4 id=\"12-clear\"><a href=\"#12-clear\" class=\"headerlink\" title=\"12. clear\"></a>12. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。</li>\n<li>JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说<br>位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令<br>是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，<br>而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，<br>移一位就乘2,这种乘法当然考虑移位了。</li>\n</ul>\n<h3 id=\"常见链表相关操作实现\"><a href=\"#常见链表相关操作实现\" class=\"headerlink\" title=\"常见链表相关操作实现\"></a>常见链表相关操作实现</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":"<h5 id=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"><a href=\"#一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\" class=\"headerlink\" title=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"></a>一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。</h5><h5 id=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"><a href=\"#最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\" class=\"headerlink\" title=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"></a>最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。</h5><h3 id=\"链表及其变体的特点\"><a href=\"#链表及其变体的特点\" class=\"headerlink\" title=\"链表及其变体的特点\"></a>链表及其变体的特点</h3><p><img src=\"/2018/10/18/手撕链表/链表类型和优势.png\" alt=\"链表类型和优势\"><br>大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开<br>都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。</p>\n<h3 id=\"链表成员变量方法示意图\"><a href=\"#链表成员变量方法示意图\" class=\"headerlink\" title=\"链表成员变量方法示意图\"></a>链表成员变量方法示意图</h3><p><img src=\"/2018/10/18/手撕链表/LinkedList.png\" alt=\"LinkedList\"></p>\n<p>基于Jdk 8 中的LinkedList源码。<br>可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。<br>核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。</p>\n<h4 id=\"1-linkFirst\"><a href=\"#1-linkFirst\" class=\"headerlink\" title=\"1. linkFirst\"></a>1. linkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkFirst(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = head;</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        head.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private void linkFirst(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</span><br><span class=\"line\">    first = newNode;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        last = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        f.prev = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口</li>\n<li>jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，<br>更合理</li>\n<li><p>关于modCount，在其父类AbstractList中有如下注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span><br><span class=\"line\"> * Structural modifications are those that change the size of the</span><br><span class=\"line\"> * list, or otherwise perturb it in such a fashion that iterations in</span><br><span class=\"line\"> * progress may yield incorrect results.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This field is used by the iterator and list iterator implementation</span><br><span class=\"line\"> * returned by the &#123;@code iterator&#125; and &#123;@code listIterator&#125; methods.</span><br><span class=\"line\"> * If the value of this field changes unexpectedly, the iterator (or list</span><br><span class=\"line\"> * iterator) will throw a &#123;@code ConcurrentModificationException&#125; in</span><br><span class=\"line\"> * response to the &#123;@code next&#125;, &#123;@code remove&#125;, &#123;@code previous&#125;,</span><br><span class=\"line\"> * &#123;@code set&#125; or &#123;@code add&#125; operations.  This provides</span><br><span class=\"line\"> * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in</span><br><span class=\"line\"> * the face of concurrent modification during iteration.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass</span><br><span class=\"line\"> * wishes to provide fail-fast iterators (and list iterators), then it</span><br><span class=\"line\"> * merely has to increment this field in its &#123;@code add(int, E)&#125; and</span><br><span class=\"line\"> * &#123;@code remove(int)&#125; methods (and any other methods that it overrides</span><br><span class=\"line\"> * that result in structural modifications to the list).  A single call to</span><br><span class=\"line\"> * &#123;@code add(int, E)&#125; or &#123;@code remove(int)&#125; must add no more than</span><br><span class=\"line\"> * one to this field, or the iterators (and list iterators) will throw</span><br><span class=\"line\"> * bogus &#123;@code ConcurrentModificationExceptions&#125;.  If an implementation</span><br><span class=\"line\"> * does not wish to provide fail-fast iterators, this field may be</span><br><span class=\"line\"> * ignored.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected transient int modCount = 0;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>modCount为list结构修改次数。</li>\n<li>结构修改 -&gt; 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下<br>对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）</li>\n<li>iterator 和 listIterator 会用到，遍历过程中该值如果变化，<br>抛出ConcurrentModificationException</li>\n<li>fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个<br>集合的内容进行操作时，就可能会产生fail-fast事件。<br>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所<br>改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，<br>产生fail-fast事件。</li>\n<li>在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要<br>对该值做修改。<h4 id=\"2-linkLast\"><a href=\"#2-linkLast\" class=\"headerlink\" title=\"2. linkLast\"></a>2. linkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkLast(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = tail;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">        tail.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkLast(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素<br>是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）</li>\n</ul>\n<h4 id=\"3-linkBefore\"><a href=\"#3-linkBefore\" class=\"headerlink\" title=\"3. linkBefore\"></a>3. linkBefore</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkBefore(T t, Node&lt;T&gt; item) &#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (item != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; prev = item.prev;</span><br><span class=\"line\">        if (prev == null) &#123;// item is head node</span><br><span class=\"line\">            linkFirst(t);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            prev.next = tNode;</span><br><span class=\"line\">            tNode.prev = prev;</span><br><span class=\"line\">            tNode.next = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node item is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class=\"line\">    // assert succ != null;</span><br><span class=\"line\">    final Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">    succ.prev = newNode;</span><br><span class=\"line\">    if (pred == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        pred.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，<br>基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。</li>\n</ul>\n<h4 id=\"4-unlinkFirst\"><a href=\"#4-unlinkFirst\" class=\"headerlink\" title=\"4. unlinkFirst\"></a>4. unlinkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkFirst(Node&lt;T&gt; f)&#123;</span><br><span class=\"line\">    T val = f.val;</span><br><span class=\"line\">    if (f != null) &#123;</span><br><span class=\"line\">        head = f.next;</span><br><span class=\"line\">        f.val = null;</span><br><span class=\"line\">        f.next = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class=\"line\">    // assert f == first &amp;&amp; f != null;</span><br><span class=\"line\">    final E element = f.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = f.next;</span><br><span class=\"line\">    f.item = null;</span><br><span class=\"line\">    f.next = null; // help GC</span><br><span class=\"line\">    first = next;</span><br><span class=\"line\">    if (next == null)</span><br><span class=\"line\">        last = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        next.prev = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致<br>OOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC<br>而是对GC有帮助而已，是否进行GC不是这里能决定的。<a href=\"https://blog.csdn.net/levena/article/details/78318830\" target=\"_blank\" rel=\"noopener\">(相关资料)</a></li>\n</ul>\n<h4 id=\"5-unlinkLast\"><a href=\"#5-unlinkLast\" class=\"headerlink\" title=\"5. unlinkLast\"></a>5. unlinkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkLast(Node&lt;T&gt; l)&#123;</span><br><span class=\"line\">    T val = l.val;</span><br><span class=\"line\">    if (l != null) &#123;</span><br><span class=\"line\">        tail = l.prev;</span><br><span class=\"line\">        l.prev = null;</span><br><span class=\"line\">        l.val = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class=\"line\">    // assert l == last &amp;&amp; l != null;</span><br><span class=\"line\">    final E element = l.item;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = l.prev;</span><br><span class=\"line\">    l.item = null;</span><br><span class=\"line\">    l.prev = null; // help GC</span><br><span class=\"line\">    last = prev;</span><br><span class=\"line\">    if (prev == null)</span><br><span class=\"line\">        first = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        prev.next = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-unlink\"><a href=\"#6-unlink\" class=\"headerlink\" title=\"6. unlink\"></a>6. unlink</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">    public T unlink(Node&lt;T&gt; x)&#123;</span><br><span class=\"line\">        T val = x.val;</span><br><span class=\"line\">        if (x != null) &#123;</span><br><span class=\"line\">            Node&lt;T&gt; tNode = x.prev.next;</span><br><span class=\"line\">            x.prev.next = x.next.prev;</span><br><span class=\"line\">            x.next.prev = tNode;</span><br><span class=\"line\">            x.prev = null;</span><br><span class=\"line\">            x.val = null;</span><br><span class=\"line\">            x.next = null;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class=\"line\">    // assert x != null;</span><br><span class=\"line\">    final E element = x.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (prev == null) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (next == null) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    x.item = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk中在做删除相关操作是后，会把删除的值返回。</li>\n</ul>\n<h4 id=\"7-getFirst-amp-amp-getLast\"><a href=\"#7-getFirst-amp-amp-getLast\" class=\"headerlink\" title=\"7. getFirst &amp;&amp; getLast\"></a>7. getFirst &amp;&amp; getLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T getFirst()&#123;</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        return head.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public T getLast()&#123;</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        return tail.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public E getFirst() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return f.item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public E getLast() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return l.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>下面就都是public了，是双向链表的基础操作</li>\n<li>jdk在获取不存在的节点时，抛出NoSuchElementException</li>\n</ul>\n<h4 id=\"8-size\"><a href=\"#8-size\" class=\"headerlink\" title=\"8. size\"></a>8. size</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>emmm,这还分析啥</li>\n</ul>\n<h4 id=\"9-indexOf\"><a href=\"#9-indexOf\" class=\"headerlink\" title=\"9. indexOf\"></a>9. indexOf</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o != null) &#123;</span><br><span class=\"line\">        for (Node&lt;T&gt; i = head; i != null; i = i.next) &#123;</span><br><span class=\"line\">            if (i.val.equals(o)) &#123;</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o == null) &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (x.item == null)</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (o.equals(x.item))</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>智障了吧，人家找null都要返回第一个null</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"10-clear\"><a href=\"#10-clear\" class=\"headerlink\" title=\"10. clear\"></a>10. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void clear() &#123;</span><br><span class=\"line\">    // Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</span><br><span class=\"line\">    // - helps a generational GC if the discarded nodes inhabit</span><br><span class=\"line\">    //   more than one generation</span><br><span class=\"line\">    // - is sure to free memory even if there is a reachable Iterator</span><br><span class=\"line\">    for (Node&lt;E&gt; x = first; x != null; ) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">        x.item = null;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">        x = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    first = last = null;</span><br><span class=\"line\">    size = 0;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里说清空链表中所有</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"11-clear\"><a href=\"#11-clear\" class=\"headerlink\" title=\"11. clear\"></a>11. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    int numNew = a.length;</span><br><span class=\"line\">    if (numNew == 0)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;E&gt; pred, succ;</span><br><span class=\"line\">    if (index == size) &#123;</span><br><span class=\"line\">        succ = null;</span><br><span class=\"line\">        pred = last;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        succ = node(index);</span><br><span class=\"line\">        pred = succ.prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Object o : a) &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;</span><br><span class=\"line\">        Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);</span><br><span class=\"line\">        if (pred == null)</span><br><span class=\"line\">            first = newNode;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            pred.next = newNode;</span><br><span class=\"line\">        pred = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (succ == null) &#123;</span><br><span class=\"line\">        last = pred;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        pred.next = succ;</span><br><span class=\"line\">        succ.prev = pred;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    size += numNew;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void checkPositionIndex(int index) &#123;</span><br><span class=\"line\">    if (!isPositionIndex(index))</span><br><span class=\"line\">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private boolean isPositionIndex(int index) &#123;</span><br><span class=\"line\">    return index &gt;= 0 &amp;&amp; index &lt;= size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>allAll默认是在最后添加Collection的子类</li>\n<li>添加都是把集合对象通过toArray方法转化成数组，然后添加</li>\n<li>对index的位置有越界检查</li>\n</ul>\n<h4 id=\"12-clear\"><a href=\"#12-clear\" class=\"headerlink\" title=\"12. clear\"></a>12. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。</li>\n<li>JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说<br>位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令<br>是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，<br>而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，<br>移一位就乘2,这种乘法当然考虑移位了。</li>\n</ul>\n<h3 id=\"常见链表相关操作实现\"><a href=\"#常见链表相关操作实现\" class=\"headerlink\" title=\"常见链表相关操作实现\"></a>常见链表相关操作实现</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这</li>\n</ul>\n"},{"title":"诗开头","comments":1,"date":"2018-07-09T16:27:32.000Z","updated":"2018-07-09T16:27:32.000Z","_content":"# 清平乐·别来春半\n###### ——李煜\n\n### 别来春半,触目柔肠断。\n### 砌下落梅如雪乱，拂了一身还满。\n### 雁来音信无凭，路遥归梦难成。\n### 离恨恰如春草，更行更远还生。\n\n","source":"_posts/诗开头-md.md","raw":"---\ntitle: 诗开头\ncomments: true\ndate: 2018-07-10 00:27:32\nupdated: 2018-07-10 00:27:32\ntags: \n    - 人生不满百 \n    - 诗词\ncategories: 古风\n---\n# 清平乐·别来春半\n###### ——李煜\n\n### 别来春半,触目柔肠断。\n### 砌下落梅如雪乱，拂了一身还满。\n### 雁来音信无凭，路遥归梦难成。\n### 离恨恰如春草，更行更远还生。\n\n","slug":"诗开头-md","published":1,"layout":"post","photos":[],"link":"","_id":"cjpj50wbw0008w9j3q7xrxszj","content":"<h1 id=\"清平乐·别来春半\"><a href=\"#清平乐·别来春半\" class=\"headerlink\" title=\"清平乐·别来春半\"></a>清平乐·别来春半</h1><h6 id=\"——李煜\"><a href=\"#——李煜\" class=\"headerlink\" title=\"——李煜\"></a>——李煜</h6><h3 id=\"别来春半-触目柔肠断。\"><a href=\"#别来春半-触目柔肠断。\" class=\"headerlink\" title=\"别来春半,触目柔肠断。\"></a>别来春半,触目柔肠断。</h3><h3 id=\"砌下落梅如雪乱，拂了一身还满。\"><a href=\"#砌下落梅如雪乱，拂了一身还满。\" class=\"headerlink\" title=\"砌下落梅如雪乱，拂了一身还满。\"></a>砌下落梅如雪乱，拂了一身还满。</h3><h3 id=\"雁来音信无凭，路遥归梦难成。\"><a href=\"#雁来音信无凭，路遥归梦难成。\" class=\"headerlink\" title=\"雁来音信无凭，路遥归梦难成。\"></a>雁来音信无凭，路遥归梦难成。</h3><h3 id=\"离恨恰如春草，更行更远还生。\"><a href=\"#离恨恰如春草，更行更远还生。\" class=\"headerlink\" title=\"离恨恰如春草，更行更远还生。\"></a>离恨恰如春草，更行更远还生。</h3>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"},"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}}},"excerpt":"","more":"<h1 id=\"清平乐·别来春半\"><a href=\"#清平乐·别来春半\" class=\"headerlink\" title=\"清平乐·别来春半\"></a>清平乐·别来春半</h1><h6 id=\"——李煜\"><a href=\"#——李煜\" class=\"headerlink\" title=\"——李煜\"></a>——李煜</h6><h3 id=\"别来春半-触目柔肠断。\"><a href=\"#别来春半-触目柔肠断。\" class=\"headerlink\" title=\"别来春半,触目柔肠断。\"></a>别来春半,触目柔肠断。</h3><h3 id=\"砌下落梅如雪乱，拂了一身还满。\"><a href=\"#砌下落梅如雪乱，拂了一身还满。\" class=\"headerlink\" title=\"砌下落梅如雪乱，拂了一身还满。\"></a>砌下落梅如雪乱，拂了一身还满。</h3><h3 id=\"雁来音信无凭，路遥归梦难成。\"><a href=\"#雁来音信无凭，路遥归梦难成。\" class=\"headerlink\" title=\"雁来音信无凭，路遥归梦难成。\"></a>雁来音信无凭，路遥归梦难成。</h3><h3 id=\"离恨恰如春草，更行更远还生。\"><a href=\"#离恨恰如春草，更行更远还生。\" class=\"headerlink\" title=\"离恨恰如春草，更行更远还生。\"></a>离恨恰如春草，更行更远还生。</h3>"}],"PostAsset":[{"_id":"source/_posts/GO-Web-旅行扎记/huaji.jpeg","slug":"huaji.jpeg","post":"cjpj50wbk0000w9j3woancdmj","modified":0,"renderable":0},{"_id":"source/_posts/手撕链表/LinkedList.png","slug":"LinkedList.png","post":"cjpj50wbv0007w9j3dlwh9gwd","modified":0,"renderable":0},{"_id":"source/_posts/手撕链表/链表类型和优势.png","slug":"链表类型和优势.png","post":"cjpj50wbv0007w9j3dlwh9gwd","modified":0,"renderable":0},{"_id":"source/_posts/口水Java虚拟机/1.png","slug":"1.png","post":"cjpj50wbp0002w9j35yo8jgrn","modified":0,"renderable":0},{"_id":"source/_posts/口水Java虚拟机/2.png","slug":"2.png","post":"cjpj50wbp0002w9j35yo8jgrn","modified":0,"renderable":0},{"_id":"source/_posts/口水Java虚拟机/3.png","slug":"3.png","post":"cjpj50wbp0002w9j35yo8jgrn","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjpj50wbv0007w9j3dlwh9gwd","category_id":"cjpj50wbs0004w9j3nxa0olwl","_id":"cjpj50wby000bw9j3j04ylm1q"},{"post_id":"cjpj50wbk0000w9j3woancdmj","category_id":"cjpj50wbs0004w9j3nxa0olwl","_id":"cjpj50wbz000ew9j338sgpbp2"},{"post_id":"cjpj50wbp0002w9j35yo8jgrn","category_id":"cjpj50wbs0004w9j3nxa0olwl","_id":"cjpj50wc1000hw9j3il9v2eai"},{"post_id":"cjpj50wbt0006w9j38yst35y1","category_id":"cjpj50wbs0004w9j3nxa0olwl","_id":"cjpj50wc1000kw9j3q25w9psq"},{"post_id":"cjpj50wbw0008w9j3q7xrxszj","category_id":"cjpj50wc1000gw9j33u5maxd7","_id":"cjpj50wc2000mw9j3snh0hhau"}],"PostTag":[{"post_id":"cjpj50wbk0000w9j3woancdmj","tag_id":"cjpj50wbt0005w9j3bu64wl1q","_id":"cjpj50wc0000fw9j3zw1s5yiq"},{"post_id":"cjpj50wbk0000w9j3woancdmj","tag_id":"cjpj50wbw000aw9j3cvrcvnfr","_id":"cjpj50wc1000iw9j3zzw3cx3s"},{"post_id":"cjpj50wbp0002w9j35yo8jgrn","tag_id":"cjpj50wbz000dw9j34pdpa251","_id":"cjpj50wc2000ow9j3or27my6h"},{"post_id":"cjpj50wbp0002w9j35yo8jgrn","tag_id":"cjpj50wc1000jw9j30x2fu0nw","_id":"cjpj50wc2000pw9j3jcl25cmm"},{"post_id":"cjpj50wbp0002w9j35yo8jgrn","tag_id":"cjpj50wc2000lw9j347plzejz","_id":"cjpj50wc2000rw9j3b26qomoa"},{"post_id":"cjpj50wbt0006w9j38yst35y1","tag_id":"cjpj50wc2000nw9j3helji0ph","_id":"cjpj50wc2000sw9j38bptmfpt"},{"post_id":"cjpj50wbv0007w9j3dlwh9gwd","tag_id":"cjpj50wc2000qw9j3rucb92ni","_id":"cjpj50wc3000uw9j3vssn5drx"},{"post_id":"cjpj50wbw0008w9j3q7xrxszj","tag_id":"cjpj50wc2000tw9j37m4q2gje","_id":"cjpj50wc3000ww9j3zoatotrp"},{"post_id":"cjpj50wbw0008w9j3q7xrxszj","tag_id":"cjpj50wc3000vw9j33ntfexeu","_id":"cjpj50wc3000xw9j3fcfczxu0"}],"Tag":[{"name":"Go","_id":"cjpj50wbt0005w9j3bu64wl1q"},{"name":"Web","_id":"cjpj50wbw000aw9j3cvrcvnfr"},{"name":"Java","_id":"cjpj50wbz000dw9j34pdpa251"},{"name":"jvm","_id":"cjpj50wc1000jw9j30x2fu0nw"},{"name":"笔记","_id":"cjpj50wc2000lw9j347plzejz"},{"name":"算法","_id":"cjpj50wc2000nw9j3helji0ph"},{"name":"数据结构","_id":"cjpj50wc2000qw9j3rucb92ni"},{"name":"人生不满百","_id":"cjpj50wc2000tw9j37m4q2gje"},{"name":"诗词","_id":"cjpj50wc3000vw9j33ntfexeu"}]}}
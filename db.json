{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/qrcode_for_gh.jpg","path":"images/qrcode_for_gh.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/reward/wechat.png","path":"images/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/reward/alipay.jpg","path":"images/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar/P1070776.jpg","path":"images/avatar/P1070776.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/s","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211530},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537027211522},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1537027211522},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537027211522},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1537027211522},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537027211522},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537027211522},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1537027211522},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1537027211522},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1537027211522},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1537027211522},{"_id":"themes/next/_config.yml","hash":"c64ee7be7930e251ddbf9a91a54b4a4b49af2bbc","modified":1541473545292},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1537027211522},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1537027211526},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1537027211530},{"_id":"source/archives/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/_posts/GO-Web-旅行扎记.md","hash":"c654a0ddfe0f431016d055cef5c45a2e64323ea0","modified":1539326723200},{"_id":"source/_posts/http协议要点.md","hash":"792e0eb7a17e1e40c4bb449718b88e055ee92e01","modified":1580976143924},{"_id":"source/_posts/java-HashMap-全解析.md","hash":"1c8e96eba6f680f5018e1a361162282d988f898d","modified":1580438753326},{"_id":"source/_posts/spring-boot-starter帮我们做了什么.md","hash":"97f59c161ba11986adf4441ccb13bc21c544a019","modified":1581000364971},{"_id":"source/_posts/grpc-要点a摘.md","hash":"dce524e3cb7c26f08c257f85df643439a3f213b0","modified":1576134275876},{"_id":"source/_posts/spring-boot搭建问题全记录.md","hash":"c460ce8e9be09b8f68530919e87f6f040df5fc8a","modified":1576134275876},{"_id":"source/_posts/干炒springboot心得.md","hash":"e4f845bfef858ecd3025ed6e30f19f106771f399","modified":1545381461119},{"_id":"source/_posts/spring-中的事务.md","hash":"a0ebe85551659c049176d5989d062ffe008c7df7","modified":1576221335036},{"_id":"source/_posts/初始的springboot项目的依赖分析.md","hash":"498d5382cd620d42e848e702de6c8bb0ee33edae","modified":1548064670747},{"_id":"source/_posts/口水Java虚拟机.md","hash":"1e25a425539ef94e66abad39b5798b5e5bd951e1","modified":1539326687780},{"_id":"source/_posts/最长不重复子串长度问题的思路整理.md","hash":"1810676061ee2b306056837fbbf635e0971cfdb2","modified":1539793144029},{"_id":"source/_posts/手撕链表.md","hash":"0ff74946e055d6f5972408c52a2502dd0deec1f5","modified":1544495959194},{"_id":"source/_posts/翻译-可检查异常：Java最大的错误.md","hash":"10d847739b68178d1629209ffdcd6b98e8bd25d1","modified":1576134275876},{"_id":"source/_posts/诗开头-md.md","hash":"375455dc6d605945f5fd3b76f6e6225623a25185","modified":1537027211506},{"_id":"source/_data/project.json","hash":"63b99e10018891b25eb7a32cfbd18dcabce4cc08","modified":1537027211502},{"_id":"source/about/index.md","hash":"c41002b5062101118ec958a25e5187ef53b64597","modified":1537027211506},{"_id":"source/_data/menu.yml","hash":"aebf048ccd7eb9e78143992a9dd59657d19fc3f9","modified":1537027211502},{"_id":"source/categories/index.md","hash":"387b5545216f1ecb5bc2b46a0d0e8ef856b22e8d","modified":1537027211506},{"_id":"source/tags/index.md","hash":"b690db8796b1ffe9018b96a073a54223d5940735","modified":1537027211506},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1537027211522},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1537027211522},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1537027211522},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1537027211522},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1537027211522},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1537027211522},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1537027211522},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1537027211522},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1537027211522},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1537027211526},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1537027211526},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1537027211526},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1537027211526},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1537027211526},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1537027211526},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1537027211526},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1537027211526},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1537027211526},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1537027211526},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1537027211526},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1537027211526},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1537027211526},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1537027211526},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1537027211526},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1537027211526},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1537027211526},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1537027211526},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1537027211530},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1537027211530},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1537027211530},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1537027211530},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1537027211530},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1537027211530},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1537027211530},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537027211530},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1537027211530},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1537027211530},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1537027211530},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537027211574},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537027211574},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537027211574},{"_id":"source/_posts/java-base-point-and-think.md","hash":"7830022861701a15fca7d85811eccfa40a0e9b4d","modified":1576134275876},{"_id":"source/_posts/干炒springboot心得/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211000},{"_id":"source/_posts/诗开头-md/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/about/index/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/categories/index/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"source/tags/index/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211506},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211538},{"_id":"source/_posts/GO-Web-旅行扎记/huaji.jpeg","hash":"2ec8da90cf292413bb4ce5672801e35621cf0822","modified":1537027211502},{"_id":"source/_posts/口水Java虚拟机/3.png","hash":"1680d087861bf84368522c727b064f31dd5c3da4","modified":1537027211506},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1537027211522},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1537027211522},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1537027211522},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1537027211526},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1537027211522},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1537027211526},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537027211526},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537027211526},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537027211526},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1537027211526},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537027211526},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1537027211526},{"_id":"themes/next/layout/_macro/post.swig","hash":"4364108600c4c90df8039953f076f1d2f5c5f21f","modified":1537027211526},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1537027211526},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1537027211526},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1537027211526},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1537027211526},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d64a38577dd2cf3c9a56c5b28d479fb315918ad1","modified":1537027211526},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cf8fe76993b513b97f379832222b6ec7e41a1c15","modified":1537027211526},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1537027211526},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1537027211526},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1537027211526},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1537027211526},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1537027211526},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1537027211530},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1537027211530},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1537027211530},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1537027211530},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1537027211530},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1537027211530},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537027211530},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537027211530},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1537027211530},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1537027211530},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1537027211530},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1537027211530},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1537027211530},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1537027211530},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"545102e3aa3ce494f7046abf71cefb7aaf671559","modified":1537027211530},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1537027211530},{"_id":"themes/next/scripts/tags/note.js","hash":"265dc7ee83d3fe317e88058e80aa8170230a005e","modified":1537027211530},{"_id":"themes/next/scripts/tags/tabs.js","hash":"6bdf2a1a23cb9922fa809c79af3b06339c28cd70","modified":1537027211530},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1537027211538},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537027211538},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537027211538},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537027211538},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537027211570},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537027211570},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537027211570},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537027211570},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537027211570},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537027211570},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537027211570},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537027211570},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537027211570},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537027211570},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537027211570},{"_id":"themes/next/source/images/qrcode_for_gh.jpg","hash":"af83f76fe4bf6d62cbc7a85e7ed96516b551ecb7","modified":1537027211570},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537027211570},{"_id":"source/_posts/初始的springboot项目的依赖分析/demo.png","hash":"6f78f63fe80466be80f2a0fdae07af21c721b990","modified":1548064431000},{"_id":"source/_posts/口水Java虚拟机/1.png","hash":"7088fcb0026d4eaf80d5392ad9d3765f2bfc0a28","modified":1537027211506},{"_id":"source/_posts/口水Java虚拟机/2.png","hash":"301b5ae2e8427b7c378973aa3d64bbfc622af312","modified":1537027211506},{"_id":"source/_posts/手撕链表/链表类型和优势.png","hash":"ca407111e47400fb7916831b791bb2ac2b003f0a","modified":1539857882000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211530},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211530},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211534},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211538},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537027211538},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1537027211526},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1537027211526},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537027211526},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1537027211526},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1537027211526},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537027211526},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537027211526},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1537027211526},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1537027211530},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1537027211530},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537027211530},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"8f1415d4013baa064136bf20420a326c20a9d8dd","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1537027211530},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"73723630eee3988127f9b9e06fd234b276e4f458","modified":1537027211530},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1537027211530},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1537027211530},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537027211530},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537027211530},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1537027211534},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1537027211534},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1537027211538},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537027211538},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1537027211538},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1537027211538},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1537027211570},{"_id":"themes/next/source/images/reward/wechat.png","hash":"17928300d172d3da638783c921323000a8c68777","modified":1537027211570},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1537027211570},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1537027211570},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1537027211570},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537027211570},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1537027211570},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1537027211570},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1537027211570},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1537027211570},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1537027211570},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537027211574},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537027211574},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537027211574},{"_id":"themes/next/source/images/reward/alipay.jpg","hash":"c2f3731dcd15c0c2f50f03787f5ab3e3af709b22","modified":1537027211570},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537027211570},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1537027211530},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537027211530},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537027211534},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537027211534},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1537027211538},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1537027211538},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1537027211570},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537027211574},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1537027211534},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537027211534},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537027211538},{"_id":"source/_posts/手撕链表/LinkedList.png","hash":"4c77d48963b10cbf85dc6e81da301b92fd534835","modified":1539933930000},{"_id":"themes/next/source/images/avatar/P1070776.jpg","hash":"553ee8a36dd119315ef091bc599b226938e19046","modified":1537027211570},{"_id":"public/about/index.html","hash":"61d93923459185ffbc930d1e1fe098f63fd2f7cd","modified":1581000542106},{"_id":"public/archives/2018/07/index.html","hash":"1a9154dc71e4bfa9e0d857b9d7abe847ad29da1a","modified":1581000542106},{"_id":"public/archives/2018/08/index.html","hash":"8ff9ea7cb20229739416d2965337e64df30238e7","modified":1581000542106},{"_id":"public/archives/2018/10/index.html","hash":"a93a97a18135a34da17d80c848c5ba897a71e147","modified":1581000542106},{"_id":"public/archives/2018/12/index.html","hash":"e62acb4e599c9bdddacdfdc2997d72b50cd999c8","modified":1581000542106},{"_id":"public/archives/2019/01/index.html","hash":"88d9b22c4b9e229fa22851772997860e1fedcca4","modified":1581000542107},{"_id":"public/archives/2019/03/index.html","hash":"fd23fc580e9161047219a3335a243fb13e027cfe","modified":1581000542107},{"_id":"public/archives/2019/09/index.html","hash":"449be4e3d1246bec31791b2b8ea281e1a9472927","modified":1581000542107},{"_id":"public/archives/2020/index.html","hash":"abed41ddac59ad9ca160070f556178dae0868c83","modified":1581000542107},{"_id":"public/archives/2020/02/index.html","hash":"73b98f8d0c8ffffdc286d95af214e89374bfede2","modified":1581000542107},{"_id":"public/categories/干炒springboot心得/index.html","hash":"de61fa47b4e674dbfffd17f97499d8fc51b49ff6","modified":1581000542107},{"_id":"public/categories/springboot/index.html","hash":"523044d583d8ae5d6f5413075de3188e45f7e3cf","modified":1581000542107},{"_id":"public/categories/java/index.html","hash":"a4f9d916584b2645f97c586bbb21cd88e6d5cf08","modified":1581000542107},{"_id":"public/categories/古风/index.html","hash":"bfe060a6b64af7455fb1cae9dc60896ab861c69a","modified":1581000542107},{"_id":"public/tags/Go/index.html","hash":"91b934995ae16e10b94dd80afd210e9d085aacad","modified":1581000542107},{"_id":"public/tags/Web/index.html","hash":"2e754a9efd16a831259df416111f4e12520b1cc7","modified":1581000542107},{"_id":"public/tags/java/index.html","hash":"553277d9ab1957bada6ef44a992bbd69f923af9c","modified":1581000542107},{"_id":"public/tags/hash/index.html","hash":"22339a82bbfda0d766863afc1863d5506d019d05","modified":1581000542107},{"_id":"public/tags/数据结构/index.html","hash":"4680b71fa38f71368d5382a2fe69f555a19f758b","modified":1581000542107},{"_id":"public/tags/HashMap/index.html","hash":"506533ee4d082d0ad90ceabbea9bb322a60ec935","modified":1581000542107},{"_id":"public/tags/基础/index.html","hash":"4b97b20e217a73a1400717718ba1be125f5a5ebe","modified":1581000542107},{"_id":"public/tags/网络协议/index.html","hash":"035082113e24acb0467c56f3139afedf2952668a","modified":1581000542107},{"_id":"public/tags/http/index.html","hash":"d96ce45ca14a4e269c46d756b4a297fb5a429b8d","modified":1581000542107},{"_id":"public/tags/spring-boot/index.html","hash":"77d9187230de92818696e949ed86b9426b67f4b3","modified":1581000542107},{"_id":"public/tags/rpc/index.html","hash":"693f604eecf5f7213ead07df212b8ec93701475f","modified":1581000542107},{"_id":"public/tags/grpc/index.html","hash":"36db08ee3bde5bec9b3eaba2dd38ff0e14f60ad5","modified":1581000542107},{"_id":"public/tags/go/index.html","hash":"d96252aba82375774cd248c88ee30a9d5f8bee05","modified":1581000542108},{"_id":"public/tags/记录/index.html","hash":"3114dbebfa00272b884a0867b2430e6fe3eabf9d","modified":1581000542108},{"_id":"public/tags/springboot-java/index.html","hash":"76cb05842ae27afa2562eec330b5d3832ececf43","modified":1581000542108},{"_id":"public/tags/spring/index.html","hash":"1d1d9aca09abf72baa086e0be4084e817ae38e36","modified":1581000542108},{"_id":"public/tags/数据库/index.html","hash":"245bd3a84603d3e1c3c09a574bb459eb00e5ca42","modified":1581000542108},{"_id":"public/tags/事务/index.html","hash":"e7c981466fe79f4df4eb3d339fa91243e57f2efb","modified":1581000542108},{"_id":"public/tags/Java/index.html","hash":"8fe5ba5b1a3bddb048ef28b4b9ff28f6865f57d6","modified":1581000542108},{"_id":"public/tags/springboot/index.html","hash":"59df62e38904b8385a10b503fa4215d588b33aae","modified":1581000542108},{"_id":"public/tags/jvm/index.html","hash":"28391e48f24b2233a24205d1d6950a8b7f35a18b","modified":1581000542108},{"_id":"public/tags/笔记/index.html","hash":"d4a54490f617f817772e7de73ae7cac5c5873d5a","modified":1581000542108},{"_id":"public/tags/算法/index.html","hash":"c9aa65d51ff531f3158b7df54789520316a64869","modified":1581000542108},{"_id":"public/tags/翻译/index.html","hash":"9494c641ee4b6055a7d8c5ee5c247b3d31bb0a87","modified":1581000542108},{"_id":"public/tags/异常/index.html","hash":"21ab88c52ef09363c1f63d8de88798a158c274db","modified":1581000542108},{"_id":"public/tags/人生不满百/index.html","hash":"7b236b8f4e91028c4c9ccb799e67f1404d132faf","modified":1581000542108},{"_id":"public/tags/诗词/index.html","hash":"65593c89ab2ad504a095c9205f22008105e093b0","modified":1581000542108},{"_id":"public/categories/index.html","hash":"32693718b3b0ee311d5f5499101c8cd8c8675dc5","modified":1581000542108},{"_id":"public/tags/index.html","hash":"9fde7d31b727a1149fcb45d983fc1eaff6267271","modified":1581000542108},{"_id":"public/2020/02/06/spring-boot-starter帮我们做了什么/index.html","hash":"aa50e30eba42ce458e41c1ab36792eece3962e77","modified":1581000542108},{"_id":"public/2020/02/04/http协议要点/index.html","hash":"2ce186de53c8cbe2019c25e57eb6eee6c939d14b","modified":1581000542108},{"_id":"public/2019/12/13/java-HashMap-全解析/index.html","hash":"b6d39da1139fdeaa634df44a659fcd2186e3d3c0","modified":1581000542109},{"_id":"public/2019/12/09/grpc-要点a摘/index.html","hash":"f515981081fe1429d01ad76ddf68f498ceac8983","modified":1581000542109},{"_id":"public/2019/12/08/spring-中的事务/index.html","hash":"cfea1f16f54480d6ccfbb5b7d09dfae92b42682a","modified":1581000542109},{"_id":"public/2019/12/07/spring-boot搭建问题全记录/index.html","hash":"1274df0fcb98c84a49dcf19a5f87d6d5f45ac412","modified":1581000542109},{"_id":"public/2019/09/26/翻译-可检查异常：Java最大的错误/index.html","hash":"b3c5fbb591079ae44641d87b54fb91c343bcddf6","modified":1581000542109},{"_id":"public/2019/03/14/java-base-point-and-think/index.html","hash":"48c36b2a7943028568fe7c5944406b093695de38","modified":1581000542109},{"_id":"public/2019/01/21/初始的springboot项目的依赖分析/index.html","hash":"e943bb04d866acccc1136399019d8b68b29b750a","modified":1581000542109},{"_id":"public/2018/12/21/干炒springboot心得/index.html","hash":"cb21c74a1d669c620ec0e73cfc1c1d274a37d30a","modified":1581000542109},{"_id":"public/2018/10/18/手撕链表/index.html","hash":"c5e15327867c20977049912cf617d8851ed6aeea","modified":1581000542109},{"_id":"public/2018/10/12/最长不重复子串长度问题的思路整理/index.html","hash":"67f17b15a8270cba804eccdf24df0f881bc8844d","modified":1581000542109},{"_id":"public/2018/08/25/口水Java虚拟机/index.html","hash":"7b629f0ed114d277855b613cf7a31298c86ee8e9","modified":1581000542109},{"_id":"public/2018/07/17/GO-Web-旅行扎记/index.html","hash":"0532901c4dc619531cf02340a7016fbc96b8d534","modified":1581000542109},{"_id":"public/2018/07/10/诗开头-md/index.html","hash":"0610f91a5bea4bed226b2b06d38fb740e3b33bc4","modified":1581000542109},{"_id":"public/archives/index.html","hash":"095e42522413e0fc7c2605193ac25349147e3116","modified":1581000542109},{"_id":"public/archives/2018/index.html","hash":"a6f3a153b339dafa464a7fc332be1ea8b3e4bdfe","modified":1581000542109},{"_id":"public/archives/2019/index.html","hash":"63cd73f164048b471f8229d19efc8792b1caa725","modified":1581000542109},{"_id":"public/archives/2019/12/index.html","hash":"b424e737a7c892d157dc223b62a9093b116f5db7","modified":1581000542110},{"_id":"public/categories/码文/index.html","hash":"1c632775df590e0650f570b98f0e0921a73ca539","modified":1581000542110},{"_id":"public/index.html","hash":"e10c792eb595746eedb9e1ecf565515c4669c9ab","modified":1581000542110},{"_id":"public/page/2/index.html","hash":"753094585b26d25bfe6f2a13a787d5e6c40866c9","modified":1581000542110},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1581000542149},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1581000542149},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1581000542149},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1581000542149},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1581000542150},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1581000542150},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1581000542150},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1581000542150},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1581000542150},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1581000542150},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1581000542150},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1581000542150},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1581000542150},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1581000542150},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1581000542150},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1581000542150},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1581000542150},{"_id":"public/images/qrcode_for_gh.jpg","hash":"af83f76fe4bf6d62cbc7a85e7ed96516b551ecb7","modified":1581000542150},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1581000542151},{"_id":"public/images/reward/wechat.png","hash":"17928300d172d3da638783c921323000a8c68777","modified":1581000542151},{"_id":"public/2018/07/17/GO-Web-旅行扎记/huaji.jpeg","hash":"2ec8da90cf292413bb4ce5672801e35621cf0822","modified":1581000542151},{"_id":"public/2018/08/25/口水Java虚拟机/3.png","hash":"1680d087861bf84368522c727b064f31dd5c3da4","modified":1581000542151},{"_id":"public/images/reward/alipay.jpg","hash":"c2f3731dcd15c0c2f50f03787f5ab3e3af709b22","modified":1581000542557},{"_id":"public/2019/01/21/初始的springboot项目的依赖分析/demo.png","hash":"6f78f63fe80466be80f2a0fdae07af21c721b990","modified":1581000542559},{"_id":"public/2018/10/18/手撕链表/链表类型和优势.png","hash":"ca407111e47400fb7916831b791bb2ac2b003f0a","modified":1581000542559},{"_id":"public/2018/08/25/口水Java虚拟机/1.png","hash":"7088fcb0026d4eaf80d5392ad9d3765f2bfc0a28","modified":1581000542559},{"_id":"public/2018/08/25/口水Java虚拟机/2.png","hash":"301b5ae2e8427b7c378973aa3d64bbfc622af312","modified":1581000542559},{"_id":"public/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1581000542562},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1581000542562},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1581000542562},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1581000542562},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1581000542562},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1581000542562},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1581000542562},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1581000542562},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1581000542562},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1581000542562},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1581000542562},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1581000542562},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1581000542562},{"_id":"public/css/main.css","hash":"df604245c83ba6fc046af0069958709faa1b5fbb","modified":1581000542562},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1581000542562},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1581000542562},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1581000542562},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1581000542562},{"_id":"public/2018/10/18/手撕链表/LinkedList.png","hash":"4c77d48963b10cbf85dc6e81da301b92fd534835","modified":1581000542578},{"_id":"public/images/avatar/P1070776.jpg","hash":"553ee8a36dd119315ef091bc599b226938e19046","modified":1581000542590}],"Category":[{"name":"码文","_id":"ck6auwf230004hgj3p7kgpu7t"},{"name":"干炒springboot心得","_id":"ck6auwf2g000lhgj3l4ipwsf1"},{"name":"springboot","_id":"ck6auwf2i000shgj3jiquph7w"},{"name":"java","_id":"ck6auwf2l0011hgj3iflfgwl1"},{"name":"古风","_id":"ck6auwf2m0015hgj3t1js1qmq"}],"Data":[{"_id":"project","data":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}}},{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[{"title":"about","date":"2018-07-09T16:37:17.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-10 00:37:17\ntype: \"about\"\n---\n","updated":"2018-09-15T16:00:11.506Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck6auwf1y0001hgj3vpon62iy","content":"","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"title":"categories","date":"2018-07-09T16:37:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-10 00:37:03\ntype: \"categories\"\n---\n","updated":"2018-09-15T16:00:11.506Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck6auwf210003hgj3roim5o6k","content":"","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-09T16:35:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-10 00:35:26\ntype: \"tags\"\n---\n","updated":"2018-09-15T16:00:11.506Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck6auwf76002thgj3qr056emu","content":"","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""}],"Post":[{"title":"GO Web 旅行扎记","comments":1,"date":"2018-07-17T09:41:54.000Z","updated":"2018-07-17T09:41:54.000Z","_content":"## 第一站 · 出发前先收拾好行囊 &emsp;<font color=gray>——环境搭建</font>\n\n&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了 \n**GOROOT**和**GOPATH**，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。\n\n![huaji](./huaji.jpeg)  \n\n[安装](https://golang.org/doc/install)官方说的很清楚了，这里几个点特意提出下。\n\n- Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中\n```bash\nexport GOROOT=$HOME/go1.X\nexport PATH=$PATH:$GOROOT/bin\n```\n- Workspaces工作空间  \n&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。**所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。**\n\n>\nA workspace is a directory hierarchy with three directories at its root :\n- src contains Go source files,\n- pkg contains package objects, and \n- bin contains executable commands.  \nThe go tool builds source packages and installs the resulting binaries to the pkg and bin directories.\n  \n  &emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：\n  - src里面是Go的源码文件\n  - pkg里面是包对象\n  - bin里面是可以执行的Go相关命令  \n  go工具构建源码并将生成的二进制文件安装到pkg和bin目录。\n  \n  ","source":"_posts/GO-Web-旅行扎记.md","raw":"---\ntitle: GO Web 旅行扎记\ncomments: true\ndate: 2018-07-17 17:41:54\nupdated: 2018-07-17 17:41:54\ntags:\n    - Go\n    - Web\ncategories: 码文\n---\n## 第一站 · 出发前先收拾好行囊 &emsp;<font color=gray>——环境搭建</font>\n\n&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了 \n**GOROOT**和**GOPATH**，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。\n\n![huaji](./huaji.jpeg)  \n\n[安装](https://golang.org/doc/install)官方说的很清楚了，这里几个点特意提出下。\n\n- Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中\n```bash\nexport GOROOT=$HOME/go1.X\nexport PATH=$PATH:$GOROOT/bin\n```\n- Workspaces工作空间  \n&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。**所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。**\n\n>\nA workspace is a directory hierarchy with three directories at its root :\n- src contains Go source files,\n- pkg contains package objects, and \n- bin contains executable commands.  \nThe go tool builds source packages and installs the resulting binaries to the pkg and bin directories.\n  \n  &emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：\n  - src里面是Go的源码文件\n  - pkg里面是包对象\n  - bin里面是可以执行的Go相关命令  \n  go工具构建源码并将生成的二进制文件安装到pkg和bin目录。\n  \n  ","slug":"GO-Web-旅行扎记","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf1u0000hgj385edw0kt","content":"<h2 id=\"第一站-·-出发前先收拾好行囊-emsp-——环境搭建\"><a href=\"#第一站-·-出发前先收拾好行囊-emsp-——环境搭建\" class=\"headerlink\" title=\"第一站 · 出发前先收拾好行囊 &emsp;——环境搭建\"></a>第一站 · 出发前先收拾好行囊 &emsp;<font color=\"gray\">——环境搭建</font></h2><p>&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了<br><strong>GOROOT</strong>和<strong>GOPATH</strong>，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。</p>\n<p><img src=\"/2018/07/17/GO-Web-旅行扎记/huaji.jpeg\" alt=\"huaji\">  </p>\n<p><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">安装</a>官方说的很清楚了，这里几个点特意提出下。</p>\n<ul>\n<li><p>Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"variable\">$HOME</span>/go1.X</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Workspaces工作空间<br>&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。<strong>所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。</strong></p>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<p>A workspace is a directory hierarchy with three directories at its root :</p>\n<ul>\n<li>src contains Go source files,</li>\n<li>pkg contains package objects, and </li>\n<li><p>bin contains executable commands.<br>The go tool builds source packages and installs the resulting binaries to the pkg and bin directories.</p>\n<p>&emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：</p>\n<ul>\n<li>src里面是Go的源码文件</li>\n<li>pkg里面是包对象</li>\n<li>bin里面是可以执行的Go相关命令<br>go工具构建源码并将生成的二进制文件安装到pkg和bin目录。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h2 id=\"第一站-·-出发前先收拾好行囊-emsp-——环境搭建\"><a href=\"#第一站-·-出发前先收拾好行囊-emsp-——环境搭建\" class=\"headerlink\" title=\"第一站 · 出发前先收拾好行囊 &emsp;——环境搭建\"></a>第一站 · 出发前先收拾好行囊 &emsp;<font color=\"gray\">——环境搭建</font></h2><p>&emsp;&emsp;网上有无数的搭建教程，安装操作流程根据OS操作自然不同，这些参考其他同学的就够了。这里想说的一点就是，几乎所有的都提到了<br><strong>GOROOT</strong>和<strong>GOPATH</strong>，但是原谅我，在座的各位……不不不，下面只是按我的方式理解了下这个东西，你能理解我最好，说明咱们脑回路一个死样子。</p>\n<p><img src=\"/2018/07/17/GO-Web-旅行扎记/huaji.jpeg\" alt=\"huaji\">  </p>\n<p><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">安装</a>官方说的很清楚了，这里几个点特意提出下。</p>\n<ul>\n<li><p>Linux, Mac OS X, and FreeBSD tarballs下，自定义安装路径后，需要设置GOROOT并且加入系统path中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"variable\">$HOME</span>/go1.X</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Workspaces工作空间<br>&emsp;&emsp;用过Eclipse的盆友们更容易理解这个概念，其实就是GO给你了个空间去做你的事情，而不放在GOROOT里，避免污染GO自己的代码。<strong>所以，别把GOROOT和GOPATH放在一个地方，GOROOT不能包含GOPATH，否则会报错。</strong></p>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<p>A workspace is a directory hierarchy with three directories at its root :</p>\n<ul>\n<li>src contains Go source files,</li>\n<li>pkg contains package objects, and </li>\n<li><p>bin contains executable commands.<br>The go tool builds source packages and installs the resulting binaries to the pkg and bin directories.</p>\n<p>&emsp;&emsp;原文上面自取，工作空间是一个和GOROOT同级的文件夹，主要包含这三级文件夹：</p>\n<ul>\n<li>src里面是Go的源码文件</li>\n<li>pkg里面是包对象</li>\n<li>bin里面是可以执行的Go相关命令<br>go工具构建源码并将生成的二进制文件安装到pkg和bin目录。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"java HashMap 全解析","comments":1,"date":"2019-12-13T07:16:26.000Z","updated":"2019-12-13T07:16:26.000Z","_content":"### 我们分析的HashMap主要以分析java8实现为主\n\n### HashMap概述摘要\n继承AbstractMap父类\n实现Map<K, V>, Cloneable, Serializable接口\n\n### HashMap的内部数据结构\n1. 默认初始大小16\n```bash\nstatic final int DEFAULT_INITIAL_CAPACITY = 16;\n```\n2. 最大容量2^30次方\n```bash\nstatic final int MAXIMUM_CAPACITY = 1073741824;\n```\n3. 默认负载因子0.75\n```bash\nstatic final float DEFAULT_LOAD_FACTOR = 0.75F;\n```\n4. 树化临界值8  \n执行put操作的时候，会出现桶碰撞的情况，这时候桶索引值相同的键值对会以一个链表的形式存在于hash桶中，但是当链表长度很长的时候，\n查找的性能会很低.当链表的长度超过TREEIFY_THRESHOLD（8）的时候，链表会树化，即通过treeifyBin()方法转换成红黑树。\n```bash\nstatic final int TREEIFY_THRESHOLD = 8;\n```\n5. 去树化临界值6  \n节点数小于6的时候，从树结构变回链表\n```bash\nstatic final int UNTREEIFY_THRESHOLD = 6;\n```\n6. 去树化临界值6  \n节点数小于6的时候，从树结构变回链表\n```bash\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n```","source":"_posts/java-HashMap-全解析.md","raw":"---\ntitle: java HashMap 全解析\ncomments: true\ndate: 2019-12-13 15:16:26\nupdated: 2019-12-13 15:16:26\ntags:\n    - java\n    - hash\n    - 数据结构\n    - HashMap\ncategories: 码文\n---\n### 我们分析的HashMap主要以分析java8实现为主\n\n### HashMap概述摘要\n继承AbstractMap父类\n实现Map<K, V>, Cloneable, Serializable接口\n\n### HashMap的内部数据结构\n1. 默认初始大小16\n```bash\nstatic final int DEFAULT_INITIAL_CAPACITY = 16;\n```\n2. 最大容量2^30次方\n```bash\nstatic final int MAXIMUM_CAPACITY = 1073741824;\n```\n3. 默认负载因子0.75\n```bash\nstatic final float DEFAULT_LOAD_FACTOR = 0.75F;\n```\n4. 树化临界值8  \n执行put操作的时候，会出现桶碰撞的情况，这时候桶索引值相同的键值对会以一个链表的形式存在于hash桶中，但是当链表长度很长的时候，\n查找的性能会很低.当链表的长度超过TREEIFY_THRESHOLD（8）的时候，链表会树化，即通过treeifyBin()方法转换成红黑树。\n```bash\nstatic final int TREEIFY_THRESHOLD = 8;\n```\n5. 去树化临界值6  \n节点数小于6的时候，从树结构变回链表\n```bash\nstatic final int UNTREEIFY_THRESHOLD = 6;\n```\n6. 去树化临界值6  \n节点数小于6的时候，从树结构变回链表\n```bash\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n```","slug":"java-HashMap-全解析","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf200002hgj32kjzof5v","content":"<h3 id=\"我们分析的HashMap主要以分析java8实现为主\"><a href=\"#我们分析的HashMap主要以分析java8实现为主\" class=\"headerlink\" title=\"我们分析的HashMap主要以分析java8实现为主\"></a>我们分析的HashMap主要以分析java8实现为主</h3><h3 id=\"HashMap概述摘要\"><a href=\"#HashMap概述摘要\" class=\"headerlink\" title=\"HashMap概述摘要\"></a>HashMap概述摘要</h3><p>继承AbstractMap父类<br>实现Map&lt;K, V&gt;, Cloneable, Serializable接口</p>\n<h3 id=\"HashMap的内部数据结构\"><a href=\"#HashMap的内部数据结构\" class=\"headerlink\" title=\"HashMap的内部数据结构\"></a>HashMap的内部数据结构</h3><ol>\n<li><p>默认初始大小16</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 16;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最大容量2^30次方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int MAXIMUM_CAPACITY = 1073741824;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认负载因子0.75</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final <span class=\"built_in\">float</span> DEFAULT_LOAD_FACTOR = 0.75F;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>树化临界值8<br>执行put操作的时候，会出现桶碰撞的情况，这时候桶索引值相同的键值对会以一个链表的形式存在于hash桶中，但是当链表长度很长的时候，<br>查找的性能会很低.当链表的长度超过TREEIFY_THRESHOLD（8）的时候，链表会树化，即通过treeifyBin()方法转换成红黑树。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int TREEIFY_THRESHOLD = 8;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去树化临界值6<br>节点数小于6的时候，从树结构变回链表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int UNTREEIFY_THRESHOLD = 6;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去树化临界值6<br>节点数小于6的时候，从树结构变回链表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h3 id=\"我们分析的HashMap主要以分析java8实现为主\"><a href=\"#我们分析的HashMap主要以分析java8实现为主\" class=\"headerlink\" title=\"我们分析的HashMap主要以分析java8实现为主\"></a>我们分析的HashMap主要以分析java8实现为主</h3><h3 id=\"HashMap概述摘要\"><a href=\"#HashMap概述摘要\" class=\"headerlink\" title=\"HashMap概述摘要\"></a>HashMap概述摘要</h3><p>继承AbstractMap父类<br>实现Map&lt;K, V&gt;, Cloneable, Serializable接口</p>\n<h3 id=\"HashMap的内部数据结构\"><a href=\"#HashMap的内部数据结构\" class=\"headerlink\" title=\"HashMap的内部数据结构\"></a>HashMap的内部数据结构</h3><ol>\n<li><p>默认初始大小16</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 16;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最大容量2^30次方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int MAXIMUM_CAPACITY = 1073741824;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认负载因子0.75</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final <span class=\"built_in\">float</span> DEFAULT_LOAD_FACTOR = 0.75F;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>树化临界值8<br>执行put操作的时候，会出现桶碰撞的情况，这时候桶索引值相同的键值对会以一个链表的形式存在于hash桶中，但是当链表长度很长的时候，<br>查找的性能会很低.当链表的长度超过TREEIFY_THRESHOLD（8）的时候，链表会树化，即通过treeifyBin()方法转换成红黑树。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int TREEIFY_THRESHOLD = 8;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去树化临界值6<br>节点数小于6的时候，从树结构变回链表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int UNTREEIFY_THRESHOLD = 6;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去树化临界值6<br>节点数小于6的时候，从树结构变回链表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"http协议要点","comments":1,"date":"2020-02-04T06:17:55.000Z","updated":"2020-02-04T06:17:55.000Z","_content":"#### TCP/IP协议\n1. 一说是协议群的统称,互联网协议.\n2. 分层:应用层 传输层 网络层 数据链路层.分层的意义:接口和实现分离有相同的意义,有搞懂改本层实现就好了\n3. 应用层:提供应用服务的通信活动.http ftp DNS服务\n4. 传输层:对应用层提供处于网络连接中的两台计算机之间的数据传输.TCP(transmission control protocol)  UDP(user data protocol)\n5. 网络层:处理网络上流动的数据包.数据包是网络传输的最小单位.规定了通过怎样的路径到达对方计算机,并把数据包传递给对方. ip\n6. 数据链路层:连接网络的硬件部分.操作系统,网卡,光纤.\n7. IP(internet protocol):区别ip地址.\n网络层.保证把各种数据包传送到对方哪里,其中依靠ip地址(指明节点被分配到的地址)和mac地址(网卡所属的固定地址).\n经过多台网络设备中转的时候,通过ARP协议通过通信ip地址可以反查出对应的MAC地址.\n8. TCP:位于传输层,提供可靠的字节流服务.字节流:将大块数据分割成数据段(segment)为单位的数据包进行管理.可靠传输:通过三次握手能确认是不是传输接受罚金给对方了.\n9. 三次握手: 发送端发送一个带有**SYN**标志的数据包给接收方;接收方收到后,回传一个**SYN/ACK**标志,表示确认信息;发送端再回传一个**ACK**标志,代表握手结束.\n10. DNS:域名解析服务\n11. URI和URL:统一资源标识符&统一资源定位符  \n\n#### HTTP协议\n1. 概念:\n    - HyperText Transfer Protocol 超文本传输协议  \n    - 超文本:html css js 图片 音视频 文件  \n    - s端和c端通信协议,c端发起请求,s端返回响应\n2. 特点:\n    - 支持c/s模式\n    - 简单快速\n    - 灵活\n    - 无连接:每次连接只处理一个请求,收到响应后断开连接,尽快将资源释放.但是之后随着访问次数变多,每次请求都建立,断开tcp连接,效率很低.\n    **Keep-Alive**解决了这个问题,保持持续连接.可以后续继续使用,但是也占用着资源.这里注意keepalive时间和意外断开等.\n    - 无状态:没有记忆能力,不处理事务,每个请求相互独立.可能每次请求传输大量重复内容.\n    **Cookie**客户端保存了一些信息和状态.关闭浏览器和清除就消失.**session**服务端保存的信息和状态,服务端设置过期时间等.\n    - 管线化:可以同时请求.可以同时发出多个请求,不用等待响应返回.幂等的请求才会被管道化GET HEAD 而POST不会\n3. http消息结构\n    - 请求消息:请求行 + 请求头字段 + 一个空行 + 消息主体","source":"_posts/http协议要点.md","raw":"---\ntitle: http协议要点\ncomments: true\ndate: 2020-02-04 14:17:55\nupdated: 2020-02-04 14:17:55\ntags:\n    - 基础\n    - 网络协议\n    - http\ncategories: 码文\n---\n#### TCP/IP协议\n1. 一说是协议群的统称,互联网协议.\n2. 分层:应用层 传输层 网络层 数据链路层.分层的意义:接口和实现分离有相同的意义,有搞懂改本层实现就好了\n3. 应用层:提供应用服务的通信活动.http ftp DNS服务\n4. 传输层:对应用层提供处于网络连接中的两台计算机之间的数据传输.TCP(transmission control protocol)  UDP(user data protocol)\n5. 网络层:处理网络上流动的数据包.数据包是网络传输的最小单位.规定了通过怎样的路径到达对方计算机,并把数据包传递给对方. ip\n6. 数据链路层:连接网络的硬件部分.操作系统,网卡,光纤.\n7. IP(internet protocol):区别ip地址.\n网络层.保证把各种数据包传送到对方哪里,其中依靠ip地址(指明节点被分配到的地址)和mac地址(网卡所属的固定地址).\n经过多台网络设备中转的时候,通过ARP协议通过通信ip地址可以反查出对应的MAC地址.\n8. TCP:位于传输层,提供可靠的字节流服务.字节流:将大块数据分割成数据段(segment)为单位的数据包进行管理.可靠传输:通过三次握手能确认是不是传输接受罚金给对方了.\n9. 三次握手: 发送端发送一个带有**SYN**标志的数据包给接收方;接收方收到后,回传一个**SYN/ACK**标志,表示确认信息;发送端再回传一个**ACK**标志,代表握手结束.\n10. DNS:域名解析服务\n11. URI和URL:统一资源标识符&统一资源定位符  \n\n#### HTTP协议\n1. 概念:\n    - HyperText Transfer Protocol 超文本传输协议  \n    - 超文本:html css js 图片 音视频 文件  \n    - s端和c端通信协议,c端发起请求,s端返回响应\n2. 特点:\n    - 支持c/s模式\n    - 简单快速\n    - 灵活\n    - 无连接:每次连接只处理一个请求,收到响应后断开连接,尽快将资源释放.但是之后随着访问次数变多,每次请求都建立,断开tcp连接,效率很低.\n    **Keep-Alive**解决了这个问题,保持持续连接.可以后续继续使用,但是也占用着资源.这里注意keepalive时间和意外断开等.\n    - 无状态:没有记忆能力,不处理事务,每个请求相互独立.可能每次请求传输大量重复内容.\n    **Cookie**客户端保存了一些信息和状态.关闭浏览器和清除就消失.**session**服务端保存的信息和状态,服务端设置过期时间等.\n    - 管线化:可以同时请求.可以同时发出多个请求,不用等待响应返回.幂等的请求才会被管道化GET HEAD 而POST不会\n3. http消息结构\n    - 请求消息:请求行 + 请求头字段 + 一个空行 + 消息主体","slug":"http协议要点","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf250006hgj3dum0yglj","content":"<h4 id=\"TCP-IP协议\"><a href=\"#TCP-IP协议\" class=\"headerlink\" title=\"TCP/IP协议\"></a>TCP/IP协议</h4><ol>\n<li>一说是协议群的统称,互联网协议.</li>\n<li>分层:应用层 传输层 网络层 数据链路层.分层的意义:接口和实现分离有相同的意义,有搞懂改本层实现就好了</li>\n<li>应用层:提供应用服务的通信活动.http ftp DNS服务</li>\n<li>传输层:对应用层提供处于网络连接中的两台计算机之间的数据传输.TCP(transmission control protocol)  UDP(user data protocol)</li>\n<li>网络层:处理网络上流动的数据包.数据包是网络传输的最小单位.规定了通过怎样的路径到达对方计算机,并把数据包传递给对方. ip</li>\n<li>数据链路层:连接网络的硬件部分.操作系统,网卡,光纤.</li>\n<li>IP(internet protocol):区别ip地址.<br>网络层.保证把各种数据包传送到对方哪里,其中依靠ip地址(指明节点被分配到的地址)和mac地址(网卡所属的固定地址).<br>经过多台网络设备中转的时候,通过ARP协议通过通信ip地址可以反查出对应的MAC地址.</li>\n<li>TCP:位于传输层,提供可靠的字节流服务.字节流:将大块数据分割成数据段(segment)为单位的数据包进行管理.可靠传输:通过三次握手能确认是不是传输接受罚金给对方了.</li>\n<li>三次握手: 发送端发送一个带有<strong>SYN</strong>标志的数据包给接收方;接收方收到后,回传一个<strong>SYN/ACK</strong>标志,表示确认信息;发送端再回传一个<strong>ACK</strong>标志,代表握手结束.</li>\n<li>DNS:域名解析服务</li>\n<li>URI和URL:统一资源标识符&amp;统一资源定位符  </li>\n</ol>\n<h4 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h4><ol>\n<li>概念:<ul>\n<li>HyperText Transfer Protocol 超文本传输协议  </li>\n<li>超文本:html css js 图片 音视频 文件  </li>\n<li>s端和c端通信协议,c端发起请求,s端返回响应</li>\n</ul>\n</li>\n<li>特点:<ul>\n<li>支持c/s模式</li>\n<li>简单快速</li>\n<li>灵活</li>\n<li>无连接:每次连接只处理一个请求,收到响应后断开连接,尽快将资源释放.但是之后随着访问次数变多,每次请求都建立,断开tcp连接,效率很低.<br><strong>Keep-Alive</strong>解决了这个问题,保持持续连接.可以后续继续使用,但是也占用着资源.这里注意keepalive时间和意外断开等.</li>\n<li>无状态:没有记忆能力,不处理事务,每个请求相互独立.可能每次请求传输大量重复内容.<br><strong>Cookie</strong>客户端保存了一些信息和状态.关闭浏览器和清除就消失.<strong>session</strong>服务端保存的信息和状态,服务端设置过期时间等.</li>\n<li>管线化:可以同时请求.可以同时发出多个请求,不用等待响应返回.幂等的请求才会被管道化GET HEAD 而POST不会</li>\n</ul>\n</li>\n<li>http消息结构<ul>\n<li>请求消息:请求行 + 请求头字段 + 一个空行 + 消息主体</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h4 id=\"TCP-IP协议\"><a href=\"#TCP-IP协议\" class=\"headerlink\" title=\"TCP/IP协议\"></a>TCP/IP协议</h4><ol>\n<li>一说是协议群的统称,互联网协议.</li>\n<li>分层:应用层 传输层 网络层 数据链路层.分层的意义:接口和实现分离有相同的意义,有搞懂改本层实现就好了</li>\n<li>应用层:提供应用服务的通信活动.http ftp DNS服务</li>\n<li>传输层:对应用层提供处于网络连接中的两台计算机之间的数据传输.TCP(transmission control protocol)  UDP(user data protocol)</li>\n<li>网络层:处理网络上流动的数据包.数据包是网络传输的最小单位.规定了通过怎样的路径到达对方计算机,并把数据包传递给对方. ip</li>\n<li>数据链路层:连接网络的硬件部分.操作系统,网卡,光纤.</li>\n<li>IP(internet protocol):区别ip地址.<br>网络层.保证把各种数据包传送到对方哪里,其中依靠ip地址(指明节点被分配到的地址)和mac地址(网卡所属的固定地址).<br>经过多台网络设备中转的时候,通过ARP协议通过通信ip地址可以反查出对应的MAC地址.</li>\n<li>TCP:位于传输层,提供可靠的字节流服务.字节流:将大块数据分割成数据段(segment)为单位的数据包进行管理.可靠传输:通过三次握手能确认是不是传输接受罚金给对方了.</li>\n<li>三次握手: 发送端发送一个带有<strong>SYN</strong>标志的数据包给接收方;接收方收到后,回传一个<strong>SYN/ACK</strong>标志,表示确认信息;发送端再回传一个<strong>ACK</strong>标志,代表握手结束.</li>\n<li>DNS:域名解析服务</li>\n<li>URI和URL:统一资源标识符&amp;统一资源定位符  </li>\n</ol>\n<h4 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h4><ol>\n<li>概念:<ul>\n<li>HyperText Transfer Protocol 超文本传输协议  </li>\n<li>超文本:html css js 图片 音视频 文件  </li>\n<li>s端和c端通信协议,c端发起请求,s端返回响应</li>\n</ul>\n</li>\n<li>特点:<ul>\n<li>支持c/s模式</li>\n<li>简单快速</li>\n<li>灵活</li>\n<li>无连接:每次连接只处理一个请求,收到响应后断开连接,尽快将资源释放.但是之后随着访问次数变多,每次请求都建立,断开tcp连接,效率很低.<br><strong>Keep-Alive</strong>解决了这个问题,保持持续连接.可以后续继续使用,但是也占用着资源.这里注意keepalive时间和意外断开等.</li>\n<li>无状态:没有记忆能力,不处理事务,每个请求相互独立.可能每次请求传输大量重复内容.<br><strong>Cookie</strong>客户端保存了一些信息和状态.关闭浏览器和清除就消失.<strong>session</strong>服务端保存的信息和状态,服务端设置过期时间等.</li>\n<li>管线化:可以同时请求.可以同时发出多个请求,不用等待响应返回.幂等的请求才会被管道化GET HEAD 而POST不会</li>\n</ul>\n</li>\n<li>http消息结构<ul>\n<li>请求消息:请求行 + 请求头字段 + 一个空行 + 消息主体</li>\n</ul>\n</li>\n</ol>\n"},{"title":"spring boot starter帮我们做了什么","comments":1,"date":"2020-02-06T13:58:26.000Z","updated":"2020-02-06T13:58:26.000Z","_content":"#### Maven tree 分析\n    - spring-boot-starter\n        - jakarta.annotation-api(提供了一系列声明式编程通用的注解)\n        - snakeyaml(yaml文件解析工具)\n        - spring-boot\n            - spring-context(提供一个运行时的环境，用以保存各个对象的状态。)\n                - spring-aop\n                    - spring-beans(Bean 的定义、Bean 的创建以及对 Bean 的解析)\n                    - spring-core(定义了资源的访问方式)\n                - spring-beans\n                    - spring-core\n                - spring-core\n                - spring-expression(Spring Expression Language)\n                    - spring-core\n            - spring-core\n        - spring-boot-autoconfigure(自动配置)\n            - spring-boot\n        - spring-boot-starter-logging(日志模块)\n            - jul-to-slf4j\n            - log4j-to-slf4j\n            - logback-classic\n        - spring-core\n            - spring-jcl(日志)","source":"_posts/spring-boot-starter帮我们做了什么.md","raw":"---\ntitle: spring boot starter帮我们做了什么\ncomments: true\ndate: 2020-02-06 21:58:26\nupdated: 2020-02-06 21:58:26\ntags:\n    - java\n    - spring boot\ncategories: 码文\n---\n#### Maven tree 分析\n    - spring-boot-starter\n        - jakarta.annotation-api(提供了一系列声明式编程通用的注解)\n        - snakeyaml(yaml文件解析工具)\n        - spring-boot\n            - spring-context(提供一个运行时的环境，用以保存各个对象的状态。)\n                - spring-aop\n                    - spring-beans(Bean 的定义、Bean 的创建以及对 Bean 的解析)\n                    - spring-core(定义了资源的访问方式)\n                - spring-beans\n                    - spring-core\n                - spring-core\n                - spring-expression(Spring Expression Language)\n                    - spring-core\n            - spring-core\n        - spring-boot-autoconfigure(自动配置)\n            - spring-boot\n        - spring-boot-starter-logging(日志模块)\n            - jul-to-slf4j\n            - log4j-to-slf4j\n            - logback-classic\n        - spring-core\n            - spring-jcl(日志)","slug":"spring-boot-starter帮我们做了什么","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf260007hgj387uboijr","content":"<h4 id=\"Maven-tree-分析\"><a href=\"#Maven-tree-分析\" class=\"headerlink\" title=\"Maven tree 分析\"></a>Maven tree 分析</h4><pre><code>- spring-boot-starter\n    - jakarta.annotation-api(提供了一系列声明式编程通用的注解)\n    - snakeyaml(yaml文件解析工具)\n    - spring-boot\n        - spring-context(提供一个运行时的环境，用以保存各个对象的状态。)\n            - spring-aop\n                - spring-beans(Bean 的定义、Bean 的创建以及对 Bean 的解析)\n                - spring-core(定义了资源的访问方式)\n            - spring-beans\n                - spring-core\n            - spring-core\n            - spring-expression(Spring Expression Language)\n                - spring-core\n        - spring-core\n    - spring-boot-autoconfigure(自动配置)\n        - spring-boot\n    - spring-boot-starter-logging(日志模块)\n        - jul-to-slf4j\n        - log4j-to-slf4j\n        - logback-classic\n    - spring-core\n        - spring-jcl(日志)\n</code></pre>","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h4 id=\"Maven-tree-分析\"><a href=\"#Maven-tree-分析\" class=\"headerlink\" title=\"Maven tree 分析\"></a>Maven tree 分析</h4><pre><code>- spring-boot-starter\n    - jakarta.annotation-api(提供了一系列声明式编程通用的注解)\n    - snakeyaml(yaml文件解析工具)\n    - spring-boot\n        - spring-context(提供一个运行时的环境，用以保存各个对象的状态。)\n            - spring-aop\n                - spring-beans(Bean 的定义、Bean 的创建以及对 Bean 的解析)\n                - spring-core(定义了资源的访问方式)\n            - spring-beans\n                - spring-core\n            - spring-core\n            - spring-expression(Spring Expression Language)\n                - spring-core\n        - spring-core\n    - spring-boot-autoconfigure(自动配置)\n        - spring-boot\n    - spring-boot-starter-logging(日志模块)\n        - jul-to-slf4j\n        - log4j-to-slf4j\n        - logback-classic\n    - spring-core\n        - spring-jcl(日志)\n</code></pre>"},{"title":"grpc 要点å摘","comments":1,"date":"2019-12-09T15:14:26.000Z","updated":"2019-12-09T15:14:26.000Z","_content":"1. 浅析入门\n    1. RPC框架的目标  \n    语言中立性原则构建微服务，不同服务采用不同的语言和技术，对于后端并发处理要求高的微服务，比较适合采用 Go 语言构建，而对于前端的 Web 界面，\n    则更适合 Java 和 JavaScript。因此，基于多语言的 RPC 框架来构建微服务，是一种比较好的技术选择。\n    例如API 服务编排层和后端的微服务之间采用 gRPC 进行通信\n        - 远程服务调用更加简单、透明\n        - 屏蔽底层的传输方式（TCP 或者 UDP）\n        - 屏蔽序列化方式（XML/Json/ 二进制）\n        - 屏蔽通信细节\n        - 像调用本地接口一样调用远程的服务\n    2. RPC 框架原理\n        1. 服务消费者通过微服务的动态代理，序列化请求消息，通过rpc client端发现请求消息，\n        通过底层网络传输到rpc server端\n        2. server端口拿到请求，反序列化请求消息，通过内部路由接口分发到对应逻辑方法中，\n        处理后结果再通过上面类似的方法进行返回。\n        3. 结构类似于网络分层\n        4. 上面说的目标里，屏蔽的几个方面，都抽象成了对应的层结构\n    3. 主流框架\n        - Google 的 gRPC\n        - Apache（Facebook）的 Thrift\n        - 新浪的 Motan\n        - 阿里的 Dubbo （还支持服务治理的分布式服务框架）\n    4.  gRPC 简介\n        - 高性能\n        - 开源\n        - 通用\n        - 面向服务端和移动端\n        - 基于 HTTP/2 \n        1. gRPC 概览\n            -  目前主要支持C、Java 和 Go\n        2. gRPC 特点\n            - 语言中立，支持多种语言\n            - 基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub\n            - 通信协议基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，\n            这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；\n            - 序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，\n            基于 HTTP/2 + PB, 保障了 RPC 调用的高性能。\n2. gRPC 服务端\n    1.  服务端创建业务代码  \n    定义服务proto（XXXX.proto）\n    ```c\n   service Greeter {\n     rpc SayHello (HelloRequest) returns (HelloReply) {}\n   }\n   message HelloRequest {\n     string name = 1;\n   }\n   message HelloReply {\n     string message = 1;\n   }\n    ```\n   定义服务端Service,并在50051端口开放服务，并把服务的实现加入\n   ```\n   private void start() throws IOException {\n       /* The port on which the server should run */\n       int port = 50051;\n       server = ServerBuilder.forPort(port)\n           .addService(new GreeterImpl())\n           .build()\n           .start();\n   ```\n   服务实现类：\n   ```java\n    static class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n        @Override\n        public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n          HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();\n          responseObserver.onNext(reply);\n          responseObserver.onCompleted();\n        }\n      }\n    ```\n   2. 服务端创建流程\n        1. 创建 Netty HTTP/2 服务端\n        2. 将需要调用的服务端接口实现类注册到内部的 Registry 中，RPC 调用时，可以根据 RPC 请求消息中的服务定义信息查询到服务接口实现类；\n        3. 创建 gRPC Server，它是 gRPC 服务端的抽象，聚合了各种 Listener，用于 RPC 消息的统一调度和处理。\n3. gRPC 服务端\n","source":"_posts/grpc-要点a摘.md","raw":"---\ntitle: grpc 要点å摘\ncomments: true\ndate: 2019-12-09 23:14:26\nupdated: 2019-12-09 23:14:26\ntags:\n    - rpc\n    - grpc\n    - go\ncategories: 码文\n---\n1. 浅析入门\n    1. RPC框架的目标  \n    语言中立性原则构建微服务，不同服务采用不同的语言和技术，对于后端并发处理要求高的微服务，比较适合采用 Go 语言构建，而对于前端的 Web 界面，\n    则更适合 Java 和 JavaScript。因此，基于多语言的 RPC 框架来构建微服务，是一种比较好的技术选择。\n    例如API 服务编排层和后端的微服务之间采用 gRPC 进行通信\n        - 远程服务调用更加简单、透明\n        - 屏蔽底层的传输方式（TCP 或者 UDP）\n        - 屏蔽序列化方式（XML/Json/ 二进制）\n        - 屏蔽通信细节\n        - 像调用本地接口一样调用远程的服务\n    2. RPC 框架原理\n        1. 服务消费者通过微服务的动态代理，序列化请求消息，通过rpc client端发现请求消息，\n        通过底层网络传输到rpc server端\n        2. server端口拿到请求，反序列化请求消息，通过内部路由接口分发到对应逻辑方法中，\n        处理后结果再通过上面类似的方法进行返回。\n        3. 结构类似于网络分层\n        4. 上面说的目标里，屏蔽的几个方面，都抽象成了对应的层结构\n    3. 主流框架\n        - Google 的 gRPC\n        - Apache（Facebook）的 Thrift\n        - 新浪的 Motan\n        - 阿里的 Dubbo （还支持服务治理的分布式服务框架）\n    4.  gRPC 简介\n        - 高性能\n        - 开源\n        - 通用\n        - 面向服务端和移动端\n        - 基于 HTTP/2 \n        1. gRPC 概览\n            -  目前主要支持C、Java 和 Go\n        2. gRPC 特点\n            - 语言中立，支持多种语言\n            - 基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub\n            - 通信协议基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，\n            这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；\n            - 序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，\n            基于 HTTP/2 + PB, 保障了 RPC 调用的高性能。\n2. gRPC 服务端\n    1.  服务端创建业务代码  \n    定义服务proto（XXXX.proto）\n    ```c\n   service Greeter {\n     rpc SayHello (HelloRequest) returns (HelloReply) {}\n   }\n   message HelloRequest {\n     string name = 1;\n   }\n   message HelloReply {\n     string message = 1;\n   }\n    ```\n   定义服务端Service,并在50051端口开放服务，并把服务的实现加入\n   ```\n   private void start() throws IOException {\n       /* The port on which the server should run */\n       int port = 50051;\n       server = ServerBuilder.forPort(port)\n           .addService(new GreeterImpl())\n           .build()\n           .start();\n   ```\n   服务实现类：\n   ```java\n    static class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n        @Override\n        public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n          HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();\n          responseObserver.onNext(reply);\n          responseObserver.onCompleted();\n        }\n      }\n    ```\n   2. 服务端创建流程\n        1. 创建 Netty HTTP/2 服务端\n        2. 将需要调用的服务端接口实现类注册到内部的 Registry 中，RPC 调用时，可以根据 RPC 请求消息中的服务定义信息查询到服务接口实现类；\n        3. 创建 gRPC Server，它是 gRPC 服务端的抽象，聚合了各种 Listener，用于 RPC 消息的统一调度和处理。\n3. gRPC 服务端\n","slug":"grpc-要点a摘","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf270008hgj39zqldvwl","content":"<ol>\n<li>浅析入门<ol>\n<li>RPC框架的目标<br>语言中立性原则构建微服务，不同服务采用不同的语言和技术，对于后端并发处理要求高的微服务，比较适合采用 Go 语言构建，而对于前端的 Web 界面，<br>则更适合 Java 和 JavaScript。因此，基于多语言的 RPC 框架来构建微服务，是一种比较好的技术选择。<br>例如API 服务编排层和后端的微服务之间采用 gRPC 进行通信<ul>\n<li>远程服务调用更加简单、透明</li>\n<li>屏蔽底层的传输方式（TCP 或者 UDP）</li>\n<li>屏蔽序列化方式（XML/Json/ 二进制）</li>\n<li>屏蔽通信细节</li>\n<li>像调用本地接口一样调用远程的服务</li>\n</ul>\n</li>\n<li>RPC 框架原理<ol>\n<li>服务消费者通过微服务的动态代理，序列化请求消息，通过rpc client端发现请求消息，<br>通过底层网络传输到rpc server端</li>\n<li>server端口拿到请求，反序列化请求消息，通过内部路由接口分发到对应逻辑方法中，<br>处理后结果再通过上面类似的方法进行返回。</li>\n<li>结构类似于网络分层</li>\n<li>上面说的目标里，屏蔽的几个方面，都抽象成了对应的层结构</li>\n</ol>\n</li>\n<li>主流框架<ul>\n<li>Google 的 gRPC</li>\n<li>Apache（Facebook）的 Thrift</li>\n<li>新浪的 Motan</li>\n<li>阿里的 Dubbo （还支持服务治理的分布式服务框架）</li>\n</ul>\n</li>\n<li>gRPC 简介<ul>\n<li>高性能</li>\n<li>开源</li>\n<li>通用</li>\n<li>面向服务端和移动端</li>\n<li>基于 HTTP/2 </li>\n</ul>\n<ol>\n<li>gRPC 概览<ul>\n<li>目前主要支持C、Java 和 Go</li>\n</ul>\n</li>\n<li>gRPC 特点<ul>\n<li>语言中立，支持多种语言</li>\n<li>基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub</li>\n<li>通信协议基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，<br>这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；</li>\n<li>序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，<br>基于 HTTP/2 + PB, 保障了 RPC 调用的高性能。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>gRPC 服务端</p>\n<ol>\n<li>服务端创建业务代码<br>定义服务proto（XXXX.proto）<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  <span class=\"function\">rpc <span class=\"title\">SayHello</span> <span class=\"params\">(HelloRequest)</span> <span class=\"title\">returns</span> <span class=\"params\">(HelloReply)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>定义服务端Service,并在50051端口开放服务，并把服务的实现加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void start() throws IOException &#123;</span><br><span class=\"line\">    /* The port on which the server should run */</span><br><span class=\"line\">    int port = 50051;</span><br><span class=\"line\">    server = ServerBuilder.forPort(port)</span><br><span class=\"line\">        .addService(new GreeterImpl())</span><br><span class=\"line\">        .build()</span><br><span class=\"line\">        .start();</span><br></pre></td></tr></table></figure>\n<p>服务实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreeterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">GreeterGrpc</span>.<span class=\"title\">GreeterImplBase</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(HelloRequest req, StreamObserver&lt;HelloReply&gt; responseObserver)</span> </span>&#123;</span><br><span class=\"line\">      HelloReply reply = HelloReply.newBuilder().setMessage(<span class=\"string\">\"Hello \"</span> + req.getName()).build();</span><br><span class=\"line\">      responseObserver.onNext(reply);</span><br><span class=\"line\">      responseObserver.onCompleted();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>服务端创建流程<ol>\n<li>创建 Netty HTTP/2 服务端</li>\n<li>将需要调用的服务端接口实现类注册到内部的 Registry 中，RPC 调用时，可以根据 RPC 请求消息中的服务定义信息查询到服务接口实现类；</li>\n<li>创建 gRPC Server，它是 gRPC 服务端的抽象，聚合了各种 Listener，用于 RPC 消息的统一调度和处理。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>gRPC 服务端</li>\n</ol>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<ol>\n<li>浅析入门<ol>\n<li>RPC框架的目标<br>语言中立性原则构建微服务，不同服务采用不同的语言和技术，对于后端并发处理要求高的微服务，比较适合采用 Go 语言构建，而对于前端的 Web 界面，<br>则更适合 Java 和 JavaScript。因此，基于多语言的 RPC 框架来构建微服务，是一种比较好的技术选择。<br>例如API 服务编排层和后端的微服务之间采用 gRPC 进行通信<ul>\n<li>远程服务调用更加简单、透明</li>\n<li>屏蔽底层的传输方式（TCP 或者 UDP）</li>\n<li>屏蔽序列化方式（XML/Json/ 二进制）</li>\n<li>屏蔽通信细节</li>\n<li>像调用本地接口一样调用远程的服务</li>\n</ul>\n</li>\n<li>RPC 框架原理<ol>\n<li>服务消费者通过微服务的动态代理，序列化请求消息，通过rpc client端发现请求消息，<br>通过底层网络传输到rpc server端</li>\n<li>server端口拿到请求，反序列化请求消息，通过内部路由接口分发到对应逻辑方法中，<br>处理后结果再通过上面类似的方法进行返回。</li>\n<li>结构类似于网络分层</li>\n<li>上面说的目标里，屏蔽的几个方面，都抽象成了对应的层结构</li>\n</ol>\n</li>\n<li>主流框架<ul>\n<li>Google 的 gRPC</li>\n<li>Apache（Facebook）的 Thrift</li>\n<li>新浪的 Motan</li>\n<li>阿里的 Dubbo （还支持服务治理的分布式服务框架）</li>\n</ul>\n</li>\n<li>gRPC 简介<ul>\n<li>高性能</li>\n<li>开源</li>\n<li>通用</li>\n<li>面向服务端和移动端</li>\n<li>基于 HTTP/2 </li>\n</ul>\n<ol>\n<li>gRPC 概览<ul>\n<li>目前主要支持C、Java 和 Go</li>\n</ul>\n</li>\n<li>gRPC 特点<ul>\n<li>语言中立，支持多种语言</li>\n<li>基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub</li>\n<li>通信协议基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，<br>这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；</li>\n<li>序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，<br>基于 HTTP/2 + PB, 保障了 RPC 调用的高性能。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>gRPC 服务端</p>\n<ol>\n<li>服务端创建业务代码<br>定义服务proto（XXXX.proto）<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  <span class=\"function\">rpc <span class=\"title\">SayHello</span> <span class=\"params\">(HelloRequest)</span> <span class=\"title\">returns</span> <span class=\"params\">(HelloReply)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>定义服务端Service,并在50051端口开放服务，并把服务的实现加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void start() throws IOException &#123;</span><br><span class=\"line\">    /* The port on which the server should run */</span><br><span class=\"line\">    int port = 50051;</span><br><span class=\"line\">    server = ServerBuilder.forPort(port)</span><br><span class=\"line\">        .addService(new GreeterImpl())</span><br><span class=\"line\">        .build()</span><br><span class=\"line\">        .start();</span><br></pre></td></tr></table></figure>\n<p>服务实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreeterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">GreeterGrpc</span>.<span class=\"title\">GreeterImplBase</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(HelloRequest req, StreamObserver&lt;HelloReply&gt; responseObserver)</span> </span>&#123;</span><br><span class=\"line\">      HelloReply reply = HelloReply.newBuilder().setMessage(<span class=\"string\">\"Hello \"</span> + req.getName()).build();</span><br><span class=\"line\">      responseObserver.onNext(reply);</span><br><span class=\"line\">      responseObserver.onCompleted();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>服务端创建流程<ol>\n<li>创建 Netty HTTP/2 服务端</li>\n<li>将需要调用的服务端接口实现类注册到内部的 Registry 中，RPC 调用时，可以根据 RPC 请求消息中的服务定义信息查询到服务接口实现类；</li>\n<li>创建 gRPC Server，它是 gRPC 服务端的抽象，聚合了各种 Listener，用于 RPC 消息的统一调度和处理。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>gRPC 服务端</li>\n</ol>\n"},{"title":"spring boot搭建问题全记录","comments":1,"date":"2019-12-07T08:11:30.000Z","updated":"2019-12-07T08:11:30.000Z","_content":"1. actuator/beans 访问返回 `Whitelabel Error Page This application has no explicit mapping for /error, so you are seeing this as a fallback.`错误\n    你可以试试直接访问 http://localhost:8080/actuator/,返回\n    `{\"_links\":{\"self\":{\"href\":\"http://localhost:8080/actuator\",\"templated\":false},\"health\":{\"href\":\"http://localhost:8080/actuator/health\",\"templated\":false},\"health-path\":{\"href\":\"http://localhost:8080/actuator/health/{*path}\",\"templated\":true},\"info\":{\"href\":\"http://localhost:8080/actuator/info\",\"templated\":false}}}`\n    可以看见默认开放的只有`health``info` 和 `health-path`（看某个接口的health状态）。\n    在application.properties文件里配置`management.endpoints.web.exposure.include=*` 可以根据自己需要打开某些接口。\n    配置后可以发发现可以看项目中的很多信息，包括初始化的bean,caches-cache,caches,conditions,configprops,env,loggers,mappings等等\n2. \n3. ","source":"_posts/spring-boot搭建问题全记录.md","raw":"---\ntitle: spring boot搭建问题全记录\ncomments: true\ndate: 2019-12-07 16:11:30\nupdated: 2019-12-07 16:11:30\ntags:\n    - java\n    - spring boot\n    - 记录\ncategories: 码文\n---\n1. actuator/beans 访问返回 `Whitelabel Error Page This application has no explicit mapping for /error, so you are seeing this as a fallback.`错误\n    你可以试试直接访问 http://localhost:8080/actuator/,返回\n    `{\"_links\":{\"self\":{\"href\":\"http://localhost:8080/actuator\",\"templated\":false},\"health\":{\"href\":\"http://localhost:8080/actuator/health\",\"templated\":false},\"health-path\":{\"href\":\"http://localhost:8080/actuator/health/{*path}\",\"templated\":true},\"info\":{\"href\":\"http://localhost:8080/actuator/info\",\"templated\":false}}}`\n    可以看见默认开放的只有`health``info` 和 `health-path`（看某个接口的health状态）。\n    在application.properties文件里配置`management.endpoints.web.exposure.include=*` 可以根据自己需要打开某些接口。\n    配置后可以发发现可以看项目中的很多信息，包括初始化的bean,caches-cache,caches,conditions,configprops,env,loggers,mappings等等\n2. \n3. ","slug":"spring-boot搭建问题全记录","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2a000bhgj39cstsm3v","content":"<ol>\n<li>actuator/beans 访问返回 <code>Whitelabel Error Page This application has no explicit mapping for /error, so you are seeing this as a fallback.</code>错误<br> 你可以试试直接访问 <a href=\"http://localhost:8080/actuator/,返回\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/actuator/,返回</a><br> <code>{&quot;_links&quot;:{&quot;self&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator&quot;,&quot;templated&quot;:false},&quot;health&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator/health&quot;,&quot;templated&quot;:false},&quot;health-path&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator/health/{*path}&quot;,&quot;templated&quot;:true},&quot;info&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator/info&quot;,&quot;templated&quot;:false}}}</code><br> 可以看见默认开放的只有<code>health`</code>info<code>和</code>health-path<code>（看某个接口的health状态）。\n 在application.properties文件里配置</code>management.endpoints.web.exposure.include=*` 可以根据自己需要打开某些接口。<br> 配置后可以发发现可以看项目中的很多信息，包括初始化的bean,caches-cache,caches,conditions,configprops,env,loggers,mappings等等</li>\n<li></li>\n<li></li>\n</ol>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<ol>\n<li>actuator/beans 访问返回 <code>Whitelabel Error Page This application has no explicit mapping for /error, so you are seeing this as a fallback.</code>错误<br> 你可以试试直接访问 <a href=\"http://localhost:8080/actuator/,返回\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/actuator/,返回</a><br> <code>{&quot;_links&quot;:{&quot;self&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator&quot;,&quot;templated&quot;:false},&quot;health&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator/health&quot;,&quot;templated&quot;:false},&quot;health-path&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator/health/{*path}&quot;,&quot;templated&quot;:true},&quot;info&quot;:{&quot;href&quot;:&quot;http://localhost:8080/actuator/info&quot;,&quot;templated&quot;:false}}}</code><br> 可以看见默认开放的只有<code>health`</code>info<code>和</code>health-path<code>（看某个接口的health状态）。\n 在application.properties文件里配置</code>management.endpoints.web.exposure.include=*` 可以根据自己需要打开某些接口。<br> 配置后可以发发现可以看项目中的很多信息，包括初始化的bean,caches-cache,caches,conditions,configprops,env,loggers,mappings等等</li>\n<li></li>\n<li></li>\n</ol>\n"},{"title":"当一只活的springboot报错Cannot load driver class: com.mysql.jdbc.Driver时","comments":1,"date":"2018-12-21T07:27:51.000Z","updated":"2018-12-21T07:27:51.000Z","_content":"\n> 文明人遇到了莫名其妙的错误时，不能骂娘，要和蔼可亲的问候各种组件的祖宗。\n> ——《华哗哗的代码修炼之道》\n\n  其实之前接触过一些springboot的东西了，只是这些打算自己搭一次，当一个以后的种子项目。\n  结果第一步就踏进了坑里，里面都是钉鸡，鸡儿冲上=。=\n\n  怎么开始我就不赘述了，网上有挺多挺好的引导。总之要是你启动时，报错如下：\n\n  ```\n  org.springframework.beans.factory.UnsatisfiedDependencyException:\n  Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration':\n  Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException:\n  Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]:\n  Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException:\n  Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalStateException:\n  Cannot load driver class: com.mysql.jdbc.Driver\n  ```\n\n  首先，如果`pom.xml` 文件不引用`spring-boot-starter-jdbc`的话，\n  只有`spring-boot-starter-web`是不会报错的，因为不涉及数据链接。\n  ```\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jdbc</artifactId>\n  </dependency>\n  ```\n  但是加上后，springboot默认你是需要数据链接的，在`src/main/resources/application.properties`\n  中就需要添加\n  ```\n  spring.datasource.url=jdbc:mysql://localhost:3306/test\n  spring.datasource.username=dbuser\n  spring.datasource.password=dbpass\n  spring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n  ```\n\n  添加了还是报错的话，你就继续看下去吧。\n\n  爆栈上最多的vote回答都是：\n  > Looks like the initial problem is with the auto-config.\n  If you don't need the datasource, simply remove it from the\n  auto-config process:\n  `@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})`\n\n  如果到此你在启动类上加了这个注解，你就满意的话，出门右拐不送。\n\n  但是我，真的是要用DB的啊～\n\n  来，按部就班的把这只活的springBoot，放在案板上，裹上面包糠，炸至金黄～算了，看排查不走吧，这个货一看就不好吃\n\n  1. `pom.xml` 文件引用了正确了没？\n  - 需要一个带有jdbc驱动的依赖引入，比如`mysql-connector-java`\n  ```\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.1.46</version>\n    </dependency>\n  ```\n\n  2. `application.properties`文件的空格问题\n  - 看看你各个配置有没有多余的空格\n  - 尤其`spring.datasource.driver-class-name=com.mysql.jdbc.Driver`后面有没有\n\n  3. 你要知道你的项目是基于maven构建的，maven这个东西你懂得，是不是也会抽风。\n  - 看看你的`.m2`文件夹里面有没有mysql的相关包\n  - 没有就clean 然后reimport\n  - 保证路径下真的能找到\n\n##### 我就是3.的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\n##### 等待AI代替程序员编码的日子到来，我就能归园田居去种地了。","source":"_posts/干炒springboot心得.md","raw":"---\ntitle: '当一只活的springboot报错Cannot load driver class: com.mysql.jdbc.Driver时'\ncomments: true\ndate: 2018-12-21 15:27:51\nupdated: 2018-12-21 15:27:51\ntags:\n    -springboot\n    -java\ncategories: 干炒springboot心得\n---\n\n> 文明人遇到了莫名其妙的错误时，不能骂娘，要和蔼可亲的问候各种组件的祖宗。\n> ——《华哗哗的代码修炼之道》\n\n  其实之前接触过一些springboot的东西了，只是这些打算自己搭一次，当一个以后的种子项目。\n  结果第一步就踏进了坑里，里面都是钉鸡，鸡儿冲上=。=\n\n  怎么开始我就不赘述了，网上有挺多挺好的引导。总之要是你启动时，报错如下：\n\n  ```\n  org.springframework.beans.factory.UnsatisfiedDependencyException:\n  Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration':\n  Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException:\n  Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]:\n  Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException:\n  Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalStateException:\n  Cannot load driver class: com.mysql.jdbc.Driver\n  ```\n\n  首先，如果`pom.xml` 文件不引用`spring-boot-starter-jdbc`的话，\n  只有`spring-boot-starter-web`是不会报错的，因为不涉及数据链接。\n  ```\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jdbc</artifactId>\n  </dependency>\n  ```\n  但是加上后，springboot默认你是需要数据链接的，在`src/main/resources/application.properties`\n  中就需要添加\n  ```\n  spring.datasource.url=jdbc:mysql://localhost:3306/test\n  spring.datasource.username=dbuser\n  spring.datasource.password=dbpass\n  spring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n  ```\n\n  添加了还是报错的话，你就继续看下去吧。\n\n  爆栈上最多的vote回答都是：\n  > Looks like the initial problem is with the auto-config.\n  If you don't need the datasource, simply remove it from the\n  auto-config process:\n  `@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})`\n\n  如果到此你在启动类上加了这个注解，你就满意的话，出门右拐不送。\n\n  但是我，真的是要用DB的啊～\n\n  来，按部就班的把这只活的springBoot，放在案板上，裹上面包糠，炸至金黄～算了，看排查不走吧，这个货一看就不好吃\n\n  1. `pom.xml` 文件引用了正确了没？\n  - 需要一个带有jdbc驱动的依赖引入，比如`mysql-connector-java`\n  ```\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.1.46</version>\n    </dependency>\n  ```\n\n  2. `application.properties`文件的空格问题\n  - 看看你各个配置有没有多余的空格\n  - 尤其`spring.datasource.driver-class-name=com.mysql.jdbc.Driver`后面有没有\n\n  3. 你要知道你的项目是基于maven构建的，maven这个东西你懂得，是不是也会抽风。\n  - 看看你的`.m2`文件夹里面有没有mysql的相关包\n  - 没有就clean 然后reimport\n  - 保证路径下真的能找到\n\n##### 我就是3.的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\n##### 等待AI代替程序员编码的日子到来，我就能归园田居去种地了。","slug":"干炒springboot心得","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2b000chgj37i2fnm9m","content":"<blockquote>\n<p>文明人遇到了莫名其妙的错误时，不能骂娘，要和蔼可亲的问候各种组件的祖宗。<br>——《华哗哗的代码修炼之道》</p>\n</blockquote>\n<p>  其实之前接触过一些springboot的东西了，只是这些打算自己搭一次，当一个以后的种子项目。<br>  结果第一步就踏进了坑里，里面都是钉鸡，鸡儿冲上=。=</p>\n<p>  怎么开始我就不赘述了，网上有挺多挺好的引导。总之要是你启动时，报错如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.beans.factory.UnsatisfiedDependencyException:</span><br><span class=\"line\">Error creating bean with name &apos;org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration&apos;:</span><br><span class=\"line\">Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException:</span><br><span class=\"line\">Error creating bean with name &apos;dataSource&apos; defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]:</span><br><span class=\"line\">Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException:</span><br><span class=\"line\">Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method &apos;dataSource&apos; threw exception; nested exception is java.lang.IllegalStateException:</span><br><span class=\"line\">Cannot load driver class: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n<p>  首先，如果<code>pom.xml</code> 文件不引用<code>spring-boot-starter-jdbc</code>的话，<br>  只有<code>spring-boot-starter-web</code>是不会报错的，因为不涉及数据链接。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  但是加上后，springboot默认你是需要数据链接的，在<code>src/main/resources/application.properties</code><br>  中就需要添加<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.datasource.username=dbuser</span><br><span class=\"line\">spring.datasource.password=dbpass</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p>\n<p>  添加了还是报错的话，你就继续看下去吧。</p>\n<p>  爆栈上最多的vote回答都是：</p>\n<blockquote>\n<p>Looks like the initial problem is with the auto-config.<br>  If you don’t need the datasource, simply remove it from the<br>  auto-config process:<br>  <code>@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})</code></p>\n</blockquote>\n<p>  如果到此你在启动类上加了这个注解，你就满意的话，出门右拐不送。</p>\n<p>  但是我，真的是要用DB的啊～</p>\n<p>  来，按部就班的把这只活的springBoot，放在案板上，裹上面包糠，炸至金黄～算了，看排查不走吧，这个货一看就不好吃</p>\n<ol>\n<li><code>pom.xml</code> 文件引用了正确了没？</li>\n</ol>\n<ul>\n<li>需要一个带有jdbc驱动的依赖引入，比如<code>mysql-connector-java</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li><code>application.properties</code>文件的空格问题</li>\n</ol>\n<ul>\n<li>看看你各个配置有没有多余的空格</li>\n<li>尤其<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>后面有没有</li>\n</ul>\n<ol start=\"3\">\n<li>你要知道你的项目是基于maven构建的，maven这个东西你懂得，是不是也会抽风。</li>\n</ol>\n<ul>\n<li>看看你的<code>.m2</code>文件夹里面有没有mysql的相关包</li>\n<li>没有就clean 然后reimport</li>\n<li>保证路径下真的能找到</li>\n</ul>\n<h5 id=\"我就是3-的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\"><a href=\"#我就是3-的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\" class=\"headerlink\" title=\"我就是3.的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\"></a>我就是3.的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁</h5><h5 id=\"等待AI代替程序员编码的日子到来，我就能归园田居去种地了。\"><a href=\"#等待AI代替程序员编码的日子到来，我就能归园田居去种地了。\" class=\"headerlink\" title=\"等待AI代替程序员编码的日子到来，我就能归园田居去种地了。\"></a>等待AI代替程序员编码的日子到来，我就能归园田居去种地了。</h5>","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>文明人遇到了莫名其妙的错误时，不能骂娘，要和蔼可亲的问候各种组件的祖宗。<br>——《华哗哗的代码修炼之道》</p>\n</blockquote>\n<p>  其实之前接触过一些springboot的东西了，只是这些打算自己搭一次，当一个以后的种子项目。<br>  结果第一步就踏进了坑里，里面都是钉鸡，鸡儿冲上=。=</p>\n<p>  怎么开始我就不赘述了，网上有挺多挺好的引导。总之要是你启动时，报错如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.beans.factory.UnsatisfiedDependencyException:</span><br><span class=\"line\">Error creating bean with name &apos;org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration&apos;:</span><br><span class=\"line\">Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException:</span><br><span class=\"line\">Error creating bean with name &apos;dataSource&apos; defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]:</span><br><span class=\"line\">Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException:</span><br><span class=\"line\">Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method &apos;dataSource&apos; threw exception; nested exception is java.lang.IllegalStateException:</span><br><span class=\"line\">Cannot load driver class: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n<p>  首先，如果<code>pom.xml</code> 文件不引用<code>spring-boot-starter-jdbc</code>的话，<br>  只有<code>spring-boot-starter-web</code>是不会报错的，因为不涉及数据链接。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  但是加上后，springboot默认你是需要数据链接的，在<code>src/main/resources/application.properties</code><br>  中就需要添加<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.datasource.username=dbuser</span><br><span class=\"line\">spring.datasource.password=dbpass</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p>\n<p>  添加了还是报错的话，你就继续看下去吧。</p>\n<p>  爆栈上最多的vote回答都是：</p>\n<blockquote>\n<p>Looks like the initial problem is with the auto-config.<br>  If you don’t need the datasource, simply remove it from the<br>  auto-config process:<br>  <code>@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})</code></p>\n</blockquote>\n<p>  如果到此你在启动类上加了这个注解，你就满意的话，出门右拐不送。</p>\n<p>  但是我，真的是要用DB的啊～</p>\n<p>  来，按部就班的把这只活的springBoot，放在案板上，裹上面包糠，炸至金黄～算了，看排查不走吧，这个货一看就不好吃</p>\n<ol>\n<li><code>pom.xml</code> 文件引用了正确了没？</li>\n</ol>\n<ul>\n<li>需要一个带有jdbc驱动的依赖引入，比如<code>mysql-connector-java</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li><code>application.properties</code>文件的空格问题</li>\n</ol>\n<ul>\n<li>看看你各个配置有没有多余的空格</li>\n<li>尤其<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>后面有没有</li>\n</ul>\n<ol start=\"3\">\n<li>你要知道你的项目是基于maven构建的，maven这个东西你懂得，是不是也会抽风。</li>\n</ol>\n<ul>\n<li>看看你的<code>.m2</code>文件夹里面有没有mysql的相关包</li>\n<li>没有就clean 然后reimport</li>\n<li>保证路径下真的能找到</li>\n</ul>\n<h5 id=\"我就是3-的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\"><a href=\"#我就是3-的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\" class=\"headerlink\" title=\"我就是3.的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁\"></a>我就是3.的问题，别忽略了你整个的环境，这才是最要命的，让我们山呼万岁</h5><h5 id=\"等待AI代替程序员编码的日子到来，我就能归园田居去种地了。\"><a href=\"#等待AI代替程序员编码的日子到来，我就能归园田居去种地了。\" class=\"headerlink\" title=\"等待AI代替程序员编码的日子到来，我就能归园田居去种地了。\"></a>等待AI代替程序员编码的日子到来，我就能归园田居去种地了。</h5>"},{"title":"spring 中的事务","comments":1,"date":"2019-12-08T02:46:58.000Z","updated":"2019-12-08T02:46:58.000Z","_content":"### spring中的事务抽象\n在spring中抽象帮助不同的数据框架ORM都能用相同的方式去做操作。  \n1. 一致的事务模型\n    -  操作数据的方式：JDBC Hibernate myBatis\n    - DataSource JTA\n2. 事务抽象类里的核心接口\n    - PlatformTransactionManager\n        - DataSourceTransactionManager\n        - HibernateTransactionManager\n        - JtaTransactionManager\n    - TransactionDefinitions(事务定义)\n        - Propagation(传播特性)\n        - Isolation(隔离性)\n        - Timeout(超时时间)\n        - Read-only status(只读状态)  \n        在PlatformTransactionManager中定义了commit rollback 方法实现统一事务提交，回滚操作。\n        通过getTransaction方法从TransactionDefinitions获取两个接口的参数TransactionStatus。\n    1. 事务的传播特性  \n    \n     传播性|值|含\n     -|-|-\n     PROPAFGATION_REQUIRED|0|默认，有事务就用当前事务，没有就创建\n     PROPAFGATION_SUPPORTS|1|事务可有可无，不是必须的\n     PROPAFGATION_MANDARTORY|2|当前必须要有事务，没有就报错\n     PROPAFGATION_REQUIRES_NEW|3|无论是否有事务，都起新事务,之前的挂起.事务之间没有关联。事务之前结果不相互影响\n     PROPAFGATION_NOT_SUPPORTED|4|不支持事务，按照非事务方式运行\n     PROPAFGATION_NEVER|5|不支持事务，有事务就抛异常\n     PROPAFGATION_NESTED|6|内嵌事务，如果有事务，在当前事务中再起一个事务。\n     内嵌事务的结果（是否回滚），影响外部事务的执行。外部回滚，内部也回滚。内部抛异常，回滚了，外部不受影响。 \n        \n    2. 事务的隔离性  \n    \n    默认-1 需要配置\n\n    隔离性|值|脏读|不可重复读|幻读\n    -|-|-|-|-\n    ISOLATION_READ_UNCOMMITTED|1|√|√|√\n    ISOLATION_READ_UNCOMMITTED|2|×|√|√\n    ISOLATION_READ_UNCOMMITTED|3|×|×|√\n    ISOLATION_READ_UNCOMMITTED|4|×|×|×\n    \n3. 编程式事务\n    1. Transaction Template(基本简单方式)\n        - TransactionCallback\n        - TransactionCallbackWithoutResult \n    2. PlatformTransactionManager\n        - 可以传入TransactionDefinittion进行定义\n        \n4. 声明式事务  \n    1. 利用aop-proxy在目标方法上操作。  \n        1. caller调用proxy代理，而不是直接调用目标方法\n        1. 代理掉用Transaction Advisor，此时创建事务\n        1. 代理掉用Transaction Advisor调用Custom Advisor\n        1. 运行用户interceptors的before操作\n        1. 调用目标方法，执行业务逻辑\n        1. 执行后，返回结果，也可能没有结果返回void\n        1. Custom Advisor运行用户interceptors的after操作，返回给Transaction Advisor\n        1. Transaction Advisor事务操作成功commit，失败rollback\n        1. 返回给proxy代理\n        1. 返回给调用者 caller\n    2. 配置方式\n        1. 开启方式 注解 `@EnabelTransactionManagement` xml `<tx:annotation-driver>`\n        1. 配置\n            - proxyTargetClass true false 基于接口还是基于类\n            - mode  Aop 默认java 可以改Spj\n            - order 事务Aop拦截顺序，默认最低\n        1. 方法或类上加`@Transactional`\n            - transactionManager\n            - propagation\n            - isolation\n            - timeOut\n            - readOnly\n            - 判断回滚策略（可配置某些异常类型回滚）\n        1. 一个没有配置`@Transactional`的方法，内部调用一个配置了`@Transactional`的方法\n        不会有事务的支持（外方法没有调用代理去做操作）。默认情 况下，spring aop同级调用失效，\n        因为同级无法创建代理对象，而事务是通过aop代理类实现的。\n        最简单是，把自己的实例注入进来，内部直接调用改成，用自己的实例\n        调用，因为自己的实例spring帮你创建了一个代理类，我们直接调用就行。也可以通过\n        AopContext.currentProxy()获取当前类的代理对象，再调用子方法，其实是增强后的的方法\n### 总结\n    ##### spring声明式事务本质上是通过AOP来增强类的功能\n        - before after\n        - AOP创建动态代理\n    ##### REQUEST——NEW\n    ","source":"_posts/spring-中的事务.md","raw":"---\ntitle: spring 中的事务\ncomments: true\ndate: 2019-12-08 10:46:58\nupdated: 2019-12-08 10:46:58\ntags:\n    - spring\n    - 数据库\n    - 事务\ncategories:\n---\n### spring中的事务抽象\n在spring中抽象帮助不同的数据框架ORM都能用相同的方式去做操作。  \n1. 一致的事务模型\n    -  操作数据的方式：JDBC Hibernate myBatis\n    - DataSource JTA\n2. 事务抽象类里的核心接口\n    - PlatformTransactionManager\n        - DataSourceTransactionManager\n        - HibernateTransactionManager\n        - JtaTransactionManager\n    - TransactionDefinitions(事务定义)\n        - Propagation(传播特性)\n        - Isolation(隔离性)\n        - Timeout(超时时间)\n        - Read-only status(只读状态)  \n        在PlatformTransactionManager中定义了commit rollback 方法实现统一事务提交，回滚操作。\n        通过getTransaction方法从TransactionDefinitions获取两个接口的参数TransactionStatus。\n    1. 事务的传播特性  \n    \n     传播性|值|含\n     -|-|-\n     PROPAFGATION_REQUIRED|0|默认，有事务就用当前事务，没有就创建\n     PROPAFGATION_SUPPORTS|1|事务可有可无，不是必须的\n     PROPAFGATION_MANDARTORY|2|当前必须要有事务，没有就报错\n     PROPAFGATION_REQUIRES_NEW|3|无论是否有事务，都起新事务,之前的挂起.事务之间没有关联。事务之前结果不相互影响\n     PROPAFGATION_NOT_SUPPORTED|4|不支持事务，按照非事务方式运行\n     PROPAFGATION_NEVER|5|不支持事务，有事务就抛异常\n     PROPAFGATION_NESTED|6|内嵌事务，如果有事务，在当前事务中再起一个事务。\n     内嵌事务的结果（是否回滚），影响外部事务的执行。外部回滚，内部也回滚。内部抛异常，回滚了，外部不受影响。 \n        \n    2. 事务的隔离性  \n    \n    默认-1 需要配置\n\n    隔离性|值|脏读|不可重复读|幻读\n    -|-|-|-|-\n    ISOLATION_READ_UNCOMMITTED|1|√|√|√\n    ISOLATION_READ_UNCOMMITTED|2|×|√|√\n    ISOLATION_READ_UNCOMMITTED|3|×|×|√\n    ISOLATION_READ_UNCOMMITTED|4|×|×|×\n    \n3. 编程式事务\n    1. Transaction Template(基本简单方式)\n        - TransactionCallback\n        - TransactionCallbackWithoutResult \n    2. PlatformTransactionManager\n        - 可以传入TransactionDefinittion进行定义\n        \n4. 声明式事务  \n    1. 利用aop-proxy在目标方法上操作。  \n        1. caller调用proxy代理，而不是直接调用目标方法\n        1. 代理掉用Transaction Advisor，此时创建事务\n        1. 代理掉用Transaction Advisor调用Custom Advisor\n        1. 运行用户interceptors的before操作\n        1. 调用目标方法，执行业务逻辑\n        1. 执行后，返回结果，也可能没有结果返回void\n        1. Custom Advisor运行用户interceptors的after操作，返回给Transaction Advisor\n        1. Transaction Advisor事务操作成功commit，失败rollback\n        1. 返回给proxy代理\n        1. 返回给调用者 caller\n    2. 配置方式\n        1. 开启方式 注解 `@EnabelTransactionManagement` xml `<tx:annotation-driver>`\n        1. 配置\n            - proxyTargetClass true false 基于接口还是基于类\n            - mode  Aop 默认java 可以改Spj\n            - order 事务Aop拦截顺序，默认最低\n        1. 方法或类上加`@Transactional`\n            - transactionManager\n            - propagation\n            - isolation\n            - timeOut\n            - readOnly\n            - 判断回滚策略（可配置某些异常类型回滚）\n        1. 一个没有配置`@Transactional`的方法，内部调用一个配置了`@Transactional`的方法\n        不会有事务的支持（外方法没有调用代理去做操作）。默认情 况下，spring aop同级调用失效，\n        因为同级无法创建代理对象，而事务是通过aop代理类实现的。\n        最简单是，把自己的实例注入进来，内部直接调用改成，用自己的实例\n        调用，因为自己的实例spring帮你创建了一个代理类，我们直接调用就行。也可以通过\n        AopContext.currentProxy()获取当前类的代理对象，再调用子方法，其实是增强后的的方法\n### 总结\n    ##### spring声明式事务本质上是通过AOP来增强类的功能\n        - before after\n        - AOP创建动态代理\n    ##### REQUEST——NEW\n    ","slug":"spring-中的事务","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2d000ghgj3eydvydj2","content":"<h3 id=\"spring中的事务抽象\"><a href=\"#spring中的事务抽象\" class=\"headerlink\" title=\"spring中的事务抽象\"></a>spring中的事务抽象</h3><p>在spring中抽象帮助不同的数据框架ORM都能用相同的方式去做操作。  </p>\n<ol>\n<li>一致的事务模型<ul>\n<li>操作数据的方式：JDBC Hibernate myBatis</li>\n<li>DataSource JTA</li>\n</ul>\n</li>\n<li><p>事务抽象类里的核心接口</p>\n<ul>\n<li>PlatformTransactionManager<ul>\n<li>DataSourceTransactionManager</li>\n<li>HibernateTransactionManager</li>\n<li>JtaTransactionManager</li>\n</ul>\n</li>\n<li>TransactionDefinitions(事务定义)<ul>\n<li>Propagation(传播特性)</li>\n<li>Isolation(隔离性)</li>\n<li>Timeout(超时时间)</li>\n<li>Read-only status(只读状态)<br>在PlatformTransactionManager中定义了commit rollback 方法实现统一事务提交，回滚操作。<br>通过getTransaction方法从TransactionDefinitions获取两个接口的参数TransactionStatus。</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>事务的传播特性  </p>\n<p>传播性|值|含<br>-|-|-<br>PROPAFGATION_REQUIRED|0|默认，有事务就用当前事务，没有就创建<br>PROPAFGATION_SUPPORTS|1|事务可有可无，不是必须的<br>PROPAFGATION_MANDARTORY|2|当前必须要有事务，没有就报错<br>PROPAFGATION_REQUIRES_NEW|3|无论是否有事务，都起新事务,之前的挂起.事务之间没有关联。事务之前结果不相互影响<br>PROPAFGATION_NOT_SUPPORTED|4|不支持事务，按照非事务方式运行<br>PROPAFGATION_NEVER|5|不支持事务，有事务就抛异常<br>PROPAFGATION_NESTED|6|内嵌事务，如果有事务，在当前事务中再起一个事务。<br>内嵌事务的结果（是否回滚），影响外部事务的执行。外部回滚，内部也回滚。内部抛异常，回滚了，外部不受影响。 </p>\n</li>\n<li><p>事务的隔离性  </p>\n<p>默认-1 需要配置</p>\n<p>隔离性|值|脏读|不可重复读|幻读<br>-|-|-|-|-<br>ISOLATION_READ_UNCOMMITTED|1|√|√|√<br>ISOLATION_READ_UNCOMMITTED|2|×|√|√<br>ISOLATION_READ_UNCOMMITTED|3|×|×|√<br>ISOLATION_READ_UNCOMMITTED|4|×|×|×</p>\n</li>\n</ol>\n</li>\n<li><p>编程式事务</p>\n<ol>\n<li>Transaction Template(基本简单方式)<ul>\n<li>TransactionCallback</li>\n<li>TransactionCallbackWithoutResult </li>\n</ul>\n</li>\n<li>PlatformTransactionManager<ul>\n<li>可以传入TransactionDefinittion进行定义</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>声明式事务  </p>\n<ol>\n<li>利用aop-proxy在目标方法上操作。  <ol>\n<li>caller调用proxy代理，而不是直接调用目标方法</li>\n<li>代理掉用Transaction Advisor，此时创建事务</li>\n<li>代理掉用Transaction Advisor调用Custom Advisor</li>\n<li>运行用户interceptors的before操作</li>\n<li>调用目标方法，执行业务逻辑</li>\n<li>执行后，返回结果，也可能没有结果返回void</li>\n<li>Custom Advisor运行用户interceptors的after操作，返回给Transaction Advisor</li>\n<li>Transaction Advisor事务操作成功commit，失败rollback</li>\n<li>返回给proxy代理</li>\n<li>返回给调用者 caller</li>\n</ol>\n</li>\n<li>配置方式<ol>\n<li>开启方式 注解 <code>@EnabelTransactionManagement</code> xml <code>&lt;tx:annotation-driver&gt;</code></li>\n<li>配置<ul>\n<li>proxyTargetClass true false 基于接口还是基于类</li>\n<li>mode  Aop 默认java 可以改Spj</li>\n<li>order 事务Aop拦截顺序，默认最低</li>\n</ul>\n</li>\n<li>方法或类上加<code>@Transactional</code><ul>\n<li>transactionManager</li>\n<li>propagation</li>\n<li>isolation</li>\n<li>timeOut</li>\n<li>readOnly</li>\n<li>判断回滚策略（可配置某些异常类型回滚）</li>\n</ul>\n</li>\n<li>一个没有配置<code>@Transactional</code>的方法，内部调用一个配置了<code>@Transactional</code>的方法<br>不会有事务的支持（外方法没有调用代理去做操作）。默认情 况下，spring aop同级调用失效，<br>因为同级无法创建代理对象，而事务是通过aop代理类实现的。<br>最简单是，把自己的实例注入进来，内部直接调用改成，用自己的实例<br>调用，因为自己的实例spring帮你创建了一个代理类，我们直接调用就行。也可以通过<br>AopContext.currentProxy()获取当前类的代理对象，再调用子方法，其实是增强后的的方法<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h5 id=\"spring声明式事务本质上是通过AOP来增强类的功能\"><a href=\"#spring声明式事务本质上是通过AOP来增强类的功能\" class=\"headerlink\" title=\"spring声明式事务本质上是通过AOP来增强类的功能\"></a>spring声明式事务本质上是通过AOP来增强类的功能</h5></li>\n</ol>\n<ul>\n<li>before after</li>\n<li>AOP创建动态代理<h5 id=\"REQUEST——NEW\"><a href=\"#REQUEST——NEW\" class=\"headerlink\" title=\"REQUEST——NEW\"></a>REQUEST——NEW</h5></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h3 id=\"spring中的事务抽象\"><a href=\"#spring中的事务抽象\" class=\"headerlink\" title=\"spring中的事务抽象\"></a>spring中的事务抽象</h3><p>在spring中抽象帮助不同的数据框架ORM都能用相同的方式去做操作。  </p>\n<ol>\n<li>一致的事务模型<ul>\n<li>操作数据的方式：JDBC Hibernate myBatis</li>\n<li>DataSource JTA</li>\n</ul>\n</li>\n<li><p>事务抽象类里的核心接口</p>\n<ul>\n<li>PlatformTransactionManager<ul>\n<li>DataSourceTransactionManager</li>\n<li>HibernateTransactionManager</li>\n<li>JtaTransactionManager</li>\n</ul>\n</li>\n<li>TransactionDefinitions(事务定义)<ul>\n<li>Propagation(传播特性)</li>\n<li>Isolation(隔离性)</li>\n<li>Timeout(超时时间)</li>\n<li>Read-only status(只读状态)<br>在PlatformTransactionManager中定义了commit rollback 方法实现统一事务提交，回滚操作。<br>通过getTransaction方法从TransactionDefinitions获取两个接口的参数TransactionStatus。</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>事务的传播特性  </p>\n<p>传播性|值|含<br>-|-|-<br>PROPAFGATION_REQUIRED|0|默认，有事务就用当前事务，没有就创建<br>PROPAFGATION_SUPPORTS|1|事务可有可无，不是必须的<br>PROPAFGATION_MANDARTORY|2|当前必须要有事务，没有就报错<br>PROPAFGATION_REQUIRES_NEW|3|无论是否有事务，都起新事务,之前的挂起.事务之间没有关联。事务之前结果不相互影响<br>PROPAFGATION_NOT_SUPPORTED|4|不支持事务，按照非事务方式运行<br>PROPAFGATION_NEVER|5|不支持事务，有事务就抛异常<br>PROPAFGATION_NESTED|6|内嵌事务，如果有事务，在当前事务中再起一个事务。<br>内嵌事务的结果（是否回滚），影响外部事务的执行。外部回滚，内部也回滚。内部抛异常，回滚了，外部不受影响。 </p>\n</li>\n<li><p>事务的隔离性  </p>\n<p>默认-1 需要配置</p>\n<p>隔离性|值|脏读|不可重复读|幻读<br>-|-|-|-|-<br>ISOLATION_READ_UNCOMMITTED|1|√|√|√<br>ISOLATION_READ_UNCOMMITTED|2|×|√|√<br>ISOLATION_READ_UNCOMMITTED|3|×|×|√<br>ISOLATION_READ_UNCOMMITTED|4|×|×|×</p>\n</li>\n</ol>\n</li>\n<li><p>编程式事务</p>\n<ol>\n<li>Transaction Template(基本简单方式)<ul>\n<li>TransactionCallback</li>\n<li>TransactionCallbackWithoutResult </li>\n</ul>\n</li>\n<li>PlatformTransactionManager<ul>\n<li>可以传入TransactionDefinittion进行定义</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>声明式事务  </p>\n<ol>\n<li>利用aop-proxy在目标方法上操作。  <ol>\n<li>caller调用proxy代理，而不是直接调用目标方法</li>\n<li>代理掉用Transaction Advisor，此时创建事务</li>\n<li>代理掉用Transaction Advisor调用Custom Advisor</li>\n<li>运行用户interceptors的before操作</li>\n<li>调用目标方法，执行业务逻辑</li>\n<li>执行后，返回结果，也可能没有结果返回void</li>\n<li>Custom Advisor运行用户interceptors的after操作，返回给Transaction Advisor</li>\n<li>Transaction Advisor事务操作成功commit，失败rollback</li>\n<li>返回给proxy代理</li>\n<li>返回给调用者 caller</li>\n</ol>\n</li>\n<li>配置方式<ol>\n<li>开启方式 注解 <code>@EnabelTransactionManagement</code> xml <code>&lt;tx:annotation-driver&gt;</code></li>\n<li>配置<ul>\n<li>proxyTargetClass true false 基于接口还是基于类</li>\n<li>mode  Aop 默认java 可以改Spj</li>\n<li>order 事务Aop拦截顺序，默认最低</li>\n</ul>\n</li>\n<li>方法或类上加<code>@Transactional</code><ul>\n<li>transactionManager</li>\n<li>propagation</li>\n<li>isolation</li>\n<li>timeOut</li>\n<li>readOnly</li>\n<li>判断回滚策略（可配置某些异常类型回滚）</li>\n</ul>\n</li>\n<li>一个没有配置<code>@Transactional</code>的方法，内部调用一个配置了<code>@Transactional</code>的方法<br>不会有事务的支持（外方法没有调用代理去做操作）。默认情 况下，spring aop同级调用失效，<br>因为同级无法创建代理对象，而事务是通过aop代理类实现的。<br>最简单是，把自己的实例注入进来，内部直接调用改成，用自己的实例<br>调用，因为自己的实例spring帮你创建了一个代理类，我们直接调用就行。也可以通过<br>AopContext.currentProxy()获取当前类的代理对象，再调用子方法，其实是增强后的的方法<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h5 id=\"spring声明式事务本质上是通过AOP来增强类的功能\"><a href=\"#spring声明式事务本质上是通过AOP来增强类的功能\" class=\"headerlink\" title=\"spring声明式事务本质上是通过AOP来增强类的功能\"></a>spring声明式事务本质上是通过AOP来增强类的功能</h5></li>\n</ol>\n<ul>\n<li>before after</li>\n<li>AOP创建动态代理<h5 id=\"REQUEST——NEW\"><a href=\"#REQUEST——NEW\" class=\"headerlink\" title=\"REQUEST——NEW\"></a>REQUEST——NEW</h5></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"初始的springboot项目的依赖分析","comments":1,"date":"2019-01-21T09:41:03.000Z","updated":"2019-01-21T09:41:03.000Z","_content":"\n### 依赖分析\nspringboot项目从官网指引的步骤生成的项目，执行`mvn dependency:tree`，输出如下：\n```bash\ncom.XXX:demo:jar:0.0.1-SNAPSHOT\n+- org.springframework.boot:spring-boot-starter:jar:2.1.2.RELEASE:compile\n|  +- org.springframework.boot:spring-boot:jar:2.1.2.RELEASE:compile\n|  |  \\- org.springframework:spring-context:jar:5.1.4.RELEASE:compile\n|  |     +- org.springframework:spring-aop:jar:5.1.4.RELEASE:compile\n|  |     +- org.springframework:spring-beans:jar:5.1.4.RELEASE:compile\n|  |     \\- org.springframework:spring-expression:jar:5.1.4.RELEASE:compile\n|  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.1.2.RELEASE:compile\n|  +- org.springframework.boot:spring-boot-starter-logging:jar:2.1.2.RELEASE:compile\n|  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile\n|  |  |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile\n|  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.11.1:compile\n|  |  |  \\- org.apache.logging.log4j:log4j-api:jar:2.11.1:compile\n|  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.25:compile\n|  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile\n|  +- org.springframework:spring-core:jar:5.1.4.RELEASE:compile\n|  |  \\- org.springframework:spring-jcl:jar:5.1.4.RELEASE:compile\n|  \\- org.yaml:snakeyaml:jar:1.23:runtime\n\\- org.springframework.boot:spring-boot-starter-test:jar:2.1.2.RELEASE:test\n   +- org.springframework.boot:spring-boot-test:jar:2.1.2.RELEASE:test\n   +- org.springframework.boot:spring-boot-test-autoconfigure:jar:2.1.2.RELEASE:test\n   +- com.jayway.jsonpath:json-path:jar:2.4.0:test\n   |  +- net.minidev:json-smart:jar:2.3:test\n   |  |  \\- net.minidev:accessors-smart:jar:1.2:test\n   |  |     \\- org.ow2.asm:asm:jar:5.0.4:test\n   |  \\- org.slf4j:slf4j-api:jar:1.7.25:compile\n   +- junit:junit:jar:4.12:test\n   +- org.assertj:assertj-core:jar:3.11.1:test\n   +- org.mockito:mockito-core:jar:2.23.4:test\n   |  +- net.bytebuddy:byte-buddy:jar:1.9.7:test\n   |  +- net.bytebuddy:byte-buddy-agent:jar:1.9.7:test\n   |  \\- org.objenesis:objenesis:jar:2.6:test\n   +- org.hamcrest:hamcrest-core:jar:1.3:test\n   +- org.hamcrest:hamcrest-library:jar:1.3:test\n   +- org.skyscreamer:jsonassert:jar:1.5.0:test\n   |  \\- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test\n   +- org.springframework:spring-test:jar:5.1.4.RELEASE:test\n   \\- org.xmlunit:xmlunit-core:jar:2.6.2:test\n\n```\n\n这个直观一点：\n![LinkedList](初始的springboot项目的依赖分析/demo.png)\n\n###","source":"_posts/初始的springboot项目的依赖分析.md","raw":"---\ntitle: 初始的springboot项目的依赖分析\ncomments: true\ndate: 2019-01-21 17:41:03\nupdated: 2019-01-21 17:41:03\ntags:\n    - Java\n    - springboot\ncategories: springboot\n---\n\n### 依赖分析\nspringboot项目从官网指引的步骤生成的项目，执行`mvn dependency:tree`，输出如下：\n```bash\ncom.XXX:demo:jar:0.0.1-SNAPSHOT\n+- org.springframework.boot:spring-boot-starter:jar:2.1.2.RELEASE:compile\n|  +- org.springframework.boot:spring-boot:jar:2.1.2.RELEASE:compile\n|  |  \\- org.springframework:spring-context:jar:5.1.4.RELEASE:compile\n|  |     +- org.springframework:spring-aop:jar:5.1.4.RELEASE:compile\n|  |     +- org.springframework:spring-beans:jar:5.1.4.RELEASE:compile\n|  |     \\- org.springframework:spring-expression:jar:5.1.4.RELEASE:compile\n|  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.1.2.RELEASE:compile\n|  +- org.springframework.boot:spring-boot-starter-logging:jar:2.1.2.RELEASE:compile\n|  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile\n|  |  |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile\n|  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.11.1:compile\n|  |  |  \\- org.apache.logging.log4j:log4j-api:jar:2.11.1:compile\n|  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.25:compile\n|  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile\n|  +- org.springframework:spring-core:jar:5.1.4.RELEASE:compile\n|  |  \\- org.springframework:spring-jcl:jar:5.1.4.RELEASE:compile\n|  \\- org.yaml:snakeyaml:jar:1.23:runtime\n\\- org.springframework.boot:spring-boot-starter-test:jar:2.1.2.RELEASE:test\n   +- org.springframework.boot:spring-boot-test:jar:2.1.2.RELEASE:test\n   +- org.springframework.boot:spring-boot-test-autoconfigure:jar:2.1.2.RELEASE:test\n   +- com.jayway.jsonpath:json-path:jar:2.4.0:test\n   |  +- net.minidev:json-smart:jar:2.3:test\n   |  |  \\- net.minidev:accessors-smart:jar:1.2:test\n   |  |     \\- org.ow2.asm:asm:jar:5.0.4:test\n   |  \\- org.slf4j:slf4j-api:jar:1.7.25:compile\n   +- junit:junit:jar:4.12:test\n   +- org.assertj:assertj-core:jar:3.11.1:test\n   +- org.mockito:mockito-core:jar:2.23.4:test\n   |  +- net.bytebuddy:byte-buddy:jar:1.9.7:test\n   |  +- net.bytebuddy:byte-buddy-agent:jar:1.9.7:test\n   |  \\- org.objenesis:objenesis:jar:2.6:test\n   +- org.hamcrest:hamcrest-core:jar:1.3:test\n   +- org.hamcrest:hamcrest-library:jar:1.3:test\n   +- org.skyscreamer:jsonassert:jar:1.5.0:test\n   |  \\- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test\n   +- org.springframework:spring-test:jar:5.1.4.RELEASE:test\n   \\- org.xmlunit:xmlunit-core:jar:2.6.2:test\n\n```\n\n这个直观一点：\n![LinkedList](初始的springboot项目的依赖分析/demo.png)\n\n###","slug":"初始的springboot项目的依赖分析","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2f000jhgj3kxu4knaf","content":"<h3 id=\"依赖分析\"><a href=\"#依赖分析\" class=\"headerlink\" title=\"依赖分析\"></a>依赖分析</h3><p>springboot项目从官网指引的步骤生成的项目，执行<code>mvn dependency:tree</code>，输出如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.XXX:demo:jar:0.0.1-SNAPSHOT</span><br><span class=\"line\">+- org.springframework.boot:spring-boot-starter:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  +- org.springframework.boot:spring-boot:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  |  \\- org.springframework:spring-context:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |     +- org.springframework:spring-aop:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |     +- org.springframework:spring-beans:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |     \\- org.springframework:spring-expression:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  +- org.springframework.boot:spring-boot-starter-logging:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile</span><br><span class=\"line\">|  |  |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile</span><br><span class=\"line\">|  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.11.1:compile</span><br><span class=\"line\">|  |  |  \\- org.apache.logging.log4j:log4j-api:jar:2.11.1:compile</span><br><span class=\"line\">|  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.25:compile</span><br><span class=\"line\">|  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile</span><br><span class=\"line\">|  +- org.springframework:spring-core:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |  \\- org.springframework:spring-jcl:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  \\- org.yaml:snakeyaml:jar:1.23:runtime</span><br><span class=\"line\">\\- org.springframework.boot:spring-boot-starter-test:jar:2.1.2.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.springframework.boot:spring-boot-test:jar:2.1.2.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.springframework.boot:spring-boot-test-autoconfigure:jar:2.1.2.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- com.jayway.jsonpath:json-path:jar:2.4.0:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  +- net.minidev:json-smart:jar:2.3:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  |  \\- net.minidev:accessors-smart:jar:1.2:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  |     \\- org.ow2.asm:asm:jar:5.0.4:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  \\- org.slf4j:slf4j-api:jar:1.7.25:compile</span><br><span class=\"line\">   +- junit:junit:jar:4.12:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.assertj:assertj-core:jar:3.11.1:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.mockito:mockito-core:jar:2.23.4:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  +- net.bytebuddy:byte-buddy:jar:1.9.7:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  +- net.bytebuddy:byte-buddy-agent:jar:1.9.7:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  \\- org.objenesis:objenesis:jar:2.6:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.hamcrest:hamcrest-core:jar:1.3:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.hamcrest:hamcrest-library:jar:1.3:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.skyscreamer:jsonassert:jar:1.5.0:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  \\- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.springframework:spring-test:jar:5.1.4.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   \\- org.xmlunit:xmlunit-core:jar:2.6.2:<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<p>这个直观一点：<br><img src=\"/2019/01/21/初始的springboot项目的依赖分析/demo.png\" alt=\"LinkedList\"></p>\n<p>###</p>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h3 id=\"依赖分析\"><a href=\"#依赖分析\" class=\"headerlink\" title=\"依赖分析\"></a>依赖分析</h3><p>springboot项目从官网指引的步骤生成的项目，执行<code>mvn dependency:tree</code>，输出如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.XXX:demo:jar:0.0.1-SNAPSHOT</span><br><span class=\"line\">+- org.springframework.boot:spring-boot-starter:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  +- org.springframework.boot:spring-boot:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  |  \\- org.springframework:spring-context:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |     +- org.springframework:spring-aop:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |     +- org.springframework:spring-beans:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |     \\- org.springframework:spring-expression:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  +- org.springframework.boot:spring-boot-starter-logging:jar:2.1.2.RELEASE:compile</span><br><span class=\"line\">|  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile</span><br><span class=\"line\">|  |  |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile</span><br><span class=\"line\">|  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.11.1:compile</span><br><span class=\"line\">|  |  |  \\- org.apache.logging.log4j:log4j-api:jar:2.11.1:compile</span><br><span class=\"line\">|  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.25:compile</span><br><span class=\"line\">|  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile</span><br><span class=\"line\">|  +- org.springframework:spring-core:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  |  \\- org.springframework:spring-jcl:jar:5.1.4.RELEASE:compile</span><br><span class=\"line\">|  \\- org.yaml:snakeyaml:jar:1.23:runtime</span><br><span class=\"line\">\\- org.springframework.boot:spring-boot-starter-test:jar:2.1.2.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.springframework.boot:spring-boot-test:jar:2.1.2.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.springframework.boot:spring-boot-test-autoconfigure:jar:2.1.2.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- com.jayway.jsonpath:json-path:jar:2.4.0:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  +- net.minidev:json-smart:jar:2.3:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  |  \\- net.minidev:accessors-smart:jar:1.2:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  |     \\- org.ow2.asm:asm:jar:5.0.4:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  \\- org.slf4j:slf4j-api:jar:1.7.25:compile</span><br><span class=\"line\">   +- junit:junit:jar:4.12:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.assertj:assertj-core:jar:3.11.1:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.mockito:mockito-core:jar:2.23.4:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  +- net.bytebuddy:byte-buddy:jar:1.9.7:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  +- net.bytebuddy:byte-buddy-agent:jar:1.9.7:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  \\- org.objenesis:objenesis:jar:2.6:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.hamcrest:hamcrest-core:jar:1.3:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.hamcrest:hamcrest-library:jar:1.3:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.skyscreamer:jsonassert:jar:1.5.0:<span class=\"built_in\">test</span></span><br><span class=\"line\">   |  \\- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:<span class=\"built_in\">test</span></span><br><span class=\"line\">   +- org.springframework:spring-test:jar:5.1.4.RELEASE:<span class=\"built_in\">test</span></span><br><span class=\"line\">   \\- org.xmlunit:xmlunit-core:jar:2.6.2:<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<p>这个直观一点：<br><img src=\"/2019/01/21/初始的springboot项目的依赖分析/demo.png\" alt=\"LinkedList\"></p>\n<p>###</p>\n"},{"title":"口水Java虚拟机","comments":1,"date":"2018-08-25T04:14:45.000Z","updated":"2018-08-25T04:14:45.000Z","_content":"\n## Java运行方式\n- 在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)\n- C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。\n\n## 为什么 Java 要在虚拟机里运行？\n- Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。\n- 设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。\n- 不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。\n- Java 虚拟机可以由硬件实现\n- 各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，\n可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。\n- 虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。\n其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。\n\n## Java 虚拟机具体是怎样运行 Java 字节码的？\n1. 虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中\n2. 加载后的Java类会被存放于方法区（Method Area）中\n3. 实际运行时，虚拟机会执行方法区内的代码。\n4. 运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。\n这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。\n5. 当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。\n\n- 和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。\n- 不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，\n以及存放各个线程执行位置的PC寄存器。\n\n![1](./1.png)  \n\n- 从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。\n\n1. HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. ***无需等待编译***\n2. 第二种是即时编译（Just-In-Time compilation，JIT），\n将一个方法中包含的所有字节码编译成机器码后再执行。 ***实际运行速度更快***\n\n- HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。\n先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。\n\n## Java 虚拟机的运行效率究竟是怎么样的？\n\n- 即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。\n- 对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；\n另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。\n- 为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。\n- C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。\n- C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。\n- Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。\n- 为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，\n并且按 1:2 的比例配置给 C1 及 C2 编译器。\n- 在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。\n![2](./2.png)\n\n## Java 虚拟机的 boolean 类型\n- 在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。\n- 在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。\n这个编码规则约束了 Java 字节码的具体实现。\n\n## Java 的基本类型\n![3](./3.png)\n- byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。\n从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。\n- 在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。\nchar 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。","source":"_posts/口水Java虚拟机.md","raw":"---\ntitle: 口水Java虚拟机\ncomments: true\ndate: 2018-08-25 12:14:45\nupdated: 2018-08-25 12:14:45\ntags:\n    - Java\n    - jvm\n    - 笔记\ncategories: 码文\n---\n\n## Java运行方式\n- 在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)\n- C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。\n\n## 为什么 Java 要在虚拟机里运行？\n- Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。\n- 设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。\n- 不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。\n- Java 虚拟机可以由硬件实现\n- 各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，\n可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。\n- 虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。\n其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。\n\n## Java 虚拟机具体是怎样运行 Java 字节码的？\n1. 虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中\n2. 加载后的Java类会被存放于方法区（Method Area）中\n3. 实际运行时，虚拟机会执行方法区内的代码。\n4. 运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。\n这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。\n5. 当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。\n\n- 和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。\n- 不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，\n以及存放各个线程执行位置的PC寄存器。\n\n![1](./1.png)  \n\n- 从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。\n\n1. HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. ***无需等待编译***\n2. 第二种是即时编译（Just-In-Time compilation，JIT），\n将一个方法中包含的所有字节码编译成机器码后再执行。 ***实际运行速度更快***\n\n- HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。\n先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。\n\n## Java 虚拟机的运行效率究竟是怎么样的？\n\n- 即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。\n- 对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；\n另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。\n- 为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。\n- C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。\n- C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。\n- Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。\n- 为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，\n并且按 1:2 的比例配置给 C1 及 C2 编译器。\n- 在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。\n![2](./2.png)\n\n## Java 虚拟机的 boolean 类型\n- 在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。\n- 在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。\n这个编码规则约束了 Java 字节码的具体实现。\n\n## Java 的基本类型\n![3](./3.png)\n- byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。\n从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。\n- 在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。\nchar 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。","slug":"口水Java虚拟机","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2h000ohgj3hc76pmfi","content":"<h2 id=\"Java运行方式\"><a href=\"#Java运行方式\" class=\"headerlink\" title=\"Java运行方式\"></a>Java运行方式</h2><ul>\n<li>在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)</li>\n<li>C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。</li>\n</ul>\n<h2 id=\"为什么-Java-要在虚拟机里运行？\"><a href=\"#为什么-Java-要在虚拟机里运行？\" class=\"headerlink\" title=\"为什么 Java 要在虚拟机里运行？\"></a>为什么 Java 要在虚拟机里运行？</h2><ul>\n<li>Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。</li>\n<li>设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。</li>\n<li>不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。</li>\n<li>Java 虚拟机可以由硬件实现</li>\n<li>各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，<br>可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。</li>\n<li>虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。<br>其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。</li>\n</ul>\n<h2 id=\"Java-虚拟机具体是怎样运行-Java-字节码的？\"><a href=\"#Java-虚拟机具体是怎样运行-Java-字节码的？\" class=\"headerlink\" title=\"Java 虚拟机具体是怎样运行 Java 字节码的？\"></a>Java 虚拟机具体是怎样运行 Java 字节码的？</h2><ol>\n<li>虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中</li>\n<li>加载后的Java类会被存放于方法区（Method Area）中</li>\n<li>实际运行时，虚拟机会执行方法区内的代码。</li>\n<li>运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。<br>这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。</li>\n<li>当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。</li>\n</ol>\n<ul>\n<li>和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。</li>\n<li>不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，<br>以及存放各个线程执行位置的PC寄存器。</li>\n</ul>\n<p><img src=\"/2018/08/25/口水Java虚拟机/1.png\" alt=\"1\">  </p>\n<ul>\n<li>从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。</li>\n</ul>\n<ol>\n<li>HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. <strong><em>无需等待编译</em></strong></li>\n<li>第二种是即时编译（Just-In-Time compilation，JIT），<br>将一个方法中包含的所有字节码编译成机器码后再执行。 <strong><em>实际运行速度更快</em></strong></li>\n</ol>\n<ul>\n<li>HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。<br>先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。</li>\n</ul>\n<h2 id=\"Java-虚拟机的运行效率究竟是怎么样的？\"><a href=\"#Java-虚拟机的运行效率究竟是怎么样的？\" class=\"headerlink\" title=\"Java 虚拟机的运行效率究竟是怎么样的？\"></a>Java 虚拟机的运行效率究竟是怎么样的？</h2><ul>\n<li>即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。</li>\n<li>对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；<br>另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</li>\n<li>为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。</li>\n<li>C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。</li>\n<li>C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。</li>\n<li>Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。</li>\n<li>为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，<br>并且按 1:2 的比例配置给 C1 及 C2 编译器。</li>\n<li>在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。<br><img src=\"/2018/08/25/口水Java虚拟机/2.png\" alt=\"2\"></li>\n</ul>\n<h2 id=\"Java-虚拟机的-boolean-类型\"><a href=\"#Java-虚拟机的-boolean-类型\" class=\"headerlink\" title=\"Java 虚拟机的 boolean 类型\"></a>Java 虚拟机的 boolean 类型</h2><ul>\n<li>在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。</li>\n<li>在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。<br>这个编码规则约束了 Java 字节码的具体实现。</li>\n</ul>\n<h2 id=\"Java-的基本类型\"><a href=\"#Java-的基本类型\" class=\"headerlink\" title=\"Java 的基本类型\"></a>Java 的基本类型</h2><p><img src=\"/2018/08/25/口水Java虚拟机/3.png\" alt=\"3\"></p>\n<ul>\n<li>byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。<br>从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。</li>\n<li>在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。<br>char 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。</li>\n</ul>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h2 id=\"Java运行方式\"><a href=\"#Java运行方式\" class=\"headerlink\" title=\"Java运行方式\"></a>Java运行方式</h2><ul>\n<li>在JRE下(JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK包含JRE，附带开发、诊断工具。)</li>\n<li>C++无需额外的运行环境。直接编译成 CPU 所能理解的机器码。</li>\n</ul>\n<h2 id=\"为什么-Java-要在虚拟机里运行？\"><a href=\"#为什么-Java-要在虚拟机里运行？\" class=\"headerlink\" title=\"为什么 Java 要在虚拟机里运行？\"></a>为什么 Java 要在虚拟机里运行？</h2><ul>\n<li>Java语法复杂，抽象程度高。直接在硬件上运行不现实。所以呢，在运行 Java 前转换。</li>\n<li>设计一个虚拟机，通过编译器将Java转换成该虚拟机所能识别的指令序列，也称 Java 字节码。因为 Java 字节码指令的操作码（opcode）被固定为一个字节。</li>\n<li>不同的是，比起C++，Java的编译结果相对精简一些。因为Java虚拟机相对于物理机而言，抽象程度更高。</li>\n<li>Java 虚拟机可以由硬件实现</li>\n<li>各个现有平台（如 Windows_x64、Linux_aarch64）上软件实现。这么做的意义在于，一旦一个程序被转换成 Java 字节码，<br>可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。</li>\n<li>虚拟机的另外一个好处是托管环境（Managed Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。<br>其中最广为人知的 自动内存管理 垃圾回收.除此之外，数组越界、动态类型、安全权限等动态检测，使免于书写无关业务逻辑代码。</li>\n</ul>\n<h2 id=\"Java-虚拟机具体是怎样运行-Java-字节码的？\"><a href=\"#Java-虚拟机具体是怎样运行-Java-字节码的？\" class=\"headerlink\" title=\"Java 虚拟机具体是怎样运行 Java 字节码的？\"></a>Java 虚拟机具体是怎样运行 Java 字节码的？</h2><ol>\n<li>虚拟机视角，首先java文件编译的class文件加载到Java虚拟机中</li>\n<li>加载后的Java类会被存放于方法区（Method Area）中</li>\n<li>实际运行时，虚拟机会执行方法区内的代码。</li>\n<li>运行过程调用进入一个Java方法，Java虚拟机在当前线程的Java方法栈中生成一个栈帧，存放局部变量以及字节码的操作数。<br>这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。</li>\n<li>当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。</li>\n</ol>\n<ul>\n<li>和X86的段式内存管理类似，Java虚拟机也在内存中划分出堆和栈来存储运行时数据。</li>\n<li>不同的是，Java虚拟机将栈细分为面向Java方法的Java方法栈，面向本地方法（用 C++ 写的 native 方法）的本地方法栈，<br>以及存放各个线程执行位置的PC寄存器。</li>\n</ul>\n<p><img src=\"/2018/08/25/口水Java虚拟机/1.png\" alt=\"1\">  </p>\n<ul>\n<li>从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。</li>\n</ul>\n<ol>\n<li>HotSpot里第一种是解释执行，逐条将字节码翻译成机器码并执行. <strong><em>无需等待编译</em></strong></li>\n<li>第二种是即时编译（Just-In-Time compilation，JIT），<br>将一个方法中包含的所有字节码编译成机器码后再执行。 <strong><em>实际运行速度更快</em></strong></li>\n</ol>\n<ul>\n<li>HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。<br>先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。</li>\n</ul>\n<h2 id=\"Java-虚拟机的运行效率究竟是怎么样的？\"><a href=\"#Java-虚拟机的运行效率究竟是怎么样的？\" class=\"headerlink\" title=\"Java 虚拟机的运行效率究竟是怎么样的？\"></a>Java 虚拟机的运行效率究竟是怎么样的？</h2><ul>\n<li>即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。</li>\n<li>对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；<br>另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</li>\n<li>为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。</li>\n<li>C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。</li>\n<li>C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。</li>\n<li>Java 7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。</li>\n<li>为了不干扰应用的正常运行，HotSpot 的即时编译是放在额外的编译线程中进行的,根据 CPU 的数量设置编译线程的数目，<br>并且按 1:2 的比例配置给 C1 及 C2 编译器。</li>\n<li>在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。<br><img src=\"/2018/08/25/口水Java虚拟机/2.png\" alt=\"2\"></li>\n</ul>\n<h2 id=\"Java-虚拟机的-boolean-类型\"><a href=\"#Java-虚拟机的-boolean-类型\" class=\"headerlink\" title=\"Java 虚拟机的 boolean 类型\"></a>Java 虚拟机的 boolean 类型</h2><ul>\n<li>在 Java 语言规范中，boolean 类型的值只有符号“true”和“false”。显然，这两个符号是不能被虚拟机直接使用的。</li>\n<li>在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。<br>这个编码规则约束了 Java 字节码的具体实现。</li>\n</ul>\n<h2 id=\"Java-的基本类型\"><a href=\"#Java-的基本类型\" class=\"headerlink\" title=\"Java 的基本类型\"></a>Java 的基本类型</h2><p><img src=\"/2018/08/25/口水Java虚拟机/3.png\" alt=\"3\"></p>\n<ul>\n<li>byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。<br>从前面的基本类型转换至后面的基本类型，无需强制转换。尽管他们的默认值看起来不一样，但在内存中都是 0。</li>\n<li>在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。<br>char 类型的取值范围则是 [0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。</li>\n</ul>\n"},{"title":"最长不重复子串长度问题的思路整理","comments":1,"date":"2018-10-12T02:58:16.000Z","updated":"2018-10-12T02:58:16.000Z","_content":"","source":"_posts/最长不重复子串长度问题的思路整理.md","raw":"---\ntitle: 最长不重复子串长度问题的思路整理\ncomments: true\ndate: 2018-10-12 10:58:16\nupdated: 2018-10-12 10:58:16\ntags:\n- 算法\ncategories:\n- 码文\n---\n","slug":"最长不重复子串长度问题的思路整理","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2i000qhgj3msbs1pl3","content":"","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"title":"手撕链表","comments":1,"date":"2018-10-18T09:56:16.000Z","updated":"2018-10-18T09:56:16.000Z","_content":"\n##### 一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。 \n##### 最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\n### 链表及其变体的特点\n![链表类型和优势](链表类型和优势.png)\n大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开\n都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。\n\n### 链表成员变量方法示意图\n![LinkedList](手撕链表/LinkedList.png)\n\n基于Jdk 8 中的LinkedList源码。\n可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。  \n核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。\n\n#### 1. linkFirst\n```\n    // train\n    public void linkFirst(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (head != null) {\n            Node<T> item = head;\n            head = tNode;\n            head.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    } \n```\n\n```\n    // JDK\n    private void linkFirst(E e) {\n        final Node<E> f = first;\n        final Node<E> newNode = new Node<>(null, e, f);\n        first = newNode;\n        if (f == null)\n            last = newNode;\n        else\n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口\n- jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，\n更合理\n- 关于modCount，在其父类AbstractList中有如下注释\n```\n    /**\n     * The number of times this list has been <i>structurally modified</i>.\n     * Structural modifications are those that change the size of the\n     * list, or otherwise perturb it in such a fashion that iterations in\n     * progress may yield incorrect results.\n     *\n     * <p>This field is used by the iterator and list iterator implementation\n     * returned by the {@code iterator} and {@code listIterator} methods.\n     * If the value of this field changes unexpectedly, the iterator (or list\n     * iterator) will throw a {@code ConcurrentModificationException} in\n     * response to the {@code next}, {@code remove}, {@code previous},\n     * {@code set} or {@code add} operations.  This provides\n     * <i>fail-fast</i> behavior, rather than non-deterministic behavior in\n     * the face of concurrent modification during iteration.\n     *\n     * <p><b>Use of this field by subclasses is optional.</b> If a subclass\n     * wishes to provide fail-fast iterators (and list iterators), then it\n     * merely has to increment this field in its {@code add(int, E)} and\n     * {@code remove(int)} methods (and any other methods that it overrides\n     * that result in structural modifications to the list).  A single call to\n     * {@code add(int, E)} or {@code remove(int)} must add no more than\n     * one to this field, or the iterators (and list iterators) will throw\n     * bogus {@code ConcurrentModificationExceptions}.  If an implementation\n     * does not wish to provide fail-fast iterators, this field may be\n     * ignored.\n     */\n    protected transient int modCount = 0;\n```\n    1. modCount为list结构修改次数。\n    2. 结构修改 -> 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下\n    对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）\n    3. iterator 和 listIterator 会用到，遍历过程中该值如果变化，\n    抛出ConcurrentModificationException\n    4. fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个\n    集合的内容进行操作时，就可能会产生fail-fast事件。\n    例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所\n    改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，\n    产生fail-fast事件。\n    5. 在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要\n    对该值做修改。\n#### 2. linkLast\n```\n    // train\n    public void linkLast(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (tail != null) {\n            Node<T> item = tail;\n            tail = tNode;\n            tail.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素\n是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）\n\n#### 3. linkBefore\n```\n    // train\n    public void linkBefore(T t, Node<T> item) {\n        Node<T> tNode = new Node<T>(t);\n        if (item != null) {\n            Node<T> prev = item.prev;\n            if (prev == null) {// item is head node\n                linkFirst(t);\n            } else {\n                prev.next = tNode;\n                tNode.prev = prev;\n                tNode.next = item;\n            }\n        } else {\n            throw new NullPointerException(\"Node item is null\");\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n        final Node<E> pred = succ.prev;\n        final Node<E> newNode = new Node<>(pred, e, succ);\n        succ.prev = newNode;\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，\n基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。\n\n#### 4. unlinkFirst\n```\n    // train\n    public T unlinkFirst(Node<T> f){\n        T val = f.val;\n        if (f != null) {\n            head = f.next;\n            f.val = null;\n            f.next = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n        final E element = f.item;\n        final Node<E> next = f.next;\n        f.item = null;\n        f.next = null; // help GC\n        first = next;\n        if (next == null)\n            last = null;\n        else\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- 设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致\nOOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC\n而是对GC有帮助而已，是否进行GC不是这里能决定的。[(相关资料)](https://blog.csdn.net/levena/article/details/78318830)\n\n#### 5. unlinkLast\n```\n    // train\n    public T unlinkLast(Node<T> l){\n        T val = l.val;\n        if (l != null) {\n            tail = l.prev;\n            l.prev = null;\n            l.val = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n        final E element = l.item;\n        final Node<E> prev = l.prev;\n        l.item = null;\n        l.prev = null; // help GC\n        last = prev;\n        if (prev == null)\n            first = null;\n        else\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n\n#### 6. unlink\n```\n    // train\n        public T unlink(Node<T> x){\n            T val = x.val;\n            if (x != null) {\n                Node<T> tNode = x.prev.next;\n                x.prev.next = x.next.prev;\n                x.next.prev = tNode;\n                x.prev = null;\n                x.val = null;\n                x.next = null;\n            } else {\n                throw new NullPointerException(\"Node is null\");\n            }\n            return val;\n        }\n```\n\n```\n    // JDK\n    E unlink(Node<E> x) {\n        // assert x != null;\n        final E element = x.item;\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n        if (prev == null) {\n            first = next;\n        } else {\n            prev.next = next;\n            x.prev = null;\n        }\n\n        if (next == null) {\n            last = prev;\n        } else {\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- jdk中在做删除相关操作是后，会把删除的值返回。\n\n#### 7. getFirst && getLast\n```\n    // train\n    public T getFirst(){\n        if (head != null) {\n            return head.val;\n        }\n        return null;\n    }\n\n    public T getLast(){\n        if (tail != null) {\n            return tail.val;\n        }\n        return null;\n    }\n```\n\n```\n    // JDK\n    public E getFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return f.item;\n    }\n\n    public E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n```\n分析：　\n- 下面就都是public了，是双向链表的基础操作\n- jdk在获取不存在的节点时，抛出NoSuchElementException\n\n#### 8. size\n```\n    // train\n    public int size(){\n        return size;\n    }\n```\n\n```\n    // JDK\n    public int size(){\n        return size;\n    }\n```\n分析：　\n- emmm,这还分析啥\n\n\n#### 9. indexOf\n```\n    // train\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o != null) {\n            for (Node<T> i = head; i != null; i = i.next) {\n                if (i.val.equals(o)) {\n                    return index;\n                }\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n\n```\n    // JDK\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n分析：　\n- 智障了吧，人家找null都要返回第一个null\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 10. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public void clear() {\n        // Clearing all of the links between nodes is \"unnecessary\", but:\n        // - helps a generational GC if the discarded nodes inhabit\n        //   more than one generation\n        // - is sure to free memory even if there is a reachable Iterator\n        for (Node<E> x = first; x != null; ) {\n            Node<E> next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }\n```\n分析：　\n- 这里说清空链表中所有\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 11. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        Node<E> pred, succ;\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            Node<E> newNode = new Node<>(pred, e, null);\n            if (pred == null)\n                first = newNode;\n            else\n                pred.next = newNode;\n            pred = newNode;\n        }\n\n        if (succ == null) {\n            last = pred;\n        } else {\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n```\n分析：　\n- allAll默认是在最后添加Collection的子类\n- 添加都是把集合对象通过toArray方法转化成数组，然后添加\n- 对index的位置有越界检查\n\n\n#### 12. clear\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。\n- JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说\n位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令\n是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，\n而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，\n移一位就乘2,这种乘法当然考虑移位了。\n\n### 常见链表相关操作实现\n\n#### 1.\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这\n","source":"_posts/手撕链表.md","raw":"---\ntitle: 手撕链表\ncomments: true\ndate: 2018-10-18 17:56:16\nupdated: 2018-10-18 17:56:16\ntags:\n- 数据结构\ncategories:\n- 码文\n---\n\n##### 一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。 \n##### 最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\n### 链表及其变体的特点\n![链表类型和优势](链表类型和优势.png)\n大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开\n都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。\n\n### 链表成员变量方法示意图\n![LinkedList](手撕链表/LinkedList.png)\n\n基于Jdk 8 中的LinkedList源码。\n可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。  \n核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。\n\n#### 1. linkFirst\n```\n    // train\n    public void linkFirst(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (head != null) {\n            Node<T> item = head;\n            head = tNode;\n            head.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    } \n```\n\n```\n    // JDK\n    private void linkFirst(E e) {\n        final Node<E> f = first;\n        final Node<E> newNode = new Node<>(null, e, f);\n        first = newNode;\n        if (f == null)\n            last = newNode;\n        else\n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口\n- jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，\n更合理\n- 关于modCount，在其父类AbstractList中有如下注释\n```\n    /**\n     * The number of times this list has been <i>structurally modified</i>.\n     * Structural modifications are those that change the size of the\n     * list, or otherwise perturb it in such a fashion that iterations in\n     * progress may yield incorrect results.\n     *\n     * <p>This field is used by the iterator and list iterator implementation\n     * returned by the {@code iterator} and {@code listIterator} methods.\n     * If the value of this field changes unexpectedly, the iterator (or list\n     * iterator) will throw a {@code ConcurrentModificationException} in\n     * response to the {@code next}, {@code remove}, {@code previous},\n     * {@code set} or {@code add} operations.  This provides\n     * <i>fail-fast</i> behavior, rather than non-deterministic behavior in\n     * the face of concurrent modification during iteration.\n     *\n     * <p><b>Use of this field by subclasses is optional.</b> If a subclass\n     * wishes to provide fail-fast iterators (and list iterators), then it\n     * merely has to increment this field in its {@code add(int, E)} and\n     * {@code remove(int)} methods (and any other methods that it overrides\n     * that result in structural modifications to the list).  A single call to\n     * {@code add(int, E)} or {@code remove(int)} must add no more than\n     * one to this field, or the iterators (and list iterators) will throw\n     * bogus {@code ConcurrentModificationExceptions}.  If an implementation\n     * does not wish to provide fail-fast iterators, this field may be\n     * ignored.\n     */\n    protected transient int modCount = 0;\n```\n    1. modCount为list结构修改次数。\n    2. 结构修改 -> 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下\n    对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）\n    3. iterator 和 listIterator 会用到，遍历过程中该值如果变化，\n    抛出ConcurrentModificationException\n    4. fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个\n    集合的内容进行操作时，就可能会产生fail-fast事件。\n    例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所\n    改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，\n    产生fail-fast事件。\n    5. 在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要\n    对该值做修改。\n#### 2. linkLast\n```\n    // train\n    public void linkLast(T t){\n        Node<T> tNode = new Node<T>(t);\n        if (tail != null) {\n            Node<T> item = tail;\n            tail = tNode;\n            tail.next = item;\n        } else {// empty list\n            head = tNode;\n            tail = tNode;\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素\n是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）\n\n#### 3. linkBefore\n```\n    // train\n    public void linkBefore(T t, Node<T> item) {\n        Node<T> tNode = new Node<T>(t);\n        if (item != null) {\n            Node<T> prev = item.prev;\n            if (prev == null) {// item is head node\n                linkFirst(t);\n            } else {\n                prev.next = tNode;\n                tNode.prev = prev;\n                tNode.next = item;\n            }\n        } else {\n            throw new NullPointerException(\"Node item is null\");\n        }\n        size++;\n    }\n```\n\n```\n    // JDK\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n        final Node<E> pred = succ.prev;\n        final Node<E> newNode = new Node<>(pred, e, succ);\n        succ.prev = newNode;\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n分析：　\n- 我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，\n基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。\n\n#### 4. unlinkFirst\n```\n    // train\n    public T unlinkFirst(Node<T> f){\n        T val = f.val;\n        if (f != null) {\n            head = f.next;\n            f.val = null;\n            f.next = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n        final E element = f.item;\n        final Node<E> next = f.next;\n        f.item = null;\n        f.next = null; // help GC\n        first = next;\n        if (next == null)\n            last = null;\n        else\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- 设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致\nOOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC\n而是对GC有帮助而已，是否进行GC不是这里能决定的。[(相关资料)](https://blog.csdn.net/levena/article/details/78318830)\n\n#### 5. unlinkLast\n```\n    // train\n    public T unlinkLast(Node<T> l){\n        T val = l.val;\n        if (l != null) {\n            tail = l.prev;\n            l.prev = null;\n            l.val = null;\n        } else {\n            throw new NullPointerException(\"Node is null\");\n        }\n        return val;\n    }\n```\n\n```\n    // JDK\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n        final E element = l.item;\n        final Node<E> prev = l.prev;\n        l.item = null;\n        l.prev = null; // help GC\n        last = prev;\n        if (prev == null)\n            first = null;\n        else\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n\n#### 6. unlink\n```\n    // train\n        public T unlink(Node<T> x){\n            T val = x.val;\n            if (x != null) {\n                Node<T> tNode = x.prev.next;\n                x.prev.next = x.next.prev;\n                x.next.prev = tNode;\n                x.prev = null;\n                x.val = null;\n                x.next = null;\n            } else {\n                throw new NullPointerException(\"Node is null\");\n            }\n            return val;\n        }\n```\n\n```\n    // JDK\n    E unlink(Node<E> x) {\n        // assert x != null;\n        final E element = x.item;\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n        if (prev == null) {\n            first = next;\n        } else {\n            prev.next = next;\n            x.prev = null;\n        }\n\n        if (next == null) {\n            last = prev;\n        } else {\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n分析：　\n- jdk中在做删除相关操作是后，会把删除的值返回。\n\n#### 7. getFirst && getLast\n```\n    // train\n    public T getFirst(){\n        if (head != null) {\n            return head.val;\n        }\n        return null;\n    }\n\n    public T getLast(){\n        if (tail != null) {\n            return tail.val;\n        }\n        return null;\n    }\n```\n\n```\n    // JDK\n    public E getFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return f.item;\n    }\n\n    public E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n```\n分析：　\n- 下面就都是public了，是双向链表的基础操作\n- jdk在获取不存在的节点时，抛出NoSuchElementException\n\n#### 8. size\n```\n    // train\n    public int size(){\n        return size;\n    }\n```\n\n```\n    // JDK\n    public int size(){\n        return size;\n    }\n```\n分析：　\n- emmm,这还分析啥\n\n\n#### 9. indexOf\n```\n    // train\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o != null) {\n            for (Node<T> i = head; i != null; i = i.next) {\n                if (i.val.equals(o)) {\n                    return index;\n                }\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n\n```\n    // JDK\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n```\n分析：　\n- 智障了吧，人家找null都要返回第一个null\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 10. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public void clear() {\n        // Clearing all of the links between nodes is \"unnecessary\", but:\n        // - helps a generational GC if the discarded nodes inhabit\n        //   more than one generation\n        // - is sure to free memory even if there is a reachable Iterator\n        for (Node<E> x = first; x != null; ) {\n            Node<E> next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }\n```\n分析：　\n- 这里说清空链表中所有\n- 为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的\n，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，\n需要这样<T extends Comparable>，这个就局限了某些不实现Comparable对象。个人观点，轻拍）\n- 返回-1这种风格很像C系，也能看出来当时C对java的影响\n\n#### 11. clear\n```\n    // JDK\n    /**\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        Node<E> pred, succ;\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            Node<E> newNode = new Node<>(pred, e, null);\n            if (pred == null)\n                first = newNode;\n            else\n                pred.next = newNode;\n            pred = newNode;\n        }\n\n        if (succ == null) {\n            last = pred;\n        } else {\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n```\n分析：　\n- allAll默认是在最后添加Collection的子类\n- 添加都是把集合对象通过toArray方法转化成数组，然后添加\n- 对index的位置有越界检查\n\n\n#### 12. clear\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。\n- JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说\n位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令\n是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，\n而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，\n移一位就乘2,这种乘法当然考虑移位了。\n\n### 常见链表相关操作实现\n\n#### 1.\n```\n    // train\n    Node node(int index){\n        if (index < 0 || index >= size ) {\n            return null;\n        }\n        Node e = head;\n        for (int i = 0; i < index; i++) {\n            e = e.next;\n        }\n        return e;\n    }\n\n\n    //JDK\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n分析：　\n- 这\n","slug":"手撕链表","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2j000uhgj3ldjv0e1b","content":"<h5 id=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"><a href=\"#一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\" class=\"headerlink\" title=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"></a>一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。</h5><h5 id=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"><a href=\"#最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\" class=\"headerlink\" title=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"></a>最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。</h5><h3 id=\"链表及其变体的特点\"><a href=\"#链表及其变体的特点\" class=\"headerlink\" title=\"链表及其变体的特点\"></a>链表及其变体的特点</h3><p><img src=\"/2018/10/18/手撕链表/链表类型和优势.png\" alt=\"链表类型和优势\"><br>大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开<br>都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。</p>\n<h3 id=\"链表成员变量方法示意图\"><a href=\"#链表成员变量方法示意图\" class=\"headerlink\" title=\"链表成员变量方法示意图\"></a>链表成员变量方法示意图</h3><p><img src=\"/2018/10/18/手撕链表/LinkedList.png\" alt=\"LinkedList\"></p>\n<p>基于Jdk 8 中的LinkedList源码。<br>可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。<br>核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。</p>\n<h4 id=\"1-linkFirst\"><a href=\"#1-linkFirst\" class=\"headerlink\" title=\"1. linkFirst\"></a>1. linkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkFirst(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = head;</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        head.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private void linkFirst(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</span><br><span class=\"line\">    first = newNode;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        last = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        f.prev = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口</li>\n<li>jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，<br>更合理</li>\n<li><p>关于modCount，在其父类AbstractList中有如下注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span><br><span class=\"line\"> * Structural modifications are those that change the size of the</span><br><span class=\"line\"> * list, or otherwise perturb it in such a fashion that iterations in</span><br><span class=\"line\"> * progress may yield incorrect results.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This field is used by the iterator and list iterator implementation</span><br><span class=\"line\"> * returned by the &#123;@code iterator&#125; and &#123;@code listIterator&#125; methods.</span><br><span class=\"line\"> * If the value of this field changes unexpectedly, the iterator (or list</span><br><span class=\"line\"> * iterator) will throw a &#123;@code ConcurrentModificationException&#125; in</span><br><span class=\"line\"> * response to the &#123;@code next&#125;, &#123;@code remove&#125;, &#123;@code previous&#125;,</span><br><span class=\"line\"> * &#123;@code set&#125; or &#123;@code add&#125; operations.  This provides</span><br><span class=\"line\"> * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in</span><br><span class=\"line\"> * the face of concurrent modification during iteration.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass</span><br><span class=\"line\"> * wishes to provide fail-fast iterators (and list iterators), then it</span><br><span class=\"line\"> * merely has to increment this field in its &#123;@code add(int, E)&#125; and</span><br><span class=\"line\"> * &#123;@code remove(int)&#125; methods (and any other methods that it overrides</span><br><span class=\"line\"> * that result in structural modifications to the list).  A single call to</span><br><span class=\"line\"> * &#123;@code add(int, E)&#125; or &#123;@code remove(int)&#125; must add no more than</span><br><span class=\"line\"> * one to this field, or the iterators (and list iterators) will throw</span><br><span class=\"line\"> * bogus &#123;@code ConcurrentModificationExceptions&#125;.  If an implementation</span><br><span class=\"line\"> * does not wish to provide fail-fast iterators, this field may be</span><br><span class=\"line\"> * ignored.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected transient int modCount = 0;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>modCount为list结构修改次数。</li>\n<li>结构修改 -&gt; 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下<br>对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）</li>\n<li>iterator 和 listIterator 会用到，遍历过程中该值如果变化，<br>抛出ConcurrentModificationException</li>\n<li>fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个<br>集合的内容进行操作时，就可能会产生fail-fast事件。<br>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所<br>改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，<br>产生fail-fast事件。</li>\n<li>在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要<br>对该值做修改。<h4 id=\"2-linkLast\"><a href=\"#2-linkLast\" class=\"headerlink\" title=\"2. linkLast\"></a>2. linkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkLast(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = tail;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">        tail.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkLast(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素<br>是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）</li>\n</ul>\n<h4 id=\"3-linkBefore\"><a href=\"#3-linkBefore\" class=\"headerlink\" title=\"3. linkBefore\"></a>3. linkBefore</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkBefore(T t, Node&lt;T&gt; item) &#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (item != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; prev = item.prev;</span><br><span class=\"line\">        if (prev == null) &#123;// item is head node</span><br><span class=\"line\">            linkFirst(t);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            prev.next = tNode;</span><br><span class=\"line\">            tNode.prev = prev;</span><br><span class=\"line\">            tNode.next = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node item is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class=\"line\">    // assert succ != null;</span><br><span class=\"line\">    final Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">    succ.prev = newNode;</span><br><span class=\"line\">    if (pred == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        pred.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，<br>基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。</li>\n</ul>\n<h4 id=\"4-unlinkFirst\"><a href=\"#4-unlinkFirst\" class=\"headerlink\" title=\"4. unlinkFirst\"></a>4. unlinkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkFirst(Node&lt;T&gt; f)&#123;</span><br><span class=\"line\">    T val = f.val;</span><br><span class=\"line\">    if (f != null) &#123;</span><br><span class=\"line\">        head = f.next;</span><br><span class=\"line\">        f.val = null;</span><br><span class=\"line\">        f.next = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class=\"line\">    // assert f == first &amp;&amp; f != null;</span><br><span class=\"line\">    final E element = f.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = f.next;</span><br><span class=\"line\">    f.item = null;</span><br><span class=\"line\">    f.next = null; // help GC</span><br><span class=\"line\">    first = next;</span><br><span class=\"line\">    if (next == null)</span><br><span class=\"line\">        last = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        next.prev = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致<br>OOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC<br>而是对GC有帮助而已，是否进行GC不是这里能决定的。<a href=\"https://blog.csdn.net/levena/article/details/78318830\" target=\"_blank\" rel=\"noopener\">(相关资料)</a></li>\n</ul>\n<h4 id=\"5-unlinkLast\"><a href=\"#5-unlinkLast\" class=\"headerlink\" title=\"5. unlinkLast\"></a>5. unlinkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkLast(Node&lt;T&gt; l)&#123;</span><br><span class=\"line\">    T val = l.val;</span><br><span class=\"line\">    if (l != null) &#123;</span><br><span class=\"line\">        tail = l.prev;</span><br><span class=\"line\">        l.prev = null;</span><br><span class=\"line\">        l.val = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class=\"line\">    // assert l == last &amp;&amp; l != null;</span><br><span class=\"line\">    final E element = l.item;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = l.prev;</span><br><span class=\"line\">    l.item = null;</span><br><span class=\"line\">    l.prev = null; // help GC</span><br><span class=\"line\">    last = prev;</span><br><span class=\"line\">    if (prev == null)</span><br><span class=\"line\">        first = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        prev.next = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-unlink\"><a href=\"#6-unlink\" class=\"headerlink\" title=\"6. unlink\"></a>6. unlink</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">    public T unlink(Node&lt;T&gt; x)&#123;</span><br><span class=\"line\">        T val = x.val;</span><br><span class=\"line\">        if (x != null) &#123;</span><br><span class=\"line\">            Node&lt;T&gt; tNode = x.prev.next;</span><br><span class=\"line\">            x.prev.next = x.next.prev;</span><br><span class=\"line\">            x.next.prev = tNode;</span><br><span class=\"line\">            x.prev = null;</span><br><span class=\"line\">            x.val = null;</span><br><span class=\"line\">            x.next = null;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class=\"line\">    // assert x != null;</span><br><span class=\"line\">    final E element = x.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (prev == null) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (next == null) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    x.item = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk中在做删除相关操作是后，会把删除的值返回。</li>\n</ul>\n<h4 id=\"7-getFirst-amp-amp-getLast\"><a href=\"#7-getFirst-amp-amp-getLast\" class=\"headerlink\" title=\"7. getFirst &amp;&amp; getLast\"></a>7. getFirst &amp;&amp; getLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T getFirst()&#123;</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        return head.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public T getLast()&#123;</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        return tail.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public E getFirst() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return f.item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public E getLast() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return l.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>下面就都是public了，是双向链表的基础操作</li>\n<li>jdk在获取不存在的节点时，抛出NoSuchElementException</li>\n</ul>\n<h4 id=\"8-size\"><a href=\"#8-size\" class=\"headerlink\" title=\"8. size\"></a>8. size</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>emmm,这还分析啥</li>\n</ul>\n<h4 id=\"9-indexOf\"><a href=\"#9-indexOf\" class=\"headerlink\" title=\"9. indexOf\"></a>9. indexOf</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o != null) &#123;</span><br><span class=\"line\">        for (Node&lt;T&gt; i = head; i != null; i = i.next) &#123;</span><br><span class=\"line\">            if (i.val.equals(o)) &#123;</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o == null) &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (x.item == null)</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (o.equals(x.item))</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>智障了吧，人家找null都要返回第一个null</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"10-clear\"><a href=\"#10-clear\" class=\"headerlink\" title=\"10. clear\"></a>10. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void clear() &#123;</span><br><span class=\"line\">    // Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</span><br><span class=\"line\">    // - helps a generational GC if the discarded nodes inhabit</span><br><span class=\"line\">    //   more than one generation</span><br><span class=\"line\">    // - is sure to free memory even if there is a reachable Iterator</span><br><span class=\"line\">    for (Node&lt;E&gt; x = first; x != null; ) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">        x.item = null;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">        x = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    first = last = null;</span><br><span class=\"line\">    size = 0;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里说清空链表中所有</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"11-clear\"><a href=\"#11-clear\" class=\"headerlink\" title=\"11. clear\"></a>11. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    int numNew = a.length;</span><br><span class=\"line\">    if (numNew == 0)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;E&gt; pred, succ;</span><br><span class=\"line\">    if (index == size) &#123;</span><br><span class=\"line\">        succ = null;</span><br><span class=\"line\">        pred = last;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        succ = node(index);</span><br><span class=\"line\">        pred = succ.prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Object o : a) &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;</span><br><span class=\"line\">        Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);</span><br><span class=\"line\">        if (pred == null)</span><br><span class=\"line\">            first = newNode;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            pred.next = newNode;</span><br><span class=\"line\">        pred = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (succ == null) &#123;</span><br><span class=\"line\">        last = pred;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        pred.next = succ;</span><br><span class=\"line\">        succ.prev = pred;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    size += numNew;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void checkPositionIndex(int index) &#123;</span><br><span class=\"line\">    if (!isPositionIndex(index))</span><br><span class=\"line\">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private boolean isPositionIndex(int index) &#123;</span><br><span class=\"line\">    return index &gt;= 0 &amp;&amp; index &lt;= size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>allAll默认是在最后添加Collection的子类</li>\n<li>添加都是把集合对象通过toArray方法转化成数组，然后添加</li>\n<li>对index的位置有越界检查</li>\n</ul>\n<h4 id=\"12-clear\"><a href=\"#12-clear\" class=\"headerlink\" title=\"12. clear\"></a>12. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。</li>\n<li>JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说<br>位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令<br>是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，<br>而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，<br>移一位就乘2,这种乘法当然考虑移位了。</li>\n</ul>\n<h3 id=\"常见链表相关操作实现\"><a href=\"#常见链表相关操作实现\" class=\"headerlink\" title=\"常见链表相关操作实现\"></a>常见链表相关操作实现</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这</li>\n</ul>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h5 id=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"><a href=\"#一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\" class=\"headerlink\" title=\"一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。\"></a>一直想把数据结构和算法再过一遍，奈何工作以后想要静下心来学习是一种奢侈的想法。</h5><h5 id=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"><a href=\"#最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\" class=\"headerlink\" title=\"最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。\"></a>最近断断续续把链表这种最基础的数据结构撕开了揉碎了自己过了一遍，算作备忘吧，如果对你有用，更加荣幸。</h5><h3 id=\"链表及其变体的特点\"><a href=\"#链表及其变体的特点\" class=\"headerlink\" title=\"链表及其变体的特点\"></a>链表及其变体的特点</h3><p><img src=\"/2018/10/18/手撕链表/链表类型和优势.png\" alt=\"链表类型和优势\"><br>大概的一个意思，其实说来就是，双向便于回溯找到某节点前一个节点；带头节点（也叫哨兵节点）便于处理边界节点逻辑，统一代码逻辑；循环从任意一个节点开<br>都可以遍历整个链表。当然越复杂占用空间越多，但是能大幅度优化时间复杂度，这点空间付出是很值得的。</p>\n<h3 id=\"链表成员变量方法示意图\"><a href=\"#链表成员变量方法示意图\" class=\"headerlink\" title=\"链表成员变量方法示意图\"></a>链表成员变量方法示意图</h3><p><img src=\"/2018/10/18/手撕链表/LinkedList.png\" alt=\"LinkedList\"></p>\n<p>基于Jdk 8 中的LinkedList源码。<br>可以看到Jdk 8 中的链表实现了List 和 Dueue（双端队列）接口（其他序列化通用接口等忽略）。<br>核心操作图中已经标出来。下面通过初次想法对比jdk实现，做出总结和对比。</p>\n<h4 id=\"1-linkFirst\"><a href=\"#1-linkFirst\" class=\"headerlink\" title=\"1. linkFirst\"></a>1. linkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkFirst(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = head;</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        head.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private void linkFirst(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</span><br><span class=\"line\">    first = newNode;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        last = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        f.prev = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>在jdk中搞成private，不对外暴露这个方法，应该是基于链表通用方法名考虑，减少有歧义的方法入口</li>\n<li>jdk中节点初始化是双向链表节点的构造函数，将节点前后关系在构造时候维护代码更简洁，<br>更合理</li>\n<li><p>关于modCount，在其父类AbstractList中有如下注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span><br><span class=\"line\"> * Structural modifications are those that change the size of the</span><br><span class=\"line\"> * list, or otherwise perturb it in such a fashion that iterations in</span><br><span class=\"line\"> * progress may yield incorrect results.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This field is used by the iterator and list iterator implementation</span><br><span class=\"line\"> * returned by the &#123;@code iterator&#125; and &#123;@code listIterator&#125; methods.</span><br><span class=\"line\"> * If the value of this field changes unexpectedly, the iterator (or list</span><br><span class=\"line\"> * iterator) will throw a &#123;@code ConcurrentModificationException&#125; in</span><br><span class=\"line\"> * response to the &#123;@code next&#125;, &#123;@code remove&#125;, &#123;@code previous&#125;,</span><br><span class=\"line\"> * &#123;@code set&#125; or &#123;@code add&#125; operations.  This provides</span><br><span class=\"line\"> * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in</span><br><span class=\"line\"> * the face of concurrent modification during iteration.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass</span><br><span class=\"line\"> * wishes to provide fail-fast iterators (and list iterators), then it</span><br><span class=\"line\"> * merely has to increment this field in its &#123;@code add(int, E)&#125; and</span><br><span class=\"line\"> * &#123;@code remove(int)&#125; methods (and any other methods that it overrides</span><br><span class=\"line\"> * that result in structural modifications to the list).  A single call to</span><br><span class=\"line\"> * &#123;@code add(int, E)&#125; or &#123;@code remove(int)&#125; must add no more than</span><br><span class=\"line\"> * one to this field, or the iterators (and list iterators) will throw</span><br><span class=\"line\"> * bogus &#123;@code ConcurrentModificationExceptions&#125;.  If an implementation</span><br><span class=\"line\"> * does not wish to provide fail-fast iterators, this field may be</span><br><span class=\"line\"> * ignored.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected transient int modCount = 0;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>modCount为list结构修改次数。</li>\n<li>结构修改 -&gt; 改变大小 或者在迭代过程中可能返回错误结果的操作（也就是多线程状态下<br>对当前集合的不同步修改，比如你在迭代遍历某一集合过程中，另一个线程增删改了这个集合）</li>\n<li>iterator 和 listIterator 会用到，遍历过程中该值如果变化，<br>抛出ConcurrentModificationException</li>\n<li>fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个<br>集合的内容进行操作时，就可能会产生fail-fast事件。<br>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所<br>改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，<br>产生fail-fast事件。</li>\n<li>在子类中是可选实现的，如果在迭代过程中需要实现“快速失败”机制，add和remove需要<br>对该值做修改。<h4 id=\"2-linkLast\"><a href=\"#2-linkLast\" class=\"headerlink\" title=\"2. linkLast\"></a>2. linkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkLast(T t)&#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; item = tail;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">        tail.next = item;</span><br><span class=\"line\">    &#125; else &#123;// empty list</span><br><span class=\"line\">        head = tNode;</span><br><span class=\"line\">        tail = tNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkLast(E e) &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk这个是default，也就是说本包中可以调用，之所以不是private，可能是因为在末尾添加元素<br>是链表基础操作（猜的，也可能是哪位印度哥哥懒得搞了）</li>\n</ul>\n<h4 id=\"3-linkBefore\"><a href=\"#3-linkBefore\" class=\"headerlink\" title=\"3. linkBefore\"></a>3. linkBefore</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public void linkBefore(T t, Node&lt;T&gt; item) &#123;</span><br><span class=\"line\">    Node&lt;T&gt; tNode = new Node&lt;T&gt;(t);</span><br><span class=\"line\">    if (item != null) &#123;</span><br><span class=\"line\">        Node&lt;T&gt; prev = item.prev;</span><br><span class=\"line\">        if (prev == null) &#123;// item is head node</span><br><span class=\"line\">            linkFirst(t);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            prev.next = tNode;</span><br><span class=\"line\">            tNode.prev = prev;</span><br><span class=\"line\">            tNode.next = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node item is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class=\"line\">    // assert succ != null;</span><br><span class=\"line\">    final Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">    succ.prev = newNode;</span><br><span class=\"line\">    if (pred == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        pred.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>我写的多了判空，而jdk中这个作为底层操作，在上层调用时候做的判空。这里也启发我们，<br>基础操作和逻辑操作最好有个分离，这个对于设计工程方面有很重要的意义。</li>\n</ul>\n<h4 id=\"4-unlinkFirst\"><a href=\"#4-unlinkFirst\" class=\"headerlink\" title=\"4. unlinkFirst\"></a>4. unlinkFirst</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkFirst(Node&lt;T&gt; f)&#123;</span><br><span class=\"line\">    T val = f.val;</span><br><span class=\"line\">    if (f != null) &#123;</span><br><span class=\"line\">        head = f.next;</span><br><span class=\"line\">        f.val = null;</span><br><span class=\"line\">        f.next = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class=\"line\">    // assert f == first &amp;&amp; f != null;</span><br><span class=\"line\">    final E element = f.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = f.next;</span><br><span class=\"line\">    f.item = null;</span><br><span class=\"line\">    f.next = null; // help GC</span><br><span class=\"line\">    first = next;</span><br><span class=\"line\">    if (next == null)</span><br><span class=\"line\">        last = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        next.prev = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>设计到删除操作的时候，虽然java内存管理交给了虚拟接，但是不当的内存占用仍然可能会导致<br>OOM(OutOfMemory) Error f.next = null; 后面的help GC 和精妙，因为这里不是触发GC<br>而是对GC有帮助而已，是否进行GC不是这里能决定的。<a href=\"https://blog.csdn.net/levena/article/details/78318830\" target=\"_blank\" rel=\"noopener\">(相关资料)</a></li>\n</ul>\n<h4 id=\"5-unlinkLast\"><a href=\"#5-unlinkLast\" class=\"headerlink\" title=\"5. unlinkLast\"></a>5. unlinkLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T unlinkLast(Node&lt;T&gt; l)&#123;</span><br><span class=\"line\">    T val = l.val;</span><br><span class=\"line\">    if (l != null) &#123;</span><br><span class=\"line\">        tail = l.prev;</span><br><span class=\"line\">        l.prev = null;</span><br><span class=\"line\">        l.val = null;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">private E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class=\"line\">    // assert l == last &amp;&amp; l != null;</span><br><span class=\"line\">    final E element = l.item;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = l.prev;</span><br><span class=\"line\">    l.item = null;</span><br><span class=\"line\">    l.prev = null; // help GC</span><br><span class=\"line\">    last = prev;</span><br><span class=\"line\">    if (prev == null)</span><br><span class=\"line\">        first = null;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        prev.next = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-unlink\"><a href=\"#6-unlink\" class=\"headerlink\" title=\"6. unlink\"></a>6. unlink</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">    public T unlink(Node&lt;T&gt; x)&#123;</span><br><span class=\"line\">        T val = x.val;</span><br><span class=\"line\">        if (x != null) &#123;</span><br><span class=\"line\">            Node&lt;T&gt; tNode = x.prev.next;</span><br><span class=\"line\">            x.prev.next = x.next.prev;</span><br><span class=\"line\">            x.next.prev = tNode;</span><br><span class=\"line\">            x.prev = null;</span><br><span class=\"line\">            x.val = null;</span><br><span class=\"line\">            x.next = null;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Node is null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class=\"line\">    // assert x != null;</span><br><span class=\"line\">    final E element = x.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (prev == null) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (next == null) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    x.item = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>jdk中在做删除相关操作是后，会把删除的值返回。</li>\n</ul>\n<h4 id=\"7-getFirst-amp-amp-getLast\"><a href=\"#7-getFirst-amp-amp-getLast\" class=\"headerlink\" title=\"7. getFirst &amp;&amp; getLast\"></a>7. getFirst &amp;&amp; getLast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public T getFirst()&#123;</span><br><span class=\"line\">    if (head != null) &#123;</span><br><span class=\"line\">        return head.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public T getLast()&#123;</span><br><span class=\"line\">    if (tail != null) &#123;</span><br><span class=\"line\">        return tail.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public E getFirst() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; f = first;</span><br><span class=\"line\">    if (f == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return f.item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public E getLast() &#123;</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        throw new NoSuchElementException();</span><br><span class=\"line\">    return l.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>下面就都是public了，是双向链表的基础操作</li>\n<li>jdk在获取不存在的节点时，抛出NoSuchElementException</li>\n</ul>\n<h4 id=\"8-size\"><a href=\"#8-size\" class=\"headerlink\" title=\"8. size\"></a>8. size</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int size()&#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>emmm,这还分析啥</li>\n</ul>\n<h4 id=\"9-indexOf\"><a href=\"#9-indexOf\" class=\"headerlink\" title=\"9. indexOf\"></a>9. indexOf</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o != null) &#123;</span><br><span class=\"line\">        for (Node&lt;T&gt; i = head; i != null; i = i.next) &#123;</span><br><span class=\"line\">            if (i.val.equals(o)) &#123;</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    if (o == null) &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (x.item == null)</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">            if (o.equals(x.item))</span><br><span class=\"line\">                return index;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>智障了吧，人家找null都要返回第一个null</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"10-clear\"><a href=\"#10-clear\" class=\"headerlink\" title=\"10. clear\"></a>10. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void clear() &#123;</span><br><span class=\"line\">    // Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</span><br><span class=\"line\">    // - helps a generational GC if the discarded nodes inhabit</span><br><span class=\"line\">    //   more than one generation</span><br><span class=\"line\">    // - is sure to free memory even if there is a reachable Iterator</span><br><span class=\"line\">    for (Node&lt;E&gt; x = first; x != null; ) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">        x.item = null;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">        x = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    first = last = null;</span><br><span class=\"line\">    size = 0;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里说清空链表中所有</li>\n<li>为什么参数变成了Object，而不继续使用泛型了呢？（题主觉得，泛型参数也是继承自Object的<br>，一方面为了更通用，再有泛型用在编写代码时候就能确定类型的场景，另一方面，泛型比较的话，<br>需要这样<t extends=\"\" comparable=\"\">，这个就局限了某些不实现Comparable对象。个人观点，轻拍）</t></li>\n<li>返回-1这种风格很像C系，也能看出来当时C对java的影响</li>\n</ul>\n<h4 id=\"11-clear\"><a href=\"#11-clear\" class=\"headerlink\" title=\"11. clear\"></a>11. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Removes all of the elements from this list.</span><br><span class=\"line\"> * The list will be empty after this call returns.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    int numNew = a.length;</span><br><span class=\"line\">    if (numNew == 0)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;E&gt; pred, succ;</span><br><span class=\"line\">    if (index == size) &#123;</span><br><span class=\"line\">        succ = null;</span><br><span class=\"line\">        pred = last;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        succ = node(index);</span><br><span class=\"line\">        pred = succ.prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Object o : a) &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;</span><br><span class=\"line\">        Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);</span><br><span class=\"line\">        if (pred == null)</span><br><span class=\"line\">            first = newNode;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            pred.next = newNode;</span><br><span class=\"line\">        pred = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (succ == null) &#123;</span><br><span class=\"line\">        last = pred;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        pred.next = succ;</span><br><span class=\"line\">        succ.prev = pred;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    size += numNew;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void checkPositionIndex(int index) &#123;</span><br><span class=\"line\">    if (!isPositionIndex(index))</span><br><span class=\"line\">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private boolean isPositionIndex(int index) &#123;</span><br><span class=\"line\">    return index &gt;= 0 &amp;&amp; index &lt;= size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>allAll默认是在最后添加Collection的子类</li>\n<li>添加都是把集合对象通过toArray方法转化成数组，然后添加</li>\n<li>对index的位置有越界检查</li>\n</ul>\n<h4 id=\"12-clear\"><a href=\"#12-clear\" class=\"headerlink\" title=\"12. clear\"></a>12. clear</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这里在查找的时候用到了双向链表的特性，先二分，看Node在前半还是后半。</li>\n<li>JDK中很多出除法运算都是用位移操作代替了，网上怎么说的都有，有的说直接*更快，有的说<br>位移更快。这个要涉及到操作系统，和操作系统位数也有关系。编译成汇编代码后，看机器指令<br>是如何表达的。普遍从效率上看，使用移位指令有更高的效率，因为移位指令占2个机器周期，<br>而乘除法指令占4个机器周期。从硬件上看，移位对硬件更容易实现，所以会用移位，<br>移一位就乘2,这种乘法当然考虑移位了。</li>\n</ul>\n<h3 id=\"常见链表相关操作实现\"><a href=\"#常见链表相关操作实现\" class=\"headerlink\" title=\"常见链表相关操作实现\"></a>常见链表相关操作实现</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// train</span><br><span class=\"line\">Node node(int index)&#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt;= size ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node e = head;</span><br><span class=\"line\">    for (int i = 0; i &lt; index; i++) &#123;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//JDK</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">    // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        return x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：　</p>\n<ul>\n<li>这</li>\n</ul>\n"},{"title":"[翻译]可检查异常：Java最大的错误","date":"2019-09-25T16:02:02.000Z","updated":"2019-09-27T16:27:32.000Z","comments":1,"_content":"{% blockquote %}\n原文链接：http://literatejava.com/exceptions/checked-exceptions-javas-biggest-mistake/\n{% endblockquote %}\n\n可检查异常一直以来都是java语言中备受争议一个特性。\n\n拥趸者宣称可检查异常能保证程序能在在运行中检查出异常，并且从程序异常中恢复。\n反对者却说即便“catch”代码块存在，但程序几乎不可能从异常中恢复，而且成为一个经常出错的点。\n更加之Java 8之后，新增了lambdas表达式的特性，是不是可检查异常在java世界中正变成一个鸡肋的特性？\n\n### java设置可检查异常特性的初衷\n\n90年代中期，James Gosling在Sun公司提出了一种新的语言。当时，在c++编程中要求每个函数的返回都要检查错误。他认为必须有一个更好的解决方案，\n就在这种新的Java语言中创建了异常的概念。\n\n可检查异常的本来目的是为了做本地标记并强制开发者去处理的可能发生的异常。可检查异常必须在方法声明时标注（方法后throw），否则必须在代码里去处理（try-catch）。\n设计这种模式的目的是为了增强软件的可靠性和恢复性。期望从除了成功之外的其他可预见意外结果中“恢复”程序的运行，比如在尝试付款时抛出资金不足（InsufficientFundsException）\n的可检查异常。至于需要做哪些操作让程序“恢复”，就很难去搞清楚了。（因为你付款失败，所以我catch里给你账户上补钱，让你付款成果？虽然你长得丑，但是你想得美。）\n\n运行时异常也包括在java中。因为空指针异常NPE，数据错误或者非法状态、非法访问这些错误可能在代码运行过程中的某些地方产生，所以他们都是运行时异常的子类。\n\n运行时异常不需要声明就可以在任何地方抛出，比起可检查异常更方便。但是运行时异常可以代替可检查异常吗？\n\n### 弊端\n这里的关键点在于，运行时异常和可检查异常在功能上是等价的。区别在于运行时异常不能处理或者从异常中恢复而可检查异常可以。\n\n对可检查异常最大的争议点在于，大多数异常都无法恢复的。简单来说，我们并没有发生异常的子系统代码。我们看不到子系统的具体实现，所以我们并不能对它负责，\n更无法修复它。\n\n在JDBC (SQLException)和EJB中的RMI (RemoteException)中体现的最为突出。与按照最初可检查异常设计的明确可修复的意外情况不同，\n这些强制的普遍的系统可靠性问题事实上时并不能被修复的异常，被到处声明。（java代码里一堆没有的catch，有些问题catch下来你也没辙，但是不catch编译都不能通过）\n\n对于任何一个方法来说，它可能出现的异常包括它调用的所有子方法可能发生的异常。在一个方法上声明这么多可能存在的异常，\n让开发者去看这些通过调用树传上来的异常，已经不能提供一个明确的本方法相关的重点给开发者了。\n\n大多数EJB开发人员都经历过这种声明的异常，在方法相关的每一层或者整个代码库中都必须声明。（尤其底层）调用一个抛出不同异常的方法，需要修改大量于其相关的方法。\n\n许多开发人员被告知尽量捕获低级异常，并将它们作为高级(应用级)可检查异常重新抛出。这样做需要每个项目多出2000个以上没有任何功能性的catch-throw”代码块。\n\n这样就导致生吞异常、隐藏异常原因、重复打印日志和返回未初始化数据或者返回空指针变得很普遍。大多数项目可能会出现600+的上述编码错误或完全错误的用法。\n\n最终，开发者反对代码中出现大量的已经变成许多错误源头的catch代码块。\n\n###  可检查异常 - 与函数式编程不兼容\n\n然后我们迎来了Java 8，它提供了新的函数式编程特性，比如lambdas表达式、Streams流和组合函数。\n\n这些特性建立在泛型的基础上，参数和返回类型被泛型化，因此迭代操作和流操作(forEach、map、flatMap)可以通过共同的操作实现，而不用管对象类型时什么。\n\n但是，与数据类型不同，声明的异常不能泛型化。\n\n在Java中不能提供一个用lambda声明某个可检查的异常流操作(例如stream .map)，并显式的将该可检查异常传递给上下文代码。\n\n对可检查异常来所最重要的一点在于，所有介于一个throw和接收catch中间的代码块被强制要求声明异常。\n\n这个问题通过将可检查异常“包装”在RuntimeException运行时异常中解决，隐藏了异常的原始类型，通过对具体的异常“catch”代码块渲染包装来应对原生的异常概念，\n使之失效。\n\nFinally we can capture Java’s new philosophy in a nutshell, by noting that none of the new “functional interfaces” \nin Java 8 declare checked exceptions.\n最后，通过注意到Java 8中没有一个新的函数式接口（“functional interfaces”）声明可检查异常这个特点，我们可以简单的抓住Java新哲学的核心\n（新核心是什么？简洁简洁简洁！java设计者终于意识到这个问题了。避免可检查异常引出的大段catch无用代码。）ji'shi\n\n### 结论\n\n与早期语言相比，Java中的异常机制主要带来了可靠性和严谨的错误处理方面的优势。Java保证了提供可靠的服务和商业软件，但c++永远不可能做到这一点。\n\n可检查异常最初的设计意图是处理意外事件而不是程序错误。值得称道的目的是重点突出了明确可预测的错误点(无法连接、找不到文件等)，并确保开发人员必须处理这些问题。\n\n但强制声明大量的系统错误和不可恢复的故障却从未包含的在最初的设计概念里。这些被声明为可检查异常的错误是不可能被修正的。\n\n通常在代码中和EJB应用或者web应用、Swing、AWT容器应用中可能出现故障，已经通过提供一个最外层的请求失败（“failed request”）异常处理机制来解决这个异常。应该采取最基本的正确策略是回滚事务并返回错误信息。\n\n***运行时异常接受任何可检查异常可能存在的异常处理操作，但要避免限制性编码约束。*** 这种机制简化了编码，异常在最外层或者尽可能高的层级去处理的这使得编码工作更容易遵循早期抛出、晚期捕获的最佳实践。\n\n一些领先的Java框架和有影响力的代码实践，现在已经明确地移除了可检查异常机制的使用。Spring、Hibernate和现代Java框架开发商只使用运行时异常，运行时异常的便利性是它大受欢迎的主要因素。\n\n知名java大牛Josh Bloch (Java Collections framework研发者)、Rod Johnson、Anders Hejlsberg (c#之父)、Gavin King和Stephen Colebourn (JodaTime研发者)都可检查异常的使用。\n\n现在，在Java 8中，lambdas是向前迈出的基本一步。这些语言特性使得控制流从内部的函数式操作中抽象出来。正如我们已经看到的，这些新特性使得可检查异常，包括它的声明和异常处理机制的立刻显得过时了。\n\n对于开发人员来说，注意代码的可靠性和预先诊断代码可能的出现故障的点(或意外时间事件)是很重要的，例如打开文件、连接数据库等操作。如果我们能在这方面提供一个良好实现的错误信息，我们可能达到软件工程师成就的顶峰——开发有自我诊断能力的软件。\n\n但是，我们应该使用不可检查异常（RuntimeException）来实现这种目的。如果这个异常必须重新抛出，应该坚持使用RuntimeException或者应用特定的异常子类。\n\n正如Stephen Colebourn所说，如果你的项目仍然在使用或提倡可检查异常，那么你的java技能已经过时5-10年了。Java已经有了长足的进步。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/翻译-可检查异常：Java最大的错误.md","raw":"---\ntitle: '[翻译]可检查异常：Java最大的错误'\ndate: 2019-09-26 00:02:02\nupdated: 2019-09-28 00:27:32\ncomments: true\ntags: \n    - java\n    - 翻译\n    - 异常\ncategories: java\n---\n{% blockquote %}\n原文链接：http://literatejava.com/exceptions/checked-exceptions-javas-biggest-mistake/\n{% endblockquote %}\n\n可检查异常一直以来都是java语言中备受争议一个特性。\n\n拥趸者宣称可检查异常能保证程序能在在运行中检查出异常，并且从程序异常中恢复。\n反对者却说即便“catch”代码块存在，但程序几乎不可能从异常中恢复，而且成为一个经常出错的点。\n更加之Java 8之后，新增了lambdas表达式的特性，是不是可检查异常在java世界中正变成一个鸡肋的特性？\n\n### java设置可检查异常特性的初衷\n\n90年代中期，James Gosling在Sun公司提出了一种新的语言。当时，在c++编程中要求每个函数的返回都要检查错误。他认为必须有一个更好的解决方案，\n就在这种新的Java语言中创建了异常的概念。\n\n可检查异常的本来目的是为了做本地标记并强制开发者去处理的可能发生的异常。可检查异常必须在方法声明时标注（方法后throw），否则必须在代码里去处理（try-catch）。\n设计这种模式的目的是为了增强软件的可靠性和恢复性。期望从除了成功之外的其他可预见意外结果中“恢复”程序的运行，比如在尝试付款时抛出资金不足（InsufficientFundsException）\n的可检查异常。至于需要做哪些操作让程序“恢复”，就很难去搞清楚了。（因为你付款失败，所以我catch里给你账户上补钱，让你付款成果？虽然你长得丑，但是你想得美。）\n\n运行时异常也包括在java中。因为空指针异常NPE，数据错误或者非法状态、非法访问这些错误可能在代码运行过程中的某些地方产生，所以他们都是运行时异常的子类。\n\n运行时异常不需要声明就可以在任何地方抛出，比起可检查异常更方便。但是运行时异常可以代替可检查异常吗？\n\n### 弊端\n这里的关键点在于，运行时异常和可检查异常在功能上是等价的。区别在于运行时异常不能处理或者从异常中恢复而可检查异常可以。\n\n对可检查异常最大的争议点在于，大多数异常都无法恢复的。简单来说，我们并没有发生异常的子系统代码。我们看不到子系统的具体实现，所以我们并不能对它负责，\n更无法修复它。\n\n在JDBC (SQLException)和EJB中的RMI (RemoteException)中体现的最为突出。与按照最初可检查异常设计的明确可修复的意外情况不同，\n这些强制的普遍的系统可靠性问题事实上时并不能被修复的异常，被到处声明。（java代码里一堆没有的catch，有些问题catch下来你也没辙，但是不catch编译都不能通过）\n\n对于任何一个方法来说，它可能出现的异常包括它调用的所有子方法可能发生的异常。在一个方法上声明这么多可能存在的异常，\n让开发者去看这些通过调用树传上来的异常，已经不能提供一个明确的本方法相关的重点给开发者了。\n\n大多数EJB开发人员都经历过这种声明的异常，在方法相关的每一层或者整个代码库中都必须声明。（尤其底层）调用一个抛出不同异常的方法，需要修改大量于其相关的方法。\n\n许多开发人员被告知尽量捕获低级异常，并将它们作为高级(应用级)可检查异常重新抛出。这样做需要每个项目多出2000个以上没有任何功能性的catch-throw”代码块。\n\n这样就导致生吞异常、隐藏异常原因、重复打印日志和返回未初始化数据或者返回空指针变得很普遍。大多数项目可能会出现600+的上述编码错误或完全错误的用法。\n\n最终，开发者反对代码中出现大量的已经变成许多错误源头的catch代码块。\n\n###  可检查异常 - 与函数式编程不兼容\n\n然后我们迎来了Java 8，它提供了新的函数式编程特性，比如lambdas表达式、Streams流和组合函数。\n\n这些特性建立在泛型的基础上，参数和返回类型被泛型化，因此迭代操作和流操作(forEach、map、flatMap)可以通过共同的操作实现，而不用管对象类型时什么。\n\n但是，与数据类型不同，声明的异常不能泛型化。\n\n在Java中不能提供一个用lambda声明某个可检查的异常流操作(例如stream .map)，并显式的将该可检查异常传递给上下文代码。\n\n对可检查异常来所最重要的一点在于，所有介于一个throw和接收catch中间的代码块被强制要求声明异常。\n\n这个问题通过将可检查异常“包装”在RuntimeException运行时异常中解决，隐藏了异常的原始类型，通过对具体的异常“catch”代码块渲染包装来应对原生的异常概念，\n使之失效。\n\nFinally we can capture Java’s new philosophy in a nutshell, by noting that none of the new “functional interfaces” \nin Java 8 declare checked exceptions.\n最后，通过注意到Java 8中没有一个新的函数式接口（“functional interfaces”）声明可检查异常这个特点，我们可以简单的抓住Java新哲学的核心\n（新核心是什么？简洁简洁简洁！java设计者终于意识到这个问题了。避免可检查异常引出的大段catch无用代码。）ji'shi\n\n### 结论\n\n与早期语言相比，Java中的异常机制主要带来了可靠性和严谨的错误处理方面的优势。Java保证了提供可靠的服务和商业软件，但c++永远不可能做到这一点。\n\n可检查异常最初的设计意图是处理意外事件而不是程序错误。值得称道的目的是重点突出了明确可预测的错误点(无法连接、找不到文件等)，并确保开发人员必须处理这些问题。\n\n但强制声明大量的系统错误和不可恢复的故障却从未包含的在最初的设计概念里。这些被声明为可检查异常的错误是不可能被修正的。\n\n通常在代码中和EJB应用或者web应用、Swing、AWT容器应用中可能出现故障，已经通过提供一个最外层的请求失败（“failed request”）异常处理机制来解决这个异常。应该采取最基本的正确策略是回滚事务并返回错误信息。\n\n***运行时异常接受任何可检查异常可能存在的异常处理操作，但要避免限制性编码约束。*** 这种机制简化了编码，异常在最外层或者尽可能高的层级去处理的这使得编码工作更容易遵循早期抛出、晚期捕获的最佳实践。\n\n一些领先的Java框架和有影响力的代码实践，现在已经明确地移除了可检查异常机制的使用。Spring、Hibernate和现代Java框架开发商只使用运行时异常，运行时异常的便利性是它大受欢迎的主要因素。\n\n知名java大牛Josh Bloch (Java Collections framework研发者)、Rod Johnson、Anders Hejlsberg (c#之父)、Gavin King和Stephen Colebourn (JodaTime研发者)都可检查异常的使用。\n\n现在，在Java 8中，lambdas是向前迈出的基本一步。这些语言特性使得控制流从内部的函数式操作中抽象出来。正如我们已经看到的，这些新特性使得可检查异常，包括它的声明和异常处理机制的立刻显得过时了。\n\n对于开发人员来说，注意代码的可靠性和预先诊断代码可能的出现故障的点(或意外时间事件)是很重要的，例如打开文件、连接数据库等操作。如果我们能在这方面提供一个良好实现的错误信息，我们可能达到软件工程师成就的顶峰——开发有自我诊断能力的软件。\n\n但是，我们应该使用不可检查异常（RuntimeException）来实现这种目的。如果这个异常必须重新抛出，应该坚持使用RuntimeException或者应用特定的异常子类。\n\n正如Stephen Colebourn所说，如果你的项目仍然在使用或提倡可检查异常，那么你的java技能已经过时5-10年了。Java已经有了长足的进步。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"翻译-可检查异常：Java最大的错误","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2k000whgj3t2i7pck4","content":"<blockquote><p>原文链接：<a href=\"http://literatejava.com/exceptions/checked-exceptions-javas-biggest-mistake/\" target=\"_blank\" rel=\"noopener\">http://literatejava.com/exceptions/checked-exceptions-javas-biggest-mistake/</a></p>\n</blockquote>\n<p>可检查异常一直以来都是java语言中备受争议一个特性。</p>\n<p>拥趸者宣称可检查异常能保证程序能在在运行中检查出异常，并且从程序异常中恢复。<br>反对者却说即便“catch”代码块存在，但程序几乎不可能从异常中恢复，而且成为一个经常出错的点。<br>更加之Java 8之后，新增了lambdas表达式的特性，是不是可检查异常在java世界中正变成一个鸡肋的特性？</p>\n<h3 id=\"java设置可检查异常特性的初衷\"><a href=\"#java设置可检查异常特性的初衷\" class=\"headerlink\" title=\"java设置可检查异常特性的初衷\"></a>java设置可检查异常特性的初衷</h3><p>90年代中期，James Gosling在Sun公司提出了一种新的语言。当时，在c++编程中要求每个函数的返回都要检查错误。他认为必须有一个更好的解决方案，<br>就在这种新的Java语言中创建了异常的概念。</p>\n<p>可检查异常的本来目的是为了做本地标记并强制开发者去处理的可能发生的异常。可检查异常必须在方法声明时标注（方法后throw），否则必须在代码里去处理（try-catch）。<br>设计这种模式的目的是为了增强软件的可靠性和恢复性。期望从除了成功之外的其他可预见意外结果中“恢复”程序的运行，比如在尝试付款时抛出资金不足（InsufficientFundsException）<br>的可检查异常。至于需要做哪些操作让程序“恢复”，就很难去搞清楚了。（因为你付款失败，所以我catch里给你账户上补钱，让你付款成果？虽然你长得丑，但是你想得美。）</p>\n<p>运行时异常也包括在java中。因为空指针异常NPE，数据错误或者非法状态、非法访问这些错误可能在代码运行过程中的某些地方产生，所以他们都是运行时异常的子类。</p>\n<p>运行时异常不需要声明就可以在任何地方抛出，比起可检查异常更方便。但是运行时异常可以代替可检查异常吗？</p>\n<h3 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h3><p>这里的关键点在于，运行时异常和可检查异常在功能上是等价的。区别在于运行时异常不能处理或者从异常中恢复而可检查异常可以。</p>\n<p>对可检查异常最大的争议点在于，大多数异常都无法恢复的。简单来说，我们并没有发生异常的子系统代码。我们看不到子系统的具体实现，所以我们并不能对它负责，<br>更无法修复它。</p>\n<p>在JDBC (SQLException)和EJB中的RMI (RemoteException)中体现的最为突出。与按照最初可检查异常设计的明确可修复的意外情况不同，<br>这些强制的普遍的系统可靠性问题事实上时并不能被修复的异常，被到处声明。（java代码里一堆没有的catch，有些问题catch下来你也没辙，但是不catch编译都不能通过）</p>\n<p>对于任何一个方法来说，它可能出现的异常包括它调用的所有子方法可能发生的异常。在一个方法上声明这么多可能存在的异常，<br>让开发者去看这些通过调用树传上来的异常，已经不能提供一个明确的本方法相关的重点给开发者了。</p>\n<p>大多数EJB开发人员都经历过这种声明的异常，在方法相关的每一层或者整个代码库中都必须声明。（尤其底层）调用一个抛出不同异常的方法，需要修改大量于其相关的方法。</p>\n<p>许多开发人员被告知尽量捕获低级异常，并将它们作为高级(应用级)可检查异常重新抛出。这样做需要每个项目多出2000个以上没有任何功能性的catch-throw”代码块。</p>\n<p>这样就导致生吞异常、隐藏异常原因、重复打印日志和返回未初始化数据或者返回空指针变得很普遍。大多数项目可能会出现600+的上述编码错误或完全错误的用法。</p>\n<p>最终，开发者反对代码中出现大量的已经变成许多错误源头的catch代码块。</p>\n<h3 id=\"可检查异常-与函数式编程不兼容\"><a href=\"#可检查异常-与函数式编程不兼容\" class=\"headerlink\" title=\"可检查异常 - 与函数式编程不兼容\"></a>可检查异常 - 与函数式编程不兼容</h3><p>然后我们迎来了Java 8，它提供了新的函数式编程特性，比如lambdas表达式、Streams流和组合函数。</p>\n<p>这些特性建立在泛型的基础上，参数和返回类型被泛型化，因此迭代操作和流操作(forEach、map、flatMap)可以通过共同的操作实现，而不用管对象类型时什么。</p>\n<p>但是，与数据类型不同，声明的异常不能泛型化。</p>\n<p>在Java中不能提供一个用lambda声明某个可检查的异常流操作(例如stream .map)，并显式的将该可检查异常传递给上下文代码。</p>\n<p>对可检查异常来所最重要的一点在于，所有介于一个throw和接收catch中间的代码块被强制要求声明异常。</p>\n<p>这个问题通过将可检查异常“包装”在RuntimeException运行时异常中解决，隐藏了异常的原始类型，通过对具体的异常“catch”代码块渲染包装来应对原生的异常概念，<br>使之失效。</p>\n<p>Finally we can capture Java’s new philosophy in a nutshell, by noting that none of the new “functional interfaces”<br>in Java 8 declare checked exceptions.<br>最后，通过注意到Java 8中没有一个新的函数式接口（“functional interfaces”）声明可检查异常这个特点，我们可以简单的抓住Java新哲学的核心<br>（新核心是什么？简洁简洁简洁！java设计者终于意识到这个问题了。避免可检查异常引出的大段catch无用代码。）ji’shi</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>与早期语言相比，Java中的异常机制主要带来了可靠性和严谨的错误处理方面的优势。Java保证了提供可靠的服务和商业软件，但c++永远不可能做到这一点。</p>\n<p>可检查异常最初的设计意图是处理意外事件而不是程序错误。值得称道的目的是重点突出了明确可预测的错误点(无法连接、找不到文件等)，并确保开发人员必须处理这些问题。</p>\n<p>但强制声明大量的系统错误和不可恢复的故障却从未包含的在最初的设计概念里。这些被声明为可检查异常的错误是不可能被修正的。</p>\n<p>通常在代码中和EJB应用或者web应用、Swing、AWT容器应用中可能出现故障，已经通过提供一个最外层的请求失败（“failed request”）异常处理机制来解决这个异常。应该采取最基本的正确策略是回滚事务并返回错误信息。</p>\n<p><strong><em>运行时异常接受任何可检查异常可能存在的异常处理操作，但要避免限制性编码约束。</em></strong> 这种机制简化了编码，异常在最外层或者尽可能高的层级去处理的这使得编码工作更容易遵循早期抛出、晚期捕获的最佳实践。</p>\n<p>一些领先的Java框架和有影响力的代码实践，现在已经明确地移除了可检查异常机制的使用。Spring、Hibernate和现代Java框架开发商只使用运行时异常，运行时异常的便利性是它大受欢迎的主要因素。</p>\n<p>知名java大牛Josh Bloch (Java Collections framework研发者)、Rod Johnson、Anders Hejlsberg (c#之父)、Gavin King和Stephen Colebourn (JodaTime研发者)都可检查异常的使用。</p>\n<p>现在，在Java 8中，lambdas是向前迈出的基本一步。这些语言特性使得控制流从内部的函数式操作中抽象出来。正如我们已经看到的，这些新特性使得可检查异常，包括它的声明和异常处理机制的立刻显得过时了。</p>\n<p>对于开发人员来说，注意代码的可靠性和预先诊断代码可能的出现故障的点(或意外时间事件)是很重要的，例如打开文件、连接数据库等操作。如果我们能在这方面提供一个良好实现的错误信息，我们可能达到软件工程师成就的顶峰——开发有自我诊断能力的软件。</p>\n<p>但是，我们应该使用不可检查异常（RuntimeException）来实现这种目的。如果这个异常必须重新抛出，应该坚持使用RuntimeException或者应用特定的异常子类。</p>\n<p>正如Stephen Colebourn所说，如果你的项目仍然在使用或提倡可检查异常，那么你的java技能已经过时5-10年了。Java已经有了长足的进步。</p>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote><p>原文链接：<a href=\"http://literatejava.com/exceptions/checked-exceptions-javas-biggest-mistake/\" target=\"_blank\" rel=\"noopener\">http://literatejava.com/exceptions/checked-exceptions-javas-biggest-mistake/</a></p>\n</blockquote>\n<p>可检查异常一直以来都是java语言中备受争议一个特性。</p>\n<p>拥趸者宣称可检查异常能保证程序能在在运行中检查出异常，并且从程序异常中恢复。<br>反对者却说即便“catch”代码块存在，但程序几乎不可能从异常中恢复，而且成为一个经常出错的点。<br>更加之Java 8之后，新增了lambdas表达式的特性，是不是可检查异常在java世界中正变成一个鸡肋的特性？</p>\n<h3 id=\"java设置可检查异常特性的初衷\"><a href=\"#java设置可检查异常特性的初衷\" class=\"headerlink\" title=\"java设置可检查异常特性的初衷\"></a>java设置可检查异常特性的初衷</h3><p>90年代中期，James Gosling在Sun公司提出了一种新的语言。当时，在c++编程中要求每个函数的返回都要检查错误。他认为必须有一个更好的解决方案，<br>就在这种新的Java语言中创建了异常的概念。</p>\n<p>可检查异常的本来目的是为了做本地标记并强制开发者去处理的可能发生的异常。可检查异常必须在方法声明时标注（方法后throw），否则必须在代码里去处理（try-catch）。<br>设计这种模式的目的是为了增强软件的可靠性和恢复性。期望从除了成功之外的其他可预见意外结果中“恢复”程序的运行，比如在尝试付款时抛出资金不足（InsufficientFundsException）<br>的可检查异常。至于需要做哪些操作让程序“恢复”，就很难去搞清楚了。（因为你付款失败，所以我catch里给你账户上补钱，让你付款成果？虽然你长得丑，但是你想得美。）</p>\n<p>运行时异常也包括在java中。因为空指针异常NPE，数据错误或者非法状态、非法访问这些错误可能在代码运行过程中的某些地方产生，所以他们都是运行时异常的子类。</p>\n<p>运行时异常不需要声明就可以在任何地方抛出，比起可检查异常更方便。但是运行时异常可以代替可检查异常吗？</p>\n<h3 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h3><p>这里的关键点在于，运行时异常和可检查异常在功能上是等价的。区别在于运行时异常不能处理或者从异常中恢复而可检查异常可以。</p>\n<p>对可检查异常最大的争议点在于，大多数异常都无法恢复的。简单来说，我们并没有发生异常的子系统代码。我们看不到子系统的具体实现，所以我们并不能对它负责，<br>更无法修复它。</p>\n<p>在JDBC (SQLException)和EJB中的RMI (RemoteException)中体现的最为突出。与按照最初可检查异常设计的明确可修复的意外情况不同，<br>这些强制的普遍的系统可靠性问题事实上时并不能被修复的异常，被到处声明。（java代码里一堆没有的catch，有些问题catch下来你也没辙，但是不catch编译都不能通过）</p>\n<p>对于任何一个方法来说，它可能出现的异常包括它调用的所有子方法可能发生的异常。在一个方法上声明这么多可能存在的异常，<br>让开发者去看这些通过调用树传上来的异常，已经不能提供一个明确的本方法相关的重点给开发者了。</p>\n<p>大多数EJB开发人员都经历过这种声明的异常，在方法相关的每一层或者整个代码库中都必须声明。（尤其底层）调用一个抛出不同异常的方法，需要修改大量于其相关的方法。</p>\n<p>许多开发人员被告知尽量捕获低级异常，并将它们作为高级(应用级)可检查异常重新抛出。这样做需要每个项目多出2000个以上没有任何功能性的catch-throw”代码块。</p>\n<p>这样就导致生吞异常、隐藏异常原因、重复打印日志和返回未初始化数据或者返回空指针变得很普遍。大多数项目可能会出现600+的上述编码错误或完全错误的用法。</p>\n<p>最终，开发者反对代码中出现大量的已经变成许多错误源头的catch代码块。</p>\n<h3 id=\"可检查异常-与函数式编程不兼容\"><a href=\"#可检查异常-与函数式编程不兼容\" class=\"headerlink\" title=\"可检查异常 - 与函数式编程不兼容\"></a>可检查异常 - 与函数式编程不兼容</h3><p>然后我们迎来了Java 8，它提供了新的函数式编程特性，比如lambdas表达式、Streams流和组合函数。</p>\n<p>这些特性建立在泛型的基础上，参数和返回类型被泛型化，因此迭代操作和流操作(forEach、map、flatMap)可以通过共同的操作实现，而不用管对象类型时什么。</p>\n<p>但是，与数据类型不同，声明的异常不能泛型化。</p>\n<p>在Java中不能提供一个用lambda声明某个可检查的异常流操作(例如stream .map)，并显式的将该可检查异常传递给上下文代码。</p>\n<p>对可检查异常来所最重要的一点在于，所有介于一个throw和接收catch中间的代码块被强制要求声明异常。</p>\n<p>这个问题通过将可检查异常“包装”在RuntimeException运行时异常中解决，隐藏了异常的原始类型，通过对具体的异常“catch”代码块渲染包装来应对原生的异常概念，<br>使之失效。</p>\n<p>Finally we can capture Java’s new philosophy in a nutshell, by noting that none of the new “functional interfaces”<br>in Java 8 declare checked exceptions.<br>最后，通过注意到Java 8中没有一个新的函数式接口（“functional interfaces”）声明可检查异常这个特点，我们可以简单的抓住Java新哲学的核心<br>（新核心是什么？简洁简洁简洁！java设计者终于意识到这个问题了。避免可检查异常引出的大段catch无用代码。）ji’shi</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>与早期语言相比，Java中的异常机制主要带来了可靠性和严谨的错误处理方面的优势。Java保证了提供可靠的服务和商业软件，但c++永远不可能做到这一点。</p>\n<p>可检查异常最初的设计意图是处理意外事件而不是程序错误。值得称道的目的是重点突出了明确可预测的错误点(无法连接、找不到文件等)，并确保开发人员必须处理这些问题。</p>\n<p>但强制声明大量的系统错误和不可恢复的故障却从未包含的在最初的设计概念里。这些被声明为可检查异常的错误是不可能被修正的。</p>\n<p>通常在代码中和EJB应用或者web应用、Swing、AWT容器应用中可能出现故障，已经通过提供一个最外层的请求失败（“failed request”）异常处理机制来解决这个异常。应该采取最基本的正确策略是回滚事务并返回错误信息。</p>\n<p><strong><em>运行时异常接受任何可检查异常可能存在的异常处理操作，但要避免限制性编码约束。</em></strong> 这种机制简化了编码，异常在最外层或者尽可能高的层级去处理的这使得编码工作更容易遵循早期抛出、晚期捕获的最佳实践。</p>\n<p>一些领先的Java框架和有影响力的代码实践，现在已经明确地移除了可检查异常机制的使用。Spring、Hibernate和现代Java框架开发商只使用运行时异常，运行时异常的便利性是它大受欢迎的主要因素。</p>\n<p>知名java大牛Josh Bloch (Java Collections framework研发者)、Rod Johnson、Anders Hejlsberg (c#之父)、Gavin King和Stephen Colebourn (JodaTime研发者)都可检查异常的使用。</p>\n<p>现在，在Java 8中，lambdas是向前迈出的基本一步。这些语言特性使得控制流从内部的函数式操作中抽象出来。正如我们已经看到的，这些新特性使得可检查异常，包括它的声明和异常处理机制的立刻显得过时了。</p>\n<p>对于开发人员来说，注意代码的可靠性和预先诊断代码可能的出现故障的点(或意外时间事件)是很重要的，例如打开文件、连接数据库等操作。如果我们能在这方面提供一个良好实现的错误信息，我们可能达到软件工程师成就的顶峰——开发有自我诊断能力的软件。</p>\n<p>但是，我们应该使用不可检查异常（RuntimeException）来实现这种目的。如果这个异常必须重新抛出，应该坚持使用RuntimeException或者应用特定的异常子类。</p>\n<p>正如Stephen Colebourn所说，如果你的项目仍然在使用或提倡可检查异常，那么你的java技能已经过时5-10年了。Java已经有了长足的进步。</p>\n"},{"title":"诗开头","comments":1,"date":"2018-07-09T16:27:32.000Z","updated":"2018-07-09T16:27:32.000Z","_content":"# 清平乐·别来春半\n###### ——李煜\n\n### 别来春半,触目柔肠断。\n### 砌下落梅如雪乱，拂了一身还满。\n### 雁来音信无凭，路遥归梦难成。\n### 离恨恰如春草，更行更远还生。\n\n","source":"_posts/诗开头-md.md","raw":"---\ntitle: 诗开头\ncomments: true\ndate: 2018-07-10 00:27:32\nupdated: 2018-07-10 00:27:32\ntags: \n    - 人生不满百 \n    - 诗词\ncategories: 古风\n---\n# 清平乐·别来春半\n###### ——李煜\n\n### 别来春半,触目柔肠断。\n### 砌下落梅如雪乱，拂了一身还满。\n### 雁来音信无凭，路遥归梦难成。\n### 离恨恰如春草，更行更远还生。\n\n","slug":"诗开头-md","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf2k000yhgj3swps2q07","content":"<h1 id=\"清平乐·别来春半\"><a href=\"#清平乐·别来春半\" class=\"headerlink\" title=\"清平乐·别来春半\"></a>清平乐·别来春半</h1><h6 id=\"——李煜\"><a href=\"#——李煜\" class=\"headerlink\" title=\"——李煜\"></a>——李煜</h6><h3 id=\"别来春半-触目柔肠断。\"><a href=\"#别来春半-触目柔肠断。\" class=\"headerlink\" title=\"别来春半,触目柔肠断。\"></a>别来春半,触目柔肠断。</h3><h3 id=\"砌下落梅如雪乱，拂了一身还满。\"><a href=\"#砌下落梅如雪乱，拂了一身还满。\" class=\"headerlink\" title=\"砌下落梅如雪乱，拂了一身还满。\"></a>砌下落梅如雪乱，拂了一身还满。</h3><h3 id=\"雁来音信无凭，路遥归梦难成。\"><a href=\"#雁来音信无凭，路遥归梦难成。\" class=\"headerlink\" title=\"雁来音信无凭，路遥归梦难成。\"></a>雁来音信无凭，路遥归梦难成。</h3><h3 id=\"离恨恰如春草，更行更远还生。\"><a href=\"#离恨恰如春草，更行更远还生。\" class=\"headerlink\" title=\"离恨恰如春草，更行更远还生。\"></a>离恨恰如春草，更行更远还生。</h3>","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"清平乐·别来春半\"><a href=\"#清平乐·别来春半\" class=\"headerlink\" title=\"清平乐·别来春半\"></a>清平乐·别来春半</h1><h6 id=\"——李煜\"><a href=\"#——李煜\" class=\"headerlink\" title=\"——李煜\"></a>——李煜</h6><h3 id=\"别来春半-触目柔肠断。\"><a href=\"#别来春半-触目柔肠断。\" class=\"headerlink\" title=\"别来春半,触目柔肠断。\"></a>别来春半,触目柔肠断。</h3><h3 id=\"砌下落梅如雪乱，拂了一身还满。\"><a href=\"#砌下落梅如雪乱，拂了一身还满。\" class=\"headerlink\" title=\"砌下落梅如雪乱，拂了一身还满。\"></a>砌下落梅如雪乱，拂了一身还满。</h3><h3 id=\"雁来音信无凭，路遥归梦难成。\"><a href=\"#雁来音信无凭，路遥归梦难成。\" class=\"headerlink\" title=\"雁来音信无凭，路遥归梦难成。\"></a>雁来音信无凭，路遥归梦难成。</h3><h3 id=\"离恨恰如春草，更行更远还生。\"><a href=\"#离恨恰如春草，更行更远还生。\" class=\"headerlink\" title=\"离恨恰如春草，更行更远还生。\"></a>离恨恰如春草，更行更远还生。</h3>"},{"title":"java base point and think","comments":1,"date":"2019-03-14T07:50:00.000Z","updated":"2019-03-14T07:50:00.000Z","_content":"#### 有时候走了太久太远，都忘了为什么出发了。\n\n1. 面向过程和面向对象\n    1. 面向过程\n        1. 概：面向对象在我印象里是最初在C中获得的，注重顺序思维，结构化编程，即使封装\n        函数也是为了复用，而不是降低耦合。\n        2. 优点：比面向对象性能更好，不用实例化，节省资源。性能因素占绝对重要性时，\n        优考虑面向过程的开发。\n        3. 缺点：流式思维，不符合客观世界规律，比起面向对象，更难维护、复用和、扩展。\n    2. 面向对象：\n        1. 概：是现实世界关系的抽象，符合现实世界的逻辑规律。\n        2. 优点：抑郁维护复用和扩展。有封装、继承和多态的特性。\n        3. 缺点：资源开销大，性能比面向过程差。\n    3. 言之： 现在除了特别对性能有要求的一些项目，对于更多的业务系统讲，机器资源一般是\n    较为满足的，更注重的是易维护，易扩展，业务系统大概占据了软件开发项目八成，所以在业务系统上，\n    采用面向对象的方式进行开发。（现在的互联网行业人员流动那么大，程序员的编程水平习惯参差不齐，\n    如果还不注重维护性和扩展性的话，那大概就是前人挖坑闪后人，后人欲填其坑，其坑之大之深，难以处之。\n    故后人坑中再掘也，天坑套地坑，后人之后人无穷匮也，故现连环坑。）\n2. Java的特点\n    1. 优点：\n        1. 学习成本底。（相比C和C++吧，比Python还差些 :smile:）\n        2. 面向对象。（C++也是面向对象的，严格的说面向对象是一种思想）\n        3. 平台无关。可移植性好。（只要这个平台有对应的jvm，你只管敲你的Java代码，\n        编译成class后，jvm去生产适配各个平台的机器指令。）\n        4. 可靠性。（因为强类型？怎么就比其他语言更可靠了？质疑）\n        5. 安全性。（和强类型有关，也没有C里指针的各种乱指）\n        6. 多线程支持。（C++没有内置的对多线程的支持，需要调用系统的多线程支持）\n        7. 方便的网络编程。（简化了网络编程是指对JavaWeb方向的扩展么？确实在C里网络编程中的\n        通信一些东西确实比较复杂。）\n        8. 编译与解释并存。（Java确实从解释语言里学了很多，这点是我很欣赏的，知道发展自身，\n        才是生存下去的道理。）\n    2. 缺点：\n        1. 初期性能经常与C系比较，确实差一些，但是现在的java性能已经不能被诟病了。\n        2. 过于形式主义的语法\n\n3. JVM JDK JRE\n    1. JVM（Java Virtual Machine）\n        - 运行java字节码，字节码class文件jvm能理解\n        - 对不同系统有不同实现\n        - class文件只面向jvm，各个平台上都是一样的\n        - 一方面解决了解释型语言效率低问题\n        - 保留了解释性语言可移植性\n        - 在不同平台上不需要重新编译，可以直接运行\n        - .java文件  -- jdk中的javac --> .class文件\n        - .class文件  -- jvm --> 二进制机器码。jvm类加载器首先加载字节码文件，\n        解释器逐行解释执行。但是热点代码会多次被解释，所以引进了JIM(Just In Time)编译器。\n        运行时编译器，完成一次编译以后，字节码对应的机器码保存，下次调用到直接使用。\n        这一部分属于编译后调用，每次重新编译的是解释的部分。\n        - HotSpot 惰性评估(Lazy Evaluation)  热点代码是需要JIT编译的部分\n        JVM根据每次执行的情况收集信息并且相应的优化 执行次数越多，速度越快\n        JDK9引入AOT(Ahead of Time Compilation)编译，直接将字节码编译成机器码，\n        避免了JIT模式下的预热开销。\n        - 支持分层编译和AOT协作使用 ``？？？``   AOT编译质量不如JIT``？？？``\n        - 字节码 和 不同系统的JVM实现 保证了一次编译到处运行\n        - 解释和编译混合（-Xmixed）\n        - JVM会进行上万次调用以收集足够的信息进行高效的编译，client 模式这个门限是 1500 次.Hotspot JVM 内置了两个不同的 JIT compiler，C1 对应前面说的 client 模式，\n        适用于对于启动速度敏感的应用，比如普通 Java 桌面应用；C2 对应 server 模式，\n        它的优化是为长时间运行的服务器端应用设计的\n        - 默认是采用所谓的分层编译（TieredCompilation)\n        - “-Xint” JVM 只进行解释执行，不对代码进行编译,抛弃了 JIT 可能带来的性能优势.\n        - “-Xcomp” JVM 关闭解释器，不要进行解释执行 最大优化级别. 可能会导致 JVM 启动变慢非常多，\n        同时有些 JIT 编译器优化方式，比如分支预测，如果不进行 profiling，往往并不能进行有效优化。\n        - AOT（Ahead-of-Time Compilation），直接将字节码编译成机器代码，\n        这样就避免了 JIT 预热等各方面的开销\n        - 大量 JVM 语言\n    2. JDK\n        - Java Development Kit\n        - 包括JRE\n        - 编译器\n        - 其他工具\n    3. JRE\n        - Java Runtime Environment\n        - 运行已编译java程序\n        - 包括jvm java类库 java命令 其他基础构件\n        - 包含jsp的web程序，也需要jdk，因为需要将JSP转换为Java servlet，需要jsk编译servlet。\n4. Oracle JDK 和 OpenJDK\n    1. Oracle JDK\n        - 不是完全开源的\n        - 更稳定，优化更多，效率可能更高？\n    2. OpenJDK\n        - 开源\n        - GPL许可协议\n\n5. Java和C++的区别\n    1. 共通：面向对象，支持继承封装和多态\n    2. java: 不提供指针访问内存，更安全   类单继承   接口多继承  内存管理机制\n    3. C++： 提供指针   类可以多继承   需要程序员释放内存\n\n6. 字符型常量和字符串常量的区别\n    1.\n    ```java\n    char c = 'c';  String s = \"sss\";\n    ```\n    2. 字符相当于ascII值，可以参加运算。字符串代表地址，即在内存中存放位置。\n    3. char类型占2个字节 2*8bit = 16bit；字符串至少一个，结束标志（这句并不对，\n    在C++中，以\\0作为结束，但是在Java中，String是对象，有长度属性，不需要表示结尾）\n\n7. 构造器 Constructor 是否可被 override\n    - 父类的私有属性和构造方法并不能被继承\n    - Constructor 也就不能被 override（重写）\n    - 可以overload（重载）\n\n8. Java 面向对象编程三大特性: 封装 继承 多态\n    1. 封装把对象属性私有化，提供可以被外界访问的属性的方法，\n    可不提供，但是如果一个类没有提供给外界访问的方法，那这个类也没有什么意义了。\n    2. 继承是使用已存在的类的定义作为基础建立新类的技术，\n    新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。\n    通过使用继承能复用以前的代码。\n    3. - 子类有父类非private属性和方法\n        - 子类可以有自己的属性和方法\n        - 子类可以重写父类非private方法（构造方法呢？基于自己的+super()）\n    4. 多态指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用，\n    在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，\n    该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。\n        - 继承实现（多个子类对同一方法的重写）\n        - 接口实现（实现接口并覆盖接口中同一方法）。\n\n9. String StringBuffer 和 StringBuilder\n    1. 可变性\n        - String -> private final char value[];  不可变\n        - StringBuilder 与 StringBuffer 都继承AbstractStringBuilder    char[] value; 可变\n    2. 线程安全性\n        - String final 常量线程安全\n        - StringBuilder 没有对方法加同步锁，非线程安全\n        - StringBuffer  加了同步锁，线程安全  ，内部使用 synchronized 进行同步\n    3. 性能\n        - 对String变量改变赋值，生成新String对象，指针指向新的String对象\n        - StringBuffer每次操作自己\n        - StringBuilder 有更高的性能\n    4. 少量数据为了方便直接String   操作大量数据 单线程StringBuilder  多线程StringBuffer\n\n10. 在一个静态方法内调用一个非静态成员为什么是非法的\n    - 静态方法不通过对象去调用方法\n\n11. 在 Java 中定义一个不做事且没有参数的构造方法的作用\n    - 继承 子类中的super() 调用父类中无参数构造函数 如果出现这种情况，而父类中没有，报错\n\n12.  import java和javax有什么区别\n    - 刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来说使用。\n    - 然而随着时间的推移，javax 逐渐的扩展成为 Java API 的组成部分。\n    - 但是，将扩展从 javax 包移动到 java 包将是太麻烦了，最终会破坏一堆现有的代码。\n    - 因此，最终决定 javax 包将成为标准API的一部分。\n    - 所以，实际上java和javax没有区别。这都是一个名字。\n\n13. 接口和抽象类的区别是什么\n    1. 接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法实现\n    2. 接口中的实例变量默认是 final 类型的，而抽象类中则不一定\n    3. 一个类可以实现多个接口，但最多只能实现一个抽象类(java中接口和继承的区别)\n    4. 一个类实现接口的话要实现接口的所有方法，而抽象类不一定(不实现默认使用父类)\n    5. 接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象\n    从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。\n\n14. 成员变量与局部变量的区别有那些\n    1. 从语法形式上\n        - 看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数\n        - 成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；\n        - 成员变量和局部变量都能被 final 所修饰；\n    2. 从变量在内存中的存储方式来看\n        - 如果成员变量是使用static修饰的，那么这个成员变量是属于类的\n        - 如果没有使用使用static修饰，这个成员变量是属于实例的。\n        - 而对象存在于堆内存，局部变量存在于栈内存\n    3. 从变量在内存中的生存时间上看\n        - 成员变量是对象的一部分，它随着对象的创建而存在\n        - 局部变量随着方法的调用而自动消失。\n    4. 成员变量如果没有被赋初值\n        - 则会自动以类型的默认值而赋值(一种情况例外被 final 修饰的成员变量也必须显示地赋值)\n        - 局部变量则不会自动赋值。\n\n15. 创建一个对象用什么运算符?对象实体与对象引用有何不同?\n    - new运算符，new创建对象实例（对象实例在堆内存中）\n    - 对象引用指向对象实例（对象引用存放在栈内存中）\n    - 一个对象引用可以指向0个或1个对象（一根绳子可以不系气球null，也可以系一个气球）\n    - 一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）获取同一个对象\n\n16. 构造方法特性\n    - 名字与类名相同\n    - 没有返回值，但不能用void声明\n    - 生成类的对象自动执行，无需调用\n\n17. 静态方法和实例方法有何不同\n    - 在外部调用静态方法时，可以使用\"类名.方法名\"的方式，也可以使用\"对象名.方法名\"的方式，\n    调用静态方法可以无需创建对象。静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），\n    而不允许访问实例成员变量和实例方法.\n    - 实例方法只有\"对象名.方法名\"的方式，实例方法可以访问所有成员和方法\n\n18. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是帮助子类做初始化工作。\n\n19. == 与 equals\n    1. ==\n        - 它的作用是判断两个对象的地址是不是相等，两个对象是不是同一个对象。\n        - 基本数据类型==比较的是值，引用数据类型==比较的是内存地址\n    2. equals()\n        - 类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。\n        - 类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；\n        若它们的内容相等，则返回 true (即，认为这两个对象相等)。\n        - String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，\n        而 String 的 equals 方法比较的是对象的值。\n        - 创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，\n        如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。\n20. hashCode 与 equals\n    1. hashCode\n        - hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。\n        - 这个哈希码的作用是确定该对象在哈希表中的索引位置。\n        - hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。\n        - 散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。\n        这其中就利用到了散列码！（可以快速找到所需要的对象）\n    2. 为什么要有 hashCode\n        - 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，\n        同时也会与其他已经加入的对象的 hashcode 值作比较\n        - 如果没有相符的hashcode，HashSet会假设对象没有重复出现。\n        - 但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。\n        - 如果两者相同，HashSet 就不会让其加入操作成功。\n        - 如果不同的话，就会重新散列到其他位置。\n        - 大大减少了 equals 的次数，相应就大大提高了执行速度。\n    3. hashCode（）与equals（）的相关规定\n        - 如果两个对象相等，则hashcode一定也是相同的\n        - 两个对象相等,对两个对象分别调用equals方法都返回true\n        - 两个对象有相同的hashcode值，它们也不一定是相等的\n        - 因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖\n        - hashCode() 的默认行为是对堆上的对象产生独特值。\n        如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）\n\n21. 为什么Java中只有值传递\n    - 基本类型值，将值拷贝，进行值传递。对象传递的话，将对象的引用（地址）拷贝，进行值传递。\n    但是地址的copy值指向同一个对象，方法对对象成员的改动，即改动了对象在内存里的值，会反映在外部。\n    然而，如果直接换引用，是换了copy的引用，和外部原来的引用并没有关系。\n\n22. 线程,程序,进程的基本概念\n    1. 线程\n        - 与进程相似，比进程更小的执行单位。\n        - 一个进程在其执行的过程中可以产生多个线程。\n        - 与进程不同，多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，\n        或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。\n    2. 程序\n        - 含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中\n        - 程序是静态的代码。\n    3. 进程\n        - 是程序的一次执行过程，是系统运行程序的基本单位，进程是动态的。\n        - 系统运行一个程序即是一个进程从创建，运行到消亡的过程。\n        - 一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，\n        每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等。\n        - 当程序在执行时，将会被操作系统载入内存中。\n        - 线程是进程划分成的更小的运行单位。\n        - 线程和进程最大的不同在于，基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。\n        - 进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，\n        而线程则是在同一程序内几乎同时执行一个以上的程序段。\n\n23. 线程基本状态\n\n|状态名称|Point|\n|---|---|\n|NEW|初始状态，已经构建，没有调用start()方法|\n|RUNNABLE|运行状态，就绪状态(调用start()方法，但还没有run) 　+　运行中状态|\n|BLOCKED|阻塞状态，阻塞于锁？|\n|WAITING|等待状态，需要其他线程通知或者中断|\n|TIME_WAITING|超时等待状态，指定时间自行返回|\n|TERMINATED|终止线程，执行完毕|\n\n24. <a name=\"final\">final</a>\n    1. 变量\n        - 基本数据类型在初始化之后便不能更改\n        - 引用类型初始化之后便不能再让其指向另一个对象\n        ```java\n         final List<String> strList = new ArrayList<>();\n         strList.add(\"Hello\");\n         strList.add(\"world\");  // 可以\n         List<String> unmodifiableStrList = List.of(\"hello\", \"world\");// List.of创建的本身就是不可变 List\n         unmodifiableStrList.add(\"again\");// 报错\n        ```\n        - 但是被引用的对象本身是可以修改的。\n    2. 类\n        - 类不能被继承。\n        - final类中的所有成员方法都会被隐式地指定为final方法。\n    3. 方法\n        - 方法锁定，以防任何继承类修改它的含义\n        - 早期的Java实现版本中，会将final方法转为内嵌调用。\n        但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升\n        （现在的Java版本已经不需要使用final方法进行这些优化了）。\n        - 类中所有的private方法都隐式地指定为final。\n    4. java.lang 包下面的很多类，相当一部分都被声明成为 final class,有效避免 API 使用者更改基础功能,保证平台安全的必要手段\n    5. final 修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误，甚至，有人明确推荐将所有方法参数、本地变量、成员变量声明成 final。\n    6. final 变量可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值 final 变量，有利于减少额外的同步开销，以省去一些防御性拷贝的必要。\n    7. 利用 final 可能有助于 JVM 将方法进行内联???(有待求证)\n    8. 关于 setter/getter 方法，很多人喜欢直接用 IDE 一次全部生成，建议最好是你确定有需要时再实现。\n\n25. <a name=\"Throwable\">异常</a>\n\n        ```mermaid\n        graph TD;\n          Throwable-->Error;\n          Throwable-->Exception;\n          Error-->VirtulMachineError;\n          Error-->AWTError;\n          VirtulMachineError-->StackOverFlowError;\n          VirtulMachineError-->OutOfMemoryError;\n          Exception-->IOException;\n          Exception-->RuntimeException;\n          IOException-->EOFException;\n          IOException-->FileNotFoundException;\n          RuntimeException-->ArrithmeticException;\n          RuntimeException-->MissingResourceException;\n          RuntimeException-->ClassNotFoundException;\n          RuntimeException-->NullPointerException;\n          RuntimeException-->IllegalArgumentException;\n          RuntimeException-->ArrayIndexOutOfBoundsException;\n          RuntimeException-->UnknownTypeException;\n        ```\n    1. Error（错误）\n        - 程序无法处理的错误，表示运行应用程序中较严重问题。\n        - 大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。\n        例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，\n        将出现 OutOfMemoryError。\n        - Error发生时，Java虚拟机（JVM）一般会选择线程终止。\n       - 这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，\n       如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。\n       - 错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。\n       - 对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。\n       - 在 Java中，错误通过Error的子类描述。\n    2. Exception（异常）\n        - 程序本身可以处理的异常。\n        - RuntimeException异常由Java虚拟机抛出。\n        NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）,\n        ArithmeticException（算术运算异常，一个整数除以0时，抛出该异常）,\n        ArrayIndexOutOfBoundsException （下标越界异常）。\n        - 受检异常 ：需要用 try...catch... 语句捕获并进行处理，并且可以从异常中恢复；\n        - 非受检异常 ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。\n\n    **异常能被程序本身可以处理，错误无法处理。**\n\n    3. Throwable类常用方法\n        - public string getMessage():返回异常发生时的详细信息\n        - public string toString():返回异常发生时的简要描述\n        - public string getLocalizedMessage():返回异常对象的本地化信息。\n        使用Throwable的子类覆盖这个方法，可以声称本地化信息。\n        如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同\n        - public void printStackTrace():在控制台上打印Throwable对象封装的异常信息。但是在分布式系统中很难溯源，所以用日志记录\n\n    4. 异常处理总结\n        - **try块：** 用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。\n        - **catch 块：** 用于处理try捕获到的异常。\n        - **inally 块：** 无论是否捕获或处理异常，finally块里的语句都会被执行。\n        当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。\n\n        - ***finally块不会被执行***\n            - 在finally语句块第一行发生了异常。 因为在其他行，finally块还是会得到执行\n            - 在前面的代码中用了System.exit(int)已退出程序。 exit是带参函数 ；若该语句在异常语句之后，finally会执行\n            - 程序所在的线程死亡。(后面两个在逗我咩QAQ，这不废话么)\n            - 关闭CPU。\n\n    4. 如果try语句里有return，返回的是try语句块中变量值。\n        1. 如果有返回值，就把返回值保存到局部变量中；\n        2. 执行jsr指令跳到finally语句里执行；\n        3. 执行完finally语句后，返回之前保存在局部变量表里的值。\n        4. 如果try，finally语句里均有return，忽略try的return，而使用finally的return.\n    5. 应该尽量将捕获底层异常类(子类准确类)的catch子句放在前面，同时尽量将捕获相对高层的异常类(父类异常类)的catch子句放在后面。\n    否则，捕获底层异常类的catch子句将可能会被屏蔽。（你想啊，你吧Exception放在第一个catch，后面你的ShitException就被短路了）\n    6. try语句的嵌套可以很隐蔽的发生。例如，我们可以将对方法的调用放在一个try块中。\n    在该方法的内部，有另一个try语句。在这种情况下，方法内部的try仍然是嵌套在外部调用该方法的try块中的。\n    7. 程序执行完throw语句之后立即停止；throw后面的任何语句不被执行，\n    最邻近的try块用来检查它是否含有一个与异常类型匹配的catch语句。\n    如果发现了匹配的块，控制转向该语句；如果没有发现，次包围的try块来检查，以此类推。\n    如果没有发现匹配的catch块，默认异常处理程序中断程序的执行并且打印堆栈轨迹。\n    8. Throws 仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。\n    当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。\n    9. finally创建的代码块在try/catch块完成之后另一个try/catch出现之前执行。\n    finally块无论有没有异常抛出都会执行。如果抛出异常，即使没有catch子句匹配，finally也会执行。\n    一个方法将从一个try/catch块返回到调用程序的任何时候，经过一个未捕获的异常或者是一个明确的返回语句，\n    finally子句在方法返回之前仍将执行。这在关闭文件句柄和释放任何在方法开始时被分配的其他资源是很有用。\n    10. 异常链顾名思义就是将异常发生的原因一个传一个串起来，即把底层的异常信息传给上层，这样逐层抛出。\n    当程序捕获到了一个底层异常，在处理部分选择了继续抛出一个更高级别的新异常给此方法的调用者。\n    这样异常的原因就会逐层传递。这样，位于高层的异常递归调用getCause()方法，就可以遍历各层的异常原因。\n    这就是Java异常链的原理。异常链的实际应用很少，发生异常时候逐层上抛不是个好注意，\n    上层拿到这些异常又能奈之何？而且异常逐层上抛会消耗大量资源， 因为要保存一个完整的异常链信息.\n    11. 用户自定义异常类，只需继承Exception类即可。\n        - 创建自定义异常类。\n        - 在方法中通过throw关键字抛出异常对象。\n        - 如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；\n        否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。\n        - 在出现异常方法的调用者中捕获并处理异常。\n    12. try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，\n    尽量不要一个大的 try 包住整段的代码；利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。\n    13. Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。\n    14. 业务上可以恢复的异常，可以通过完善任务重试机制，当执行异常时，保存当前任务信息加入重试队列。重试的策略根据业务需要决定，\n    达到重试上限依然无法成功，记录任务执行失败，同时发出告警。\n    15. 日志：类比消息中间件，处在不同线程之间的同一任务，简单高效一点的做法可能是用traceId/requestId串联。有些日志系统本身支持MDC/NDC功能，\n    可以串联相关联的日志。\n\n26. transient\n    - 阻止实例中那些用此关键字修饰的的变量序列化；\n    - 当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复\n    - transient只能修饰变量，不能修饰类和方法。\n\n27. console键盘输入\n    - 通过 Scanner\n    ```java\n    Scanner input = new Scanner(System.in);\n    String s  = input.nextLine();\n    input.close();\n    ```\n    - 通过 BufferedReader\n    ```java\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n    String s = input.readLine();\n    ```\n    \n28. finalize\n    1. finalize 的执行是和垃圾收集关联在一起的，一旦实现了非空的 finalize 方法，就会导致相应对象回收呈现数量级上的变慢，\n    有人专门做过 benchmark，大概是 40~50 倍的下降。\n    2. finalize 被设计成在对象被垃圾收集前调用，这就意味着实现了 finalize 方法的对象是个“特殊公民”，JVM 要对它进行额外处理。\n    finalize 本质上成为了快速回收的阻碍者，可能导致你的对象经过多个垃圾收集周期才能被回收。\n    3. System.runFinalization​() 告诉 JVM 积极一点，是不是就可以了？也许有点用，但是问题在于，这还是不可预测、不能保证的，所以本质上还是不能指望。\n    实践中，因为 finalize 拖慢垃圾收集，导致大量对象堆积，也是一种典型的导致 OOM 的原因。\n    4. finalize 还会掩盖资源回收时的出错信息\n    5. java.lang.ref.Cleaner 来替换掉原有的 finalize 实现.Cleaner 的实现利用了幻象引用（PhantomReference），\n    这是一种常见的所谓 post-mortem 清理机制。利用幻象引用和引用队列，可以保证对象被彻底销毁前做一些类似资源回收的工作,\n    比如关闭文件描述符（操作系统有限的资源），它比 finalize 更加轻量、更加可靠。每个 Cleaner 的操作都是独立的，它有自己的运行线程，所以可以避免意外死锁等问题。\n    \n29. 强引用、软引用、弱引用、幻象引用\n    - 可达性（reachable）状态和对垃圾收集的影响。\n    1. 强引用（“Strong” Reference）\n        - 普通对象引用\n        - 要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象\n        - 如果没有其他的引用关系 超过了引用的作用域或者显式地将相应（强）引用赋值为 null,就是可以被垃圾收集的了\n        - 强可达（Strongly Reachable），就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。\n        比如，我们新创建一个对象，那么创建它的线程对它就是强可达。\n    2. 软引用（SoftReference）\n        - 一种相对强引用弱化一些的引用\n        - 可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象\n        - JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。\n        - 软引用通常用来实现内存敏感的缓存.当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。\n        - 软可达（Softly Reachable），就是当我们只能通过软引用才能访问到对象的状态。\n    3. 弱引用（WeakReference）\n        - 不能使对象豁免垃圾收集\n        - 提供一种访问在弱引用状态下对象的途径\n        - 构建一种没有特定约束的关系\n        - 维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。\n        - 缓存实现的选择。\n        - 弱可达（Weakly Reachable），类似前面提到的，就是无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。\n        这是十分临近 finalize 状态的时机，当弱引用被清除的时候，就符合 finalize 的条件了。\n    4. 幻象引用（WeakReference）\n        - 虚引用\n        - 不能通过它访问对象\n        - 提供了一种确保对象被 finalize 以后，做某些事情的机制\n        - 做所谓的 Post-Mortem 清理机制, 利用幻象引用监控对象的创建和销毁。\n        - 幻象可达（Phantom Reachable），就是没有强、软、弱引用关联，并且 finalize 过了，只有幻象引用指向这个对象的时候。\n        - 最后的状态，就是不可达（unreachable），意味着对象可以被清除了。\n    5. 所有引用类型，都是抽象类 java.lang.ref.Reference 的子类.除了幻象引用（因为 get 永远返回 null），如果对象还没有被销毁，\n    都可以通过 get 方法获取原有对象。利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态\n    6. 对于软引用、弱引用之类，垃圾收集器可能会存在二次确认的问题，以保证处于弱引用状态的对象，没有改变为强引用。\n    7. 如果我们错误的保持了强引用（比如，赋值给了 static 变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄漏。\n    检查弱引用指向对象是否被垃圾收集，也是诊断是否有特定内存泄漏的一个思路，如果我们的框架使用到弱引用又怀疑有内存泄漏，就可以从这个角度检查。\n    8. 引用队列（ReferenceQueue）使用\n        - 创建各种引用并关联到响应对象时，可以选择是否需要关联引用队列\n        - JVM 会在特定时机将引用 enqueue 到队列里，可以从队列里获取引用（remove 方法有获取的意思）进行相关后续逻辑\n        - 尤其是幻象引用，get 方法只返回 null，如果再不指定引用队列，基本就没有意义了。\n    9. 显式地影响软引用垃圾收集\n        - 软引用通常会在最后一次引用后，还能保持一段时间，默认值是根据堆剩余空间计算的（以 M bytes 为单位）\n        - XX:SoftRefLRUPolicyMSPerMB 参数，我们可以以毫秒（milliseconds）为单位设置\n        - 对于 Client 模式剩余空间是计算当前堆里空闲的大小,而对于 server 模式 JVM，则是根据 -Xmx 指定的最大值来计算。不要过于依赖它\n    10. 诊断 JVM 引用情况\n        - HotSpot JVM PrintReferenceGC\n        - JDK 9类似 PrintGCTimeStamps 和 PrintReferenceGC 已经不再存在\n    11. Reachability Fence\n        - 通过底层 API 来达到强引用的效果\n        - 按照 Java 语言规范，如果一个对象没有指向强引用，就符合垃圾收集的标准，有些时候，对象本身并没有强引用，但是也许它的部分属性还在被使用.\n        需要一个方法，在没有强引用情况下，通知 JVM 对象是在被使用的。\n        - reachabilityFence 大多使用在 Executors 或者类似新的 HTTP/2 客户端代码中，大部分都是异步调用的情况\n        - 将需要 reachability 保障的代码段利用 try-finally 包围起来，在 finally 里明确声明对象强可达。\n1. 数据类型\n    1. 基本类型\n    \n    |keyWord|package|size|range|default|\n    |---|---|---|---|---|\n    |boolean|Boolean|1byte字节、8bit位|true，false JVM 会在编译时期将 boolean 类型的数据转换为 int，1 true，0 false|false|\n    |byte|Byte|1byte字节、8bit位|能存256个数，正负各128个，0放在正数一半 --> -128~127|0|\n    |char|Character|2byte字节、16bit位|能存65536个，对应Ascii码表，不需要负数，0~65535|'\\u0000'|\n    |short|Short|2byte字节、16bit位|能存65536个数，正负各32768个,0放正数一半 --> -32768~32767|0|\n    |int|Integer|4byte字节、32bit位|能存4294967296个数，正负各2147483648个,0放正数一半 --> -2147483648~2147483647|0|\n    |long|Long|8byte字节、64bit位|能存4294967296个数，正负各一半,0放正数一半 --> 9223372036854775808~9223372036854775807|0L|\n    |float|Float|4byte字节、32bit位|符号位（sign）占用1位，用来表示正负数，指数位（exponent）占用8位，用来表示指数，小数位（fraction）占用23位，用来表示小数，不足位数补0。|0.0F|\n    |double|Double|8byte字节、64bit位|符号位（sign）占用1位，指数位（exponent）占用11位，小数位（fraction）占用52位，不足位数补0。|0.0D|\n    2. 包装类型\n        ```java\n        Integer x = 2;     // 装箱\n        int y = x;         // 拆箱\n        ```\n    3. 缓存池\n        - new Integer(123) 每次都会新建一个对象；\n        - Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n        - 先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\n        ```java\n        public static Integer valueOf(int i) {\n            if (i >= IntegerCache.low && i <= IntegerCache.high)\n                return IntegerCache.cache[i + (-IntegerCache.low)];\n            return new Integer(i);\n        }\n        ```\n        - 自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，\n        那么就会引用相同的对象。\n        ```java\n        Integer m = 123;\n        Integer n = 123;\n        System.out.println(m == n); // true\n        }\n        ```\n\n2. String\n    1. 概：\n        - final 不可被继承。\n        - Java 8 内部使用 char 数组存储数据\n        - Java 9 改用 byte 数组存储字符串，同时使用 coder 来标识使用了哪种编码。\n    2. 不可变的好处\n        - 缓存 hash 值：因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。\n        不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。\n        - String Pool 的需要： 如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。\n        只有 String 是不可变的，才可能使用 String Pool。\n        - 安全性：String 经常作为参数，String 不可变性可以保证参数不可变。\n        例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，\n        改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。\n        - 线程安全:\n\n    3. String Pool\n        - 字符串常量池（String Pool）保存着所有字符串字面量（literal strings），\n        这些字面量在编译时期就确定。\n        - 当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等\n        （使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；\n        否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。\n        ```java\n         String s1 = new String(\"aaa\");\n         String s2 = new String(\"aaa\");\n         System.out.println(s1 == s2);           // false\n         String s3 = s1.intern();\n         String s4 = s1.intern();\n         System.out.println(s3 == s4);           // true\n        ```\n        - 采用字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。\n        ```java\n        String s5 = \"bbb\";\n        String s6 = \"bbb\";\n        System.out.println(s5 == s6);  // true\n        ```\n        - 在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。\n        而在 Java 7，String Pool 被移到堆中。\n        这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。\n    4. new String(\"abc\")\n        - \"abc\" 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个 \"abc\" 字符串字面量\n        - 而使用 new 的方式会在堆中创建一个字符串对象。\n        ```java\n        public class NewStringTest {\n            public static void main(String[] args) {\n                String s = new String(\"abc\");\n            }\n        }\n        ```\n        反编译得到\n        ```\n        // ...\n        Constant pool:\n        // ...\n           #2 = Class              #18            // java/lang/String\n           #3 = String             #19            // abc\n        // ...\n          #18 = Utf8               java/lang/String\n          #19 = Utf8               abc\n        // ...\n\n          public static void main(java.lang.String[]);\n            descriptor: ([Ljava/lang/String;)V\n            flags: ACC_PUBLIC, ACC_STATIC\n            Code:\n              stack=3, locals=2, args_size=1\n                 0: new           #2                  // class java/lang/String\n                 3: dup\n                 4: ldc           #3                  // String abc\n                 6: invokespecial #4                  // Method java/lang/String.\"<init>\":(Ljava/lang/String;)V\n                 9: astore_1\n        // ...\n        ```\n        在 Constant Pool 中，#19 存储这字符串字面量 \"abc\"，\n        #3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。\n        在 main 方法中，0: 行使用 new #2 在堆中创建一个字符串对象，\n        并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。\n\n        -  String 构造函数\n        ```java\n        this.value = original.value;\n        this.hash = original.hash;\n        ```\n        将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。\n\n3. 运算\n    1. 参数传递 都是值传递，对象也是地址当成值传递\n    2. float 与 double\n    ```java\n    // float f = 1.1; //这个是把double赋值给了float，Java 不能隐式执行向下转型，因为这会使得精度降低。\n    float f = 1.1f;\n    ```\n    3. 隐式类型转换\n    ```java\n    //字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。\n    short s1 = 1;\n    // s1 = s1 + 1;\n\n    //但是使用 += 或者 ++ 运算符可以执行隐式类型转换。\n    s1 += 1;\n    // s1++;\n\n    s1 = (short) (s1 + 1);\n    ```\n\n    4. switch\n        - 从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。\n        - switch 不支持 long，是因为 switch 的设计初衷是对那些只有少数的几个值进行等值判断，\n        如果值过于复杂，那么还是用 if 比较合适。\n        \n4. 继承\n    1. 访问权限\n        1. private 设计良好的模块会隐藏所有的实现细节,称为信息隐藏或封装.\n        因此访问权限应当尽可能地使每个类或者成员不被外界访问。\n        2. protected 在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。\n        子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别(里氏替换原则)\n        3. public 类可见表示其它类可以用这个类创建实例对象。\n        成员可见表示其它类可以用这个类的实例对象访问到该成员；\n        4. 不加访问修饰符(default) 包级可见\n    2. 抽象类与接口\n        1. 抽象类\n            - 抽象类和抽象方法都使用 abstract 关键字进行声明\n            - 抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。\n            - 抽象类不能被实例化，需要继承抽象类才能实例化其子类。\n        2. 接口\n            - Java 8 之前，接口可以看成是一个完全抽象的类，不能有任何的方法实现。\n            - Java 8 开始，接口可以有默认的方法实现，因为不支持默认方法的接口的维护成本太高了。\n            在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。\n            - 接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。\n            - 接口的字段默认都是 static 和 final 的。\n        3. 比较\n            - 从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，\n            即子类对象必须能够替换掉所有父类对象。\n            而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，\n            并不要求接口和实现接口的类具有 IS-A 关系。\n            - 从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。\n            - 接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。\n            - 接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。\n        4. 使用选择\n            1. 使用接口\n                - 需要让不相关的类都实现一个方法，\n                例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；\n                - 需要使用多重继承。\n            2. 使用抽象类\n                - 需要在几个相关的类中共享代码。\n                - 需要能控制继承来的成员的访问权限，而不是都为 public。\n                - 需要继承非静态和非常量字段。\n    3. super\n        - 访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。\n        - 访问父类的成员：如果子类重写了父类的某个方法，可以通过使用 super 关键字来引用父类的方法实现。\n    4. 重写与重载\n        1. 重写（Override）\n            - 继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\n            - 里式替换原则\n                1. 子类方法的访问权限必须大于等于父类方法；\n                2. 子类方法的返回类型必须是父类方法返回类型或为其子类型。\n        2. 重载（Overload）\n            - 存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\n             ```java\n            class A {\n                public String show(D obj) {\n                    return (\"A and D\");\n                }\n\n                public String show(A obj) {\n                    return (\"A and A\");\n                }\n            }\n\n            class B extends A {\n                public String show(B obj) {\n                    return (\"B and B\");\n                }\n\n                public String show(A obj) {\n                    return (\"B and A\");\n                }\n            }\n\n            class C extends B {\n            }\n\n            class D extends B {\n            }\n            ```\n            ```java\n            public class test {\n                public static void main(String[] args) {\n                    A a1 = new A();\n                    A a2 = new B();\n                    B b = new B();\n                    C c = new C();\n                    D d = new D();\n\n                    // a1为A类，b为B类，先找A类中show(B obj)，没有\n                    // 然后A类无父类，\n                    // 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A\n                    System.out.println(a1.show(b)); //A and A\n\n                    // a1为A类，c为C类，先找A类中show(C obj)，没有\n                    // 然后A类无父类，\n                    // 找A类中show(B obj)，因为C的父类是B，没有\n                    // 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A\n                    System.out.println(a1.show(c));//A and A\n\n                    // a1为A类，d为D类，先找A类中show(D obj)，找到，显示A and D\n                    System.out.println(a1.show(d));//A and D\n\n                    // a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，\n                    // b为B类，先找A类中show(B obj)，没有\n                    // 然后A类无父类，\n                    // 然后，找A类中的show(B obj)，没有\n                    // 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A\n                    System.out.println(a2.show(b));//B and A\n\n                    // a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，\n                    // c为C类，先找A类中show(C obj)，没有\n                    // 然后A类无父类，\n                    // 然后，找A类中的show(B obj)，没有\n                    // 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A\n                    System.out.println(a2.show(c));\n\n                    // a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，\n                    // d为D类，先找A类中show(D obj)，有,所以 A and D\n                    System.out.println(a2.show(d));//A and D\n\n                    // b为B类，b为B类，先找B类中show(B obj)，找到，显示B and B\n                    System.out.println(b.show(b));//B and B\n\n                    // b为B类，c为C类，先找B类中show(C obj)，没有\n                    // B的父类为A，找A类中的show(C obj)，没有\n                    // 然后找B类中的show（B）找到，显示B and B\n                    System.out.println(b.show(c));//B and B\n\n                    // b为B类，d为D类，先找B类中show(D obj)，没有\n                    // B的父类为A，找A类中的show(D obj)，找到，显示A and D\n                    System.out.println(b.show(d));//A and D\n                }\n            }\n            ```\n    涉及到重写时，方法调用的优先级为：\n    1. this.show(O)\n    2. super.show(O)\n    3. this.show((super)O)\n    4. super.show((super)O)\n\n5. Object 通用方法\n    1. equals()\n        1. 等价关系\n            1. 自反性\n            2. 对称性\n            3. 传递性\n            4. 一致性 多次调用 equals() 方法结果不变\n            5. 与 null 的比较\n                - 对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false\n                - 对象是null在调用.equals()方法时会报空指针异常\n                - null == null 返回true\n        2. 等价与相等\n            - 对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。\n            - 对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。\n        3. 实现\n            - 检查是否为同一个对象的引用，如果是直接返回 true； if (this == o) return true;\n            - 传入对象是否为空，空返回false；检查是否是同一个类型，如果不是，直接返回 false；  if (o == null || getClass() != o.getClass()) return false;\n            - 将 Object 对象进行转型；EqualExample that = (EqualExample) o;\n            - 判断每个关键域是否相等。 判断你定义相等的每个成员变量是否相等\n\n    2. hashCode()\n        - hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。\n        等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。\n        - 在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。\n        - 理想的散列函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的散列值上。\n        这就要求了散列函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，\n        然后组成一个 R 进制的整数。R 一般取 31，因为它是一个奇素数，如果是偶数的话，\n        当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位。\n        - 一个数与 31 相乘可以转换成移位和减法：`31*x == (x<<5)-x`，编译器会自动进行这个优化。\n        ```java\n        public int hashCode(char[] chars) {\n                int var1 = 0;\n                if (var1 == 0 && chars.length > 0) {\n                    char[] var2 = chars;\n\n                    for(int var3 = 0; var3 < chars.length; ++var3) {\n                        var1 = 31 * var1 + var2[var3];\n                        //var1 = (var1 << 5) - var1 +var2[var3];\n                    }\n\n                    System.out.println(\"this.hash = \" + var1);\n                }\n\n                return var1;\n            }\n        ```\n        - ###### 常见hash算法\n            1. Object类的hashCode.返回对象的内存地址经过处理后的结构，由于每个对象的内存地址都不一样，所以哈希码也不一样。\n            2. String类的hashCode.根据String类包含的字符串的内容，根据一种特殊算法返回哈希码，只要字符串内容相同，返回的哈希码也相同。\n            3. Integer类，返回的哈希码就是Integer对象里所包含的那个整数的数值，\n            例如Integer i1=new Integer(100),i1.hashCode的值就是100 。由此可见，2个一样大小的Integer对象，返回的哈希码也一样。\n            - 哈希码要完成这么一件事，首先要保证如果equlas出来的结果相等，那么hashCode也相等。\n            - 一般的线性表，树中，记录在结构中的相对位置是随机的，即和记录的关键字之间不存在确定的关系，\n            因此，在结构中查找记录时需进行一系列和关键字的比较。这一类查找方法建立在“比较“的基础上，\n            查找的效率依赖于查找过程中所进行的比较次数。（链表最基础的比较，就是遍历比较，时间都花在了这个上）\n            - 理想的情况是能直接找到需要的记录，因此必须在记录的存储位置和它的关键字之间建立一个确定的对应关系f，\n            使每个关键字和结构中一个唯一的存储位置相对应。（通过单独识别码去找到该对象，建立联系）\n            4. 直接定址法：有一个从1到100岁的人口数字统计表，其中，年龄作为关键字，\n            哈希函数取关键字自身或者关键字的某个线性函数。取关键字自身效率不高,时间复杂度是O(1),空间复杂度是O(n),n是关键字的个数。\n            5. 数字分析法：重复的可能性大的不取，取的话造成冲突的机会增加，所以尽量不取可能重复的关键字。\n            6. 平方取中法： 取关键字平方后的中间几位为哈希地址。\n            {421，423，436}，平方之后的结果为{177241，178929，190096}，那么可以取{72，89，00}作为Hash地址。\n            7. 折叠法： 将关键字分割成位数相同的几部分（最后一部分的位数可以不同），\n            然后取这几部分的叠加和（舍去进位）作为哈希地址，这方法称为折叠法。\n            图书的ISBN号为8903-241-23，可以将address(key)=89+03+24+12+3作为Hash地址。\n            8. 除留余数法: 取关键字被某个不大于哈希表表长m的数p除后所得余数为哈希地址。H(key)=key MOD p (p<=m)\n            在这里p的选取非常关键，p选择的好的话，能够最大程度地减少冲突，p一般取不大于m的最大质数。\n            9. 随机数法: 选择一个随机函数，取关键字的随机函数值为它的哈希地址.\n            H(key)=random(key) ,其中random为随机函数。通常用于**关键字长度不等**时采用此法。\n            - 冲突：对不同的关键字可能得到同一哈希地址。\n            - ###### 处理冲突方法\n            - 开放定址法：当一个关键字和另一个关键字发生冲突时，使用某种探测技术在Hash表中形成一个探测序列，\n            然后沿着这个探测序列依次查找下去，当碰到一个空的单元时，则插入其中。Hi=(H(key)+di) MOD m i=1,2,...,k(k<=m-1)\n            比较常用的探测方法有**线性探测法**，比如有一组关键字{12，13，25，23，38，34，6，84，91}，\n            Hash表长为14，Hash函数为address(key)=key%11，当插入12，13，25时可以直接插入，\n            而当插入23时，地址1被占用了，因此沿着地址1依次往下探测(探测步长可以根据情况而定)，\n            直到探测到地址4，发现为空，则将23插入其中。（发现有，则顺延偏移）\n            **二次探测再散列**di取值可能为1,-1,2,-2,4,-4,9,-9,16,-16,...k*k,-k*k(k<=m/2).\n            **伪随机探测再散列**di取值可能为伪随机数列.\n            - 链地址法：采用数组和链表相结合的办法，将Hash地址相同的记录存储在一张线性表中，\n            而每张表的表头的序号即为计算得到的Hash地址。如上述例子中，采用链地址法形成的Hash表存储。\n            - 再哈希法: 当发生冲突时，使用第二个、第三个、哈希函数计算地址，直到无冲突时。缺点：计算时间增加。\n            - 建立一个公共溢出区:假设哈希函数的值域为[0,m-1],则设向量HashTable[0..m-1]为基本表，\n            另外设立存储空间向量OverTable[0..v]用以存储发生冲突的记录。\n        - Hash表大小的确定也非常关键，如果Hash表的空间远远大于最后实际存储的记录个数，\n        则造成了很大的空间浪费，如果选取小了的话，则容易造成冲突。\n        在实际情况中，一般需要根据最终记录存储个数和关键字的分布特点来确定Hash表的大小。\n        还有一种情况时可能事先不知道最终需要存储的记录个数，则需要动态维护Hash表的容量，\n        此时可能需要重新计算Hash地址。\n    3. 这里要注意区分三个概念：hashCode值、hash值、hash方法、数组下标\n        - hashCode值：是KV对中的K对象的hashCode方法的返回值（若没有重写则默认用Object类的hashCode方法的生成值）\n        Object类`public native int hashCode();`native关键字是系统相关的其他语言实现（C/C++）。\n        - hash值: 是在hashCode值的基础上又进行了一步运算后的结果，这个运算过程就是*hash方法*。\n        - 数组下标: 根据该hash值和数组长度计算出数组下标，计算公式：hash值  &（数组长度-1）= 下标。\n        - HashMap中*hash方法*：\n            ```java\n            static final int hash(Object var0) {\n                int var1;\n                return var0 == null ? 0 : (var1 = var0.hashCode()) ^ var1 >>> 16;\n            }\n            ```\n    4. toString()\n        - Object默认实现\n        ```java\n        public String toString() {\n            return this.getClass().getName() + \"@\" + Integer.toHexString(this.hashCode());\n        }\n        ```\n    5. clone()\n        1. cloneable\n        - clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，\n        其它类就不能直接去调用该类实例的 clone() 方法。\n        ```java\n        public class CloneExample {\n            private int a;\n            private int b;\n        }\n        CloneExample e1 = new CloneExample();\n        // CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object'\n        ```\n        重写 clone() 得到以下实现：\n        ```\n        public class CloneExample {\n            private int a;\n            private int b;\n\n            @Override\n            public CloneExample clone() throws CloneNotSupportedException {\n                return (CloneExample)super.clone();\n            }\n        }\n        ```\n        ```java\n        CloneExample e1 = new CloneExample();\n        try {\n            CloneExample e2 = e1.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        ```\n        ```bash\n        java.lang.CloneNotSupportedException: CloneExample\n        ```\n        上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。\n        - clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。\n        Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，\n        就会抛出 CloneNotSupportedException。\n        ```java\n        public class CloneExample implements Cloneable {\n            private int a;\n            private int b;\n\n            @Override\n            public Object clone() throws CloneNotSupportedException {\n                return super.clone();\n            }\n        }\n        ```\n        2. 浅拷贝\n            - 拷贝对象和原始对象的引用类型引用同一个对象。\n        3. 深拷贝\n            - 拷贝对象和原始对象的引用类型引用不同对象。\n            ```java\n                @Override\n                protected DeepCloneExample clone() throws CloneNotSupportedException {\n                    DeepCloneExample result = (DeepCloneExample) super.clone();\n                    result.arr = new int[arr.length];\n                    for (int i = 0; i < arr.length; i++) {\n                        result.arr[i] = arr[i];\n                    }\n                    return result;\n                }\n            ```\n        4. clone() 的替代方案\n            - 使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。\n            Effective Java 书上讲到，最好不要去使用 clone()\n            - 可以使用拷贝构造函数\n            - 拷贝工厂来拷贝一个对象。\n6. 关键字\n    1. <a href=\"#final\">final</a>\n    2. static\n        1. 静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，\n        可以直接通过类名来访问它。静态变量在内存中只存在一份。\n        - 实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。\n        2. 静态方法：\n        - 静态方法在类加载的时候就存在了，它不依赖于任何实例。\n        所以静态方法必须有实现，也就是说它**不能是抽象方法**。\n        - 只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。\n        3. 静态语句块：\n        - 静态语句块在类初始化时运行一次。\n        4. 静态内部类:\n        - 非静态内部类依赖于外部类的实例，而静态内部类不需要。\n        - 静态内部类不能访问外部类的非静态的变量和方法。\n        5. 静态导包:\n        - 在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。\n        `import static com.xxx.ClassName.*`\n        6. 初始化顺序\n        - 静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。\n        - 存在继承的情况下，初始化顺序为：\n            1. 父类（静态变量、静态语句块）\n            1. 子类（静态变量、静态语句块）\n            1. 父类（实例变量、普通语句块）\n            1. 父类（构造函数）\n            1. 子类（实例变量、普通语句块）\n            1. 子类（构造函数）\n7. 反射\n    - 每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，\n    会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。\n    - 类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。\n    也可以使用 Class.forName(\"com.mysql.jdbc.Driver\") 这种方式来控制类的加载，\n    该方法会返回一个 Class 对象。\n    - 反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。\n    - Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：\n        1. Field: 可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；\n        2. Method: 可以使用 invoke() 方法调用与 Method 对象关联的方法；\n        3. Constructor: 可以用 Constructor 创建新的对象。\n    - 反射的优点:\n        1. 可扩展性: 用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。\n        2. 类浏览器和可视化开发环境: 一个类浏览器需要可以枚举类的成员。\n        可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。\n        3. 调试器和测试工具: 调试器需要能够检查一个类里的私有成员。\n        测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。\n\n    - 反射的缺点:\n        1. 性能开销 ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。\n        因此，反射操作的效率要比那些非反射操作低得多。\n        我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。\n        2. 安全限制 ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。\n        如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。\n        3. 内部暴露 ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），\n        所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。\n        反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。\n\n8. <a href=\"#Throwable\">异常</a>\n9. 泛型\n    ```java\n    public class Box<T> {\n        // T stands for \"Type\"\n        private T t;\n        public void set(T t) { this.t = t; }\n        public T get() { return t; }\n    }\n    ```\n    1. 泛型类\n    ```java\n    Box<Integer> integerBox = new Box<Integer>();\n    Box<Double> doubleBox = new Box<Double>();\n    Box<String> stringBox = new Box<String>();\n    ```\n    2. 泛型方法\n        ```java\n        public class Util {\n            public static <K, V> boolean compare(Pair<K, V> p1, Pair<K, V> p2) {\n                return p1.getKey().equals(p2.getKey()) &&\n                       p1.getValue().equals(p2.getValue());\n            }\n        }\n        public class Pair<K, V> {\n            private K key;\n            private V value;\n            public Pair(K key, V value) {\n                this.key = key;\n                this.value = value;\n            }\n            public void setKey(K key) { this.key = key; }\n            public void setValue(V value) { this.value = value; }\n            public K getKey()   { return key; }\n            public V getValue() { return value; }\n        }\n        \n        Pair<Integer, String> p1 = new Pair<>(1, \"apple\");\n        Pair<Integer, String> p2 = new Pair<>(2, \"pear\");\n        boolean same = Util.<Integer, String>compare(p1, p2);\n        ```\n    3. 边界符\n        ```java\n        public static <T> int countGreaterThan(T[] anArray, T elem) {\n            int count = 0;\n            for (T e : anArray)\n                if (e > elem)  // compiler error 因为除了short, int, double, long, float, byte, char等原始类型，其他的类并不一定能使用操作符>\n                    ++count;\n            return count;\n        }\n \n        public interface Comparable<T> {\n            public int compareTo(T o);\n        }\n \n        // 告诉编译器它们都至少实现了compareTo方法\n        public static <T extends Comparable<T>> int countGreaterThan(T[] anArray, T elem) {\n            int count = 0;\n            for (T e : anArray)\n                if (e.compareTo(elem) > 0)\n                    ++count;\n            return count;\n        }\n        ```\n    4. 通配符\n        ```java\n        public void boxTest(Box<Number> n) { /* ... */ }\n        ```\n        虽然Integer和Double是Number的子类，但是在泛型中Box<Integer>或者Box<Double>与Box<Number>之间并没有任何的关系\n        \n        ```java\n        class Fruit {}\n        class Apple extends Fruit {}\n        class Orange extends Fruit {}\n        ```\n        我们创建了一个泛型类Reader，然后在f1()中当我们尝试Fruit f = fruitReader.readExact(apples);\n        编译器会报错，因为List<Fruit>与List<Apple>之间并没有任何的关系。\n        \n        ```java\n        public class GenericReading {\n            static List<Apple> apples = Arrays.asList(new Apple());\n            static List<Fruit> fruit = Arrays.asList(new Fruit());\n            static class Reader<T> {\n                T readExact(List<T> list) {\n                    return list.get(0);\n                }\n            }\n            static void f1() {\n                Reader<Fruit> fruitReader = new Reader<Fruit>();\n                // Errors: List<Fruit> cannot be applied to List<Apple>.\n                // Fruit f = fruitReader.readExact(apples);\n            }\n            public static void main(String[] args) {\n                f1();\n            }\n        }\n        ```\n        按照我们通常的思维习惯，Apple和Fruit之间肯定是存在联系，\n        然而编译器却无法识别，那怎么在泛型代码中解决这个问题呢？我们可以通过使用通配符来解决这个问题：\n        ```java\n        static class CovariantReader<T> {\n            T readCovariant(List<? extends T> list) {\n                return list.get(0);\n            }\n        }\n        static void f2() {\n            CovariantReader<Fruit> fruitReader = new CovariantReader<Fruit>();\n            Fruit f = fruitReader.readCovariant(fruit);\n            Fruit a = fruitReader.readCovariant(apples);\n        }\n        public static void main(String[] args) {\n            f2();\n        }\n        ```\n        这样就相当与告诉编译器，fruitReader的readCovariant方法接受的参数只要是满足Fruit的子类就行(包括Fruit自身)，\n        这样子类和父类之间的关系也就关联上了。","source":"_posts/java-base-point-and-think.md","raw":"---\ntitle: java base point and think\ncomments: true\ndate: 2019-03-14 15:50:00\nupdated: 2019-03-14 15:50:00\ntags:\ncategories:\n---\n#### 有时候走了太久太远，都忘了为什么出发了。\n\n1. 面向过程和面向对象\n    1. 面向过程\n        1. 概：面向对象在我印象里是最初在C中获得的，注重顺序思维，结构化编程，即使封装\n        函数也是为了复用，而不是降低耦合。\n        2. 优点：比面向对象性能更好，不用实例化，节省资源。性能因素占绝对重要性时，\n        优考虑面向过程的开发。\n        3. 缺点：流式思维，不符合客观世界规律，比起面向对象，更难维护、复用和、扩展。\n    2. 面向对象：\n        1. 概：是现实世界关系的抽象，符合现实世界的逻辑规律。\n        2. 优点：抑郁维护复用和扩展。有封装、继承和多态的特性。\n        3. 缺点：资源开销大，性能比面向过程差。\n    3. 言之： 现在除了特别对性能有要求的一些项目，对于更多的业务系统讲，机器资源一般是\n    较为满足的，更注重的是易维护，易扩展，业务系统大概占据了软件开发项目八成，所以在业务系统上，\n    采用面向对象的方式进行开发。（现在的互联网行业人员流动那么大，程序员的编程水平习惯参差不齐，\n    如果还不注重维护性和扩展性的话，那大概就是前人挖坑闪后人，后人欲填其坑，其坑之大之深，难以处之。\n    故后人坑中再掘也，天坑套地坑，后人之后人无穷匮也，故现连环坑。）\n2. Java的特点\n    1. 优点：\n        1. 学习成本底。（相比C和C++吧，比Python还差些 :smile:）\n        2. 面向对象。（C++也是面向对象的，严格的说面向对象是一种思想）\n        3. 平台无关。可移植性好。（只要这个平台有对应的jvm，你只管敲你的Java代码，\n        编译成class后，jvm去生产适配各个平台的机器指令。）\n        4. 可靠性。（因为强类型？怎么就比其他语言更可靠了？质疑）\n        5. 安全性。（和强类型有关，也没有C里指针的各种乱指）\n        6. 多线程支持。（C++没有内置的对多线程的支持，需要调用系统的多线程支持）\n        7. 方便的网络编程。（简化了网络编程是指对JavaWeb方向的扩展么？确实在C里网络编程中的\n        通信一些东西确实比较复杂。）\n        8. 编译与解释并存。（Java确实从解释语言里学了很多，这点是我很欣赏的，知道发展自身，\n        才是生存下去的道理。）\n    2. 缺点：\n        1. 初期性能经常与C系比较，确实差一些，但是现在的java性能已经不能被诟病了。\n        2. 过于形式主义的语法\n\n3. JVM JDK JRE\n    1. JVM（Java Virtual Machine）\n        - 运行java字节码，字节码class文件jvm能理解\n        - 对不同系统有不同实现\n        - class文件只面向jvm，各个平台上都是一样的\n        - 一方面解决了解释型语言效率低问题\n        - 保留了解释性语言可移植性\n        - 在不同平台上不需要重新编译，可以直接运行\n        - .java文件  -- jdk中的javac --> .class文件\n        - .class文件  -- jvm --> 二进制机器码。jvm类加载器首先加载字节码文件，\n        解释器逐行解释执行。但是热点代码会多次被解释，所以引进了JIM(Just In Time)编译器。\n        运行时编译器，完成一次编译以后，字节码对应的机器码保存，下次调用到直接使用。\n        这一部分属于编译后调用，每次重新编译的是解释的部分。\n        - HotSpot 惰性评估(Lazy Evaluation)  热点代码是需要JIT编译的部分\n        JVM根据每次执行的情况收集信息并且相应的优化 执行次数越多，速度越快\n        JDK9引入AOT(Ahead of Time Compilation)编译，直接将字节码编译成机器码，\n        避免了JIT模式下的预热开销。\n        - 支持分层编译和AOT协作使用 ``？？？``   AOT编译质量不如JIT``？？？``\n        - 字节码 和 不同系统的JVM实现 保证了一次编译到处运行\n        - 解释和编译混合（-Xmixed）\n        - JVM会进行上万次调用以收集足够的信息进行高效的编译，client 模式这个门限是 1500 次.Hotspot JVM 内置了两个不同的 JIT compiler，C1 对应前面说的 client 模式，\n        适用于对于启动速度敏感的应用，比如普通 Java 桌面应用；C2 对应 server 模式，\n        它的优化是为长时间运行的服务器端应用设计的\n        - 默认是采用所谓的分层编译（TieredCompilation)\n        - “-Xint” JVM 只进行解释执行，不对代码进行编译,抛弃了 JIT 可能带来的性能优势.\n        - “-Xcomp” JVM 关闭解释器，不要进行解释执行 最大优化级别. 可能会导致 JVM 启动变慢非常多，\n        同时有些 JIT 编译器优化方式，比如分支预测，如果不进行 profiling，往往并不能进行有效优化。\n        - AOT（Ahead-of-Time Compilation），直接将字节码编译成机器代码，\n        这样就避免了 JIT 预热等各方面的开销\n        - 大量 JVM 语言\n    2. JDK\n        - Java Development Kit\n        - 包括JRE\n        - 编译器\n        - 其他工具\n    3. JRE\n        - Java Runtime Environment\n        - 运行已编译java程序\n        - 包括jvm java类库 java命令 其他基础构件\n        - 包含jsp的web程序，也需要jdk，因为需要将JSP转换为Java servlet，需要jsk编译servlet。\n4. Oracle JDK 和 OpenJDK\n    1. Oracle JDK\n        - 不是完全开源的\n        - 更稳定，优化更多，效率可能更高？\n    2. OpenJDK\n        - 开源\n        - GPL许可协议\n\n5. Java和C++的区别\n    1. 共通：面向对象，支持继承封装和多态\n    2. java: 不提供指针访问内存，更安全   类单继承   接口多继承  内存管理机制\n    3. C++： 提供指针   类可以多继承   需要程序员释放内存\n\n6. 字符型常量和字符串常量的区别\n    1.\n    ```java\n    char c = 'c';  String s = \"sss\";\n    ```\n    2. 字符相当于ascII值，可以参加运算。字符串代表地址，即在内存中存放位置。\n    3. char类型占2个字节 2*8bit = 16bit；字符串至少一个，结束标志（这句并不对，\n    在C++中，以\\0作为结束，但是在Java中，String是对象，有长度属性，不需要表示结尾）\n\n7. 构造器 Constructor 是否可被 override\n    - 父类的私有属性和构造方法并不能被继承\n    - Constructor 也就不能被 override（重写）\n    - 可以overload（重载）\n\n8. Java 面向对象编程三大特性: 封装 继承 多态\n    1. 封装把对象属性私有化，提供可以被外界访问的属性的方法，\n    可不提供，但是如果一个类没有提供给外界访问的方法，那这个类也没有什么意义了。\n    2. 继承是使用已存在的类的定义作为基础建立新类的技术，\n    新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。\n    通过使用继承能复用以前的代码。\n    3. - 子类有父类非private属性和方法\n        - 子类可以有自己的属性和方法\n        - 子类可以重写父类非private方法（构造方法呢？基于自己的+super()）\n    4. 多态指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用，\n    在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，\n    该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。\n        - 继承实现（多个子类对同一方法的重写）\n        - 接口实现（实现接口并覆盖接口中同一方法）。\n\n9. String StringBuffer 和 StringBuilder\n    1. 可变性\n        - String -> private final char value[];  不可变\n        - StringBuilder 与 StringBuffer 都继承AbstractStringBuilder    char[] value; 可变\n    2. 线程安全性\n        - String final 常量线程安全\n        - StringBuilder 没有对方法加同步锁，非线程安全\n        - StringBuffer  加了同步锁，线程安全  ，内部使用 synchronized 进行同步\n    3. 性能\n        - 对String变量改变赋值，生成新String对象，指针指向新的String对象\n        - StringBuffer每次操作自己\n        - StringBuilder 有更高的性能\n    4. 少量数据为了方便直接String   操作大量数据 单线程StringBuilder  多线程StringBuffer\n\n10. 在一个静态方法内调用一个非静态成员为什么是非法的\n    - 静态方法不通过对象去调用方法\n\n11. 在 Java 中定义一个不做事且没有参数的构造方法的作用\n    - 继承 子类中的super() 调用父类中无参数构造函数 如果出现这种情况，而父类中没有，报错\n\n12.  import java和javax有什么区别\n    - 刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来说使用。\n    - 然而随着时间的推移，javax 逐渐的扩展成为 Java API 的组成部分。\n    - 但是，将扩展从 javax 包移动到 java 包将是太麻烦了，最终会破坏一堆现有的代码。\n    - 因此，最终决定 javax 包将成为标准API的一部分。\n    - 所以，实际上java和javax没有区别。这都是一个名字。\n\n13. 接口和抽象类的区别是什么\n    1. 接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法实现\n    2. 接口中的实例变量默认是 final 类型的，而抽象类中则不一定\n    3. 一个类可以实现多个接口，但最多只能实现一个抽象类(java中接口和继承的区别)\n    4. 一个类实现接口的话要实现接口的所有方法，而抽象类不一定(不实现默认使用父类)\n    5. 接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象\n    从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。\n\n14. 成员变量与局部变量的区别有那些\n    1. 从语法形式上\n        - 看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数\n        - 成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；\n        - 成员变量和局部变量都能被 final 所修饰；\n    2. 从变量在内存中的存储方式来看\n        - 如果成员变量是使用static修饰的，那么这个成员变量是属于类的\n        - 如果没有使用使用static修饰，这个成员变量是属于实例的。\n        - 而对象存在于堆内存，局部变量存在于栈内存\n    3. 从变量在内存中的生存时间上看\n        - 成员变量是对象的一部分，它随着对象的创建而存在\n        - 局部变量随着方法的调用而自动消失。\n    4. 成员变量如果没有被赋初值\n        - 则会自动以类型的默认值而赋值(一种情况例外被 final 修饰的成员变量也必须显示地赋值)\n        - 局部变量则不会自动赋值。\n\n15. 创建一个对象用什么运算符?对象实体与对象引用有何不同?\n    - new运算符，new创建对象实例（对象实例在堆内存中）\n    - 对象引用指向对象实例（对象引用存放在栈内存中）\n    - 一个对象引用可以指向0个或1个对象（一根绳子可以不系气球null，也可以系一个气球）\n    - 一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）获取同一个对象\n\n16. 构造方法特性\n    - 名字与类名相同\n    - 没有返回值，但不能用void声明\n    - 生成类的对象自动执行，无需调用\n\n17. 静态方法和实例方法有何不同\n    - 在外部调用静态方法时，可以使用\"类名.方法名\"的方式，也可以使用\"对象名.方法名\"的方式，\n    调用静态方法可以无需创建对象。静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），\n    而不允许访问实例成员变量和实例方法.\n    - 实例方法只有\"对象名.方法名\"的方式，实例方法可以访问所有成员和方法\n\n18. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是帮助子类做初始化工作。\n\n19. == 与 equals\n    1. ==\n        - 它的作用是判断两个对象的地址是不是相等，两个对象是不是同一个对象。\n        - 基本数据类型==比较的是值，引用数据类型==比较的是内存地址\n    2. equals()\n        - 类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。\n        - 类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；\n        若它们的内容相等，则返回 true (即，认为这两个对象相等)。\n        - String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，\n        而 String 的 equals 方法比较的是对象的值。\n        - 创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，\n        如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。\n20. hashCode 与 equals\n    1. hashCode\n        - hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。\n        - 这个哈希码的作用是确定该对象在哈希表中的索引位置。\n        - hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。\n        - 散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。\n        这其中就利用到了散列码！（可以快速找到所需要的对象）\n    2. 为什么要有 hashCode\n        - 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，\n        同时也会与其他已经加入的对象的 hashcode 值作比较\n        - 如果没有相符的hashcode，HashSet会假设对象没有重复出现。\n        - 但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。\n        - 如果两者相同，HashSet 就不会让其加入操作成功。\n        - 如果不同的话，就会重新散列到其他位置。\n        - 大大减少了 equals 的次数，相应就大大提高了执行速度。\n    3. hashCode（）与equals（）的相关规定\n        - 如果两个对象相等，则hashcode一定也是相同的\n        - 两个对象相等,对两个对象分别调用equals方法都返回true\n        - 两个对象有相同的hashcode值，它们也不一定是相等的\n        - 因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖\n        - hashCode() 的默认行为是对堆上的对象产生独特值。\n        如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）\n\n21. 为什么Java中只有值传递\n    - 基本类型值，将值拷贝，进行值传递。对象传递的话，将对象的引用（地址）拷贝，进行值传递。\n    但是地址的copy值指向同一个对象，方法对对象成员的改动，即改动了对象在内存里的值，会反映在外部。\n    然而，如果直接换引用，是换了copy的引用，和外部原来的引用并没有关系。\n\n22. 线程,程序,进程的基本概念\n    1. 线程\n        - 与进程相似，比进程更小的执行单位。\n        - 一个进程在其执行的过程中可以产生多个线程。\n        - 与进程不同，多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，\n        或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。\n    2. 程序\n        - 含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中\n        - 程序是静态的代码。\n    3. 进程\n        - 是程序的一次执行过程，是系统运行程序的基本单位，进程是动态的。\n        - 系统运行一个程序即是一个进程从创建，运行到消亡的过程。\n        - 一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，\n        每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等。\n        - 当程序在执行时，将会被操作系统载入内存中。\n        - 线程是进程划分成的更小的运行单位。\n        - 线程和进程最大的不同在于，基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。\n        - 进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，\n        而线程则是在同一程序内几乎同时执行一个以上的程序段。\n\n23. 线程基本状态\n\n|状态名称|Point|\n|---|---|\n|NEW|初始状态，已经构建，没有调用start()方法|\n|RUNNABLE|运行状态，就绪状态(调用start()方法，但还没有run) 　+　运行中状态|\n|BLOCKED|阻塞状态，阻塞于锁？|\n|WAITING|等待状态，需要其他线程通知或者中断|\n|TIME_WAITING|超时等待状态，指定时间自行返回|\n|TERMINATED|终止线程，执行完毕|\n\n24. <a name=\"final\">final</a>\n    1. 变量\n        - 基本数据类型在初始化之后便不能更改\n        - 引用类型初始化之后便不能再让其指向另一个对象\n        ```java\n         final List<String> strList = new ArrayList<>();\n         strList.add(\"Hello\");\n         strList.add(\"world\");  // 可以\n         List<String> unmodifiableStrList = List.of(\"hello\", \"world\");// List.of创建的本身就是不可变 List\n         unmodifiableStrList.add(\"again\");// 报错\n        ```\n        - 但是被引用的对象本身是可以修改的。\n    2. 类\n        - 类不能被继承。\n        - final类中的所有成员方法都会被隐式地指定为final方法。\n    3. 方法\n        - 方法锁定，以防任何继承类修改它的含义\n        - 早期的Java实现版本中，会将final方法转为内嵌调用。\n        但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升\n        （现在的Java版本已经不需要使用final方法进行这些优化了）。\n        - 类中所有的private方法都隐式地指定为final。\n    4. java.lang 包下面的很多类，相当一部分都被声明成为 final class,有效避免 API 使用者更改基础功能,保证平台安全的必要手段\n    5. final 修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误，甚至，有人明确推荐将所有方法参数、本地变量、成员变量声明成 final。\n    6. final 变量可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值 final 变量，有利于减少额外的同步开销，以省去一些防御性拷贝的必要。\n    7. 利用 final 可能有助于 JVM 将方法进行内联???(有待求证)\n    8. 关于 setter/getter 方法，很多人喜欢直接用 IDE 一次全部生成，建议最好是你确定有需要时再实现。\n\n25. <a name=\"Throwable\">异常</a>\n\n        ```mermaid\n        graph TD;\n          Throwable-->Error;\n          Throwable-->Exception;\n          Error-->VirtulMachineError;\n          Error-->AWTError;\n          VirtulMachineError-->StackOverFlowError;\n          VirtulMachineError-->OutOfMemoryError;\n          Exception-->IOException;\n          Exception-->RuntimeException;\n          IOException-->EOFException;\n          IOException-->FileNotFoundException;\n          RuntimeException-->ArrithmeticException;\n          RuntimeException-->MissingResourceException;\n          RuntimeException-->ClassNotFoundException;\n          RuntimeException-->NullPointerException;\n          RuntimeException-->IllegalArgumentException;\n          RuntimeException-->ArrayIndexOutOfBoundsException;\n          RuntimeException-->UnknownTypeException;\n        ```\n    1. Error（错误）\n        - 程序无法处理的错误，表示运行应用程序中较严重问题。\n        - 大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。\n        例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，\n        将出现 OutOfMemoryError。\n        - Error发生时，Java虚拟机（JVM）一般会选择线程终止。\n       - 这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，\n       如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。\n       - 错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。\n       - 对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。\n       - 在 Java中，错误通过Error的子类描述。\n    2. Exception（异常）\n        - 程序本身可以处理的异常。\n        - RuntimeException异常由Java虚拟机抛出。\n        NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）,\n        ArithmeticException（算术运算异常，一个整数除以0时，抛出该异常）,\n        ArrayIndexOutOfBoundsException （下标越界异常）。\n        - 受检异常 ：需要用 try...catch... 语句捕获并进行处理，并且可以从异常中恢复；\n        - 非受检异常 ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。\n\n    **异常能被程序本身可以处理，错误无法处理。**\n\n    3. Throwable类常用方法\n        - public string getMessage():返回异常发生时的详细信息\n        - public string toString():返回异常发生时的简要描述\n        - public string getLocalizedMessage():返回异常对象的本地化信息。\n        使用Throwable的子类覆盖这个方法，可以声称本地化信息。\n        如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同\n        - public void printStackTrace():在控制台上打印Throwable对象封装的异常信息。但是在分布式系统中很难溯源，所以用日志记录\n\n    4. 异常处理总结\n        - **try块：** 用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。\n        - **catch 块：** 用于处理try捕获到的异常。\n        - **inally 块：** 无论是否捕获或处理异常，finally块里的语句都会被执行。\n        当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。\n\n        - ***finally块不会被执行***\n            - 在finally语句块第一行发生了异常。 因为在其他行，finally块还是会得到执行\n            - 在前面的代码中用了System.exit(int)已退出程序。 exit是带参函数 ；若该语句在异常语句之后，finally会执行\n            - 程序所在的线程死亡。(后面两个在逗我咩QAQ，这不废话么)\n            - 关闭CPU。\n\n    4. 如果try语句里有return，返回的是try语句块中变量值。\n        1. 如果有返回值，就把返回值保存到局部变量中；\n        2. 执行jsr指令跳到finally语句里执行；\n        3. 执行完finally语句后，返回之前保存在局部变量表里的值。\n        4. 如果try，finally语句里均有return，忽略try的return，而使用finally的return.\n    5. 应该尽量将捕获底层异常类(子类准确类)的catch子句放在前面，同时尽量将捕获相对高层的异常类(父类异常类)的catch子句放在后面。\n    否则，捕获底层异常类的catch子句将可能会被屏蔽。（你想啊，你吧Exception放在第一个catch，后面你的ShitException就被短路了）\n    6. try语句的嵌套可以很隐蔽的发生。例如，我们可以将对方法的调用放在一个try块中。\n    在该方法的内部，有另一个try语句。在这种情况下，方法内部的try仍然是嵌套在外部调用该方法的try块中的。\n    7. 程序执行完throw语句之后立即停止；throw后面的任何语句不被执行，\n    最邻近的try块用来检查它是否含有一个与异常类型匹配的catch语句。\n    如果发现了匹配的块，控制转向该语句；如果没有发现，次包围的try块来检查，以此类推。\n    如果没有发现匹配的catch块，默认异常处理程序中断程序的执行并且打印堆栈轨迹。\n    8. Throws 仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。\n    当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。\n    9. finally创建的代码块在try/catch块完成之后另一个try/catch出现之前执行。\n    finally块无论有没有异常抛出都会执行。如果抛出异常，即使没有catch子句匹配，finally也会执行。\n    一个方法将从一个try/catch块返回到调用程序的任何时候，经过一个未捕获的异常或者是一个明确的返回语句，\n    finally子句在方法返回之前仍将执行。这在关闭文件句柄和释放任何在方法开始时被分配的其他资源是很有用。\n    10. 异常链顾名思义就是将异常发生的原因一个传一个串起来，即把底层的异常信息传给上层，这样逐层抛出。\n    当程序捕获到了一个底层异常，在处理部分选择了继续抛出一个更高级别的新异常给此方法的调用者。\n    这样异常的原因就会逐层传递。这样，位于高层的异常递归调用getCause()方法，就可以遍历各层的异常原因。\n    这就是Java异常链的原理。异常链的实际应用很少，发生异常时候逐层上抛不是个好注意，\n    上层拿到这些异常又能奈之何？而且异常逐层上抛会消耗大量资源， 因为要保存一个完整的异常链信息.\n    11. 用户自定义异常类，只需继承Exception类即可。\n        - 创建自定义异常类。\n        - 在方法中通过throw关键字抛出异常对象。\n        - 如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；\n        否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。\n        - 在出现异常方法的调用者中捕获并处理异常。\n    12. try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，\n    尽量不要一个大的 try 包住整段的代码；利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。\n    13. Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。\n    14. 业务上可以恢复的异常，可以通过完善任务重试机制，当执行异常时，保存当前任务信息加入重试队列。重试的策略根据业务需要决定，\n    达到重试上限依然无法成功，记录任务执行失败，同时发出告警。\n    15. 日志：类比消息中间件，处在不同线程之间的同一任务，简单高效一点的做法可能是用traceId/requestId串联。有些日志系统本身支持MDC/NDC功能，\n    可以串联相关联的日志。\n\n26. transient\n    - 阻止实例中那些用此关键字修饰的的变量序列化；\n    - 当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复\n    - transient只能修饰变量，不能修饰类和方法。\n\n27. console键盘输入\n    - 通过 Scanner\n    ```java\n    Scanner input = new Scanner(System.in);\n    String s  = input.nextLine();\n    input.close();\n    ```\n    - 通过 BufferedReader\n    ```java\n    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n    String s = input.readLine();\n    ```\n    \n28. finalize\n    1. finalize 的执行是和垃圾收集关联在一起的，一旦实现了非空的 finalize 方法，就会导致相应对象回收呈现数量级上的变慢，\n    有人专门做过 benchmark，大概是 40~50 倍的下降。\n    2. finalize 被设计成在对象被垃圾收集前调用，这就意味着实现了 finalize 方法的对象是个“特殊公民”，JVM 要对它进行额外处理。\n    finalize 本质上成为了快速回收的阻碍者，可能导致你的对象经过多个垃圾收集周期才能被回收。\n    3. System.runFinalization​() 告诉 JVM 积极一点，是不是就可以了？也许有点用，但是问题在于，这还是不可预测、不能保证的，所以本质上还是不能指望。\n    实践中，因为 finalize 拖慢垃圾收集，导致大量对象堆积，也是一种典型的导致 OOM 的原因。\n    4. finalize 还会掩盖资源回收时的出错信息\n    5. java.lang.ref.Cleaner 来替换掉原有的 finalize 实现.Cleaner 的实现利用了幻象引用（PhantomReference），\n    这是一种常见的所谓 post-mortem 清理机制。利用幻象引用和引用队列，可以保证对象被彻底销毁前做一些类似资源回收的工作,\n    比如关闭文件描述符（操作系统有限的资源），它比 finalize 更加轻量、更加可靠。每个 Cleaner 的操作都是独立的，它有自己的运行线程，所以可以避免意外死锁等问题。\n    \n29. 强引用、软引用、弱引用、幻象引用\n    - 可达性（reachable）状态和对垃圾收集的影响。\n    1. 强引用（“Strong” Reference）\n        - 普通对象引用\n        - 要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象\n        - 如果没有其他的引用关系 超过了引用的作用域或者显式地将相应（强）引用赋值为 null,就是可以被垃圾收集的了\n        - 强可达（Strongly Reachable），就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。\n        比如，我们新创建一个对象，那么创建它的线程对它就是强可达。\n    2. 软引用（SoftReference）\n        - 一种相对强引用弱化一些的引用\n        - 可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象\n        - JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。\n        - 软引用通常用来实现内存敏感的缓存.当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。\n        - 软可达（Softly Reachable），就是当我们只能通过软引用才能访问到对象的状态。\n    3. 弱引用（WeakReference）\n        - 不能使对象豁免垃圾收集\n        - 提供一种访问在弱引用状态下对象的途径\n        - 构建一种没有特定约束的关系\n        - 维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。\n        - 缓存实现的选择。\n        - 弱可达（Weakly Reachable），类似前面提到的，就是无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。\n        这是十分临近 finalize 状态的时机，当弱引用被清除的时候，就符合 finalize 的条件了。\n    4. 幻象引用（WeakReference）\n        - 虚引用\n        - 不能通过它访问对象\n        - 提供了一种确保对象被 finalize 以后，做某些事情的机制\n        - 做所谓的 Post-Mortem 清理机制, 利用幻象引用监控对象的创建和销毁。\n        - 幻象可达（Phantom Reachable），就是没有强、软、弱引用关联，并且 finalize 过了，只有幻象引用指向这个对象的时候。\n        - 最后的状态，就是不可达（unreachable），意味着对象可以被清除了。\n    5. 所有引用类型，都是抽象类 java.lang.ref.Reference 的子类.除了幻象引用（因为 get 永远返回 null），如果对象还没有被销毁，\n    都可以通过 get 方法获取原有对象。利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态\n    6. 对于软引用、弱引用之类，垃圾收集器可能会存在二次确认的问题，以保证处于弱引用状态的对象，没有改变为强引用。\n    7. 如果我们错误的保持了强引用（比如，赋值给了 static 变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄漏。\n    检查弱引用指向对象是否被垃圾收集，也是诊断是否有特定内存泄漏的一个思路，如果我们的框架使用到弱引用又怀疑有内存泄漏，就可以从这个角度检查。\n    8. 引用队列（ReferenceQueue）使用\n        - 创建各种引用并关联到响应对象时，可以选择是否需要关联引用队列\n        - JVM 会在特定时机将引用 enqueue 到队列里，可以从队列里获取引用（remove 方法有获取的意思）进行相关后续逻辑\n        - 尤其是幻象引用，get 方法只返回 null，如果再不指定引用队列，基本就没有意义了。\n    9. 显式地影响软引用垃圾收集\n        - 软引用通常会在最后一次引用后，还能保持一段时间，默认值是根据堆剩余空间计算的（以 M bytes 为单位）\n        - XX:SoftRefLRUPolicyMSPerMB 参数，我们可以以毫秒（milliseconds）为单位设置\n        - 对于 Client 模式剩余空间是计算当前堆里空闲的大小,而对于 server 模式 JVM，则是根据 -Xmx 指定的最大值来计算。不要过于依赖它\n    10. 诊断 JVM 引用情况\n        - HotSpot JVM PrintReferenceGC\n        - JDK 9类似 PrintGCTimeStamps 和 PrintReferenceGC 已经不再存在\n    11. Reachability Fence\n        - 通过底层 API 来达到强引用的效果\n        - 按照 Java 语言规范，如果一个对象没有指向强引用，就符合垃圾收集的标准，有些时候，对象本身并没有强引用，但是也许它的部分属性还在被使用.\n        需要一个方法，在没有强引用情况下，通知 JVM 对象是在被使用的。\n        - reachabilityFence 大多使用在 Executors 或者类似新的 HTTP/2 客户端代码中，大部分都是异步调用的情况\n        - 将需要 reachability 保障的代码段利用 try-finally 包围起来，在 finally 里明确声明对象强可达。\n1. 数据类型\n    1. 基本类型\n    \n    |keyWord|package|size|range|default|\n    |---|---|---|---|---|\n    |boolean|Boolean|1byte字节、8bit位|true，false JVM 会在编译时期将 boolean 类型的数据转换为 int，1 true，0 false|false|\n    |byte|Byte|1byte字节、8bit位|能存256个数，正负各128个，0放在正数一半 --> -128~127|0|\n    |char|Character|2byte字节、16bit位|能存65536个，对应Ascii码表，不需要负数，0~65535|'\\u0000'|\n    |short|Short|2byte字节、16bit位|能存65536个数，正负各32768个,0放正数一半 --> -32768~32767|0|\n    |int|Integer|4byte字节、32bit位|能存4294967296个数，正负各2147483648个,0放正数一半 --> -2147483648~2147483647|0|\n    |long|Long|8byte字节、64bit位|能存4294967296个数，正负各一半,0放正数一半 --> 9223372036854775808~9223372036854775807|0L|\n    |float|Float|4byte字节、32bit位|符号位（sign）占用1位，用来表示正负数，指数位（exponent）占用8位，用来表示指数，小数位（fraction）占用23位，用来表示小数，不足位数补0。|0.0F|\n    |double|Double|8byte字节、64bit位|符号位（sign）占用1位，指数位（exponent）占用11位，小数位（fraction）占用52位，不足位数补0。|0.0D|\n    2. 包装类型\n        ```java\n        Integer x = 2;     // 装箱\n        int y = x;         // 拆箱\n        ```\n    3. 缓存池\n        - new Integer(123) 每次都会新建一个对象；\n        - Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n        - 先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\n        ```java\n        public static Integer valueOf(int i) {\n            if (i >= IntegerCache.low && i <= IntegerCache.high)\n                return IntegerCache.cache[i + (-IntegerCache.low)];\n            return new Integer(i);\n        }\n        ```\n        - 自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，\n        那么就会引用相同的对象。\n        ```java\n        Integer m = 123;\n        Integer n = 123;\n        System.out.println(m == n); // true\n        }\n        ```\n\n2. String\n    1. 概：\n        - final 不可被继承。\n        - Java 8 内部使用 char 数组存储数据\n        - Java 9 改用 byte 数组存储字符串，同时使用 coder 来标识使用了哪种编码。\n    2. 不可变的好处\n        - 缓存 hash 值：因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。\n        不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。\n        - String Pool 的需要： 如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。\n        只有 String 是不可变的，才可能使用 String Pool。\n        - 安全性：String 经常作为参数，String 不可变性可以保证参数不可变。\n        例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，\n        改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。\n        - 线程安全:\n\n    3. String Pool\n        - 字符串常量池（String Pool）保存着所有字符串字面量（literal strings），\n        这些字面量在编译时期就确定。\n        - 当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等\n        （使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；\n        否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。\n        ```java\n         String s1 = new String(\"aaa\");\n         String s2 = new String(\"aaa\");\n         System.out.println(s1 == s2);           // false\n         String s3 = s1.intern();\n         String s4 = s1.intern();\n         System.out.println(s3 == s4);           // true\n        ```\n        - 采用字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。\n        ```java\n        String s5 = \"bbb\";\n        String s6 = \"bbb\";\n        System.out.println(s5 == s6);  // true\n        ```\n        - 在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。\n        而在 Java 7，String Pool 被移到堆中。\n        这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。\n    4. new String(\"abc\")\n        - \"abc\" 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个 \"abc\" 字符串字面量\n        - 而使用 new 的方式会在堆中创建一个字符串对象。\n        ```java\n        public class NewStringTest {\n            public static void main(String[] args) {\n                String s = new String(\"abc\");\n            }\n        }\n        ```\n        反编译得到\n        ```\n        // ...\n        Constant pool:\n        // ...\n           #2 = Class              #18            // java/lang/String\n           #3 = String             #19            // abc\n        // ...\n          #18 = Utf8               java/lang/String\n          #19 = Utf8               abc\n        // ...\n\n          public static void main(java.lang.String[]);\n            descriptor: ([Ljava/lang/String;)V\n            flags: ACC_PUBLIC, ACC_STATIC\n            Code:\n              stack=3, locals=2, args_size=1\n                 0: new           #2                  // class java/lang/String\n                 3: dup\n                 4: ldc           #3                  // String abc\n                 6: invokespecial #4                  // Method java/lang/String.\"<init>\":(Ljava/lang/String;)V\n                 9: astore_1\n        // ...\n        ```\n        在 Constant Pool 中，#19 存储这字符串字面量 \"abc\"，\n        #3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。\n        在 main 方法中，0: 行使用 new #2 在堆中创建一个字符串对象，\n        并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。\n\n        -  String 构造函数\n        ```java\n        this.value = original.value;\n        this.hash = original.hash;\n        ```\n        将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。\n\n3. 运算\n    1. 参数传递 都是值传递，对象也是地址当成值传递\n    2. float 与 double\n    ```java\n    // float f = 1.1; //这个是把double赋值给了float，Java 不能隐式执行向下转型，因为这会使得精度降低。\n    float f = 1.1f;\n    ```\n    3. 隐式类型转换\n    ```java\n    //字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。\n    short s1 = 1;\n    // s1 = s1 + 1;\n\n    //但是使用 += 或者 ++ 运算符可以执行隐式类型转换。\n    s1 += 1;\n    // s1++;\n\n    s1 = (short) (s1 + 1);\n    ```\n\n    4. switch\n        - 从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。\n        - switch 不支持 long，是因为 switch 的设计初衷是对那些只有少数的几个值进行等值判断，\n        如果值过于复杂，那么还是用 if 比较合适。\n        \n4. 继承\n    1. 访问权限\n        1. private 设计良好的模块会隐藏所有的实现细节,称为信息隐藏或封装.\n        因此访问权限应当尽可能地使每个类或者成员不被外界访问。\n        2. protected 在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。\n        子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别(里氏替换原则)\n        3. public 类可见表示其它类可以用这个类创建实例对象。\n        成员可见表示其它类可以用这个类的实例对象访问到该成员；\n        4. 不加访问修饰符(default) 包级可见\n    2. 抽象类与接口\n        1. 抽象类\n            - 抽象类和抽象方法都使用 abstract 关键字进行声明\n            - 抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。\n            - 抽象类不能被实例化，需要继承抽象类才能实例化其子类。\n        2. 接口\n            - Java 8 之前，接口可以看成是一个完全抽象的类，不能有任何的方法实现。\n            - Java 8 开始，接口可以有默认的方法实现，因为不支持默认方法的接口的维护成本太高了。\n            在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。\n            - 接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。\n            - 接口的字段默认都是 static 和 final 的。\n        3. 比较\n            - 从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，\n            即子类对象必须能够替换掉所有父类对象。\n            而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，\n            并不要求接口和实现接口的类具有 IS-A 关系。\n            - 从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。\n            - 接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。\n            - 接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。\n        4. 使用选择\n            1. 使用接口\n                - 需要让不相关的类都实现一个方法，\n                例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；\n                - 需要使用多重继承。\n            2. 使用抽象类\n                - 需要在几个相关的类中共享代码。\n                - 需要能控制继承来的成员的访问权限，而不是都为 public。\n                - 需要继承非静态和非常量字段。\n    3. super\n        - 访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。\n        - 访问父类的成员：如果子类重写了父类的某个方法，可以通过使用 super 关键字来引用父类的方法实现。\n    4. 重写与重载\n        1. 重写（Override）\n            - 继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\n            - 里式替换原则\n                1. 子类方法的访问权限必须大于等于父类方法；\n                2. 子类方法的返回类型必须是父类方法返回类型或为其子类型。\n        2. 重载（Overload）\n            - 存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\n             ```java\n            class A {\n                public String show(D obj) {\n                    return (\"A and D\");\n                }\n\n                public String show(A obj) {\n                    return (\"A and A\");\n                }\n            }\n\n            class B extends A {\n                public String show(B obj) {\n                    return (\"B and B\");\n                }\n\n                public String show(A obj) {\n                    return (\"B and A\");\n                }\n            }\n\n            class C extends B {\n            }\n\n            class D extends B {\n            }\n            ```\n            ```java\n            public class test {\n                public static void main(String[] args) {\n                    A a1 = new A();\n                    A a2 = new B();\n                    B b = new B();\n                    C c = new C();\n                    D d = new D();\n\n                    // a1为A类，b为B类，先找A类中show(B obj)，没有\n                    // 然后A类无父类，\n                    // 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A\n                    System.out.println(a1.show(b)); //A and A\n\n                    // a1为A类，c为C类，先找A类中show(C obj)，没有\n                    // 然后A类无父类，\n                    // 找A类中show(B obj)，因为C的父类是B，没有\n                    // 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A\n                    System.out.println(a1.show(c));//A and A\n\n                    // a1为A类，d为D类，先找A类中show(D obj)，找到，显示A and D\n                    System.out.println(a1.show(d));//A and D\n\n                    // a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，\n                    // b为B类，先找A类中show(B obj)，没有\n                    // 然后A类无父类，\n                    // 然后，找A类中的show(B obj)，没有\n                    // 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A\n                    System.out.println(a2.show(b));//B and A\n\n                    // a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，\n                    // c为C类，先找A类中show(C obj)，没有\n                    // 然后A类无父类，\n                    // 然后，找A类中的show(B obj)，没有\n                    // 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A\n                    System.out.println(a2.show(c));\n\n                    // a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，\n                    // d为D类，先找A类中show(D obj)，有,所以 A and D\n                    System.out.println(a2.show(d));//A and D\n\n                    // b为B类，b为B类，先找B类中show(B obj)，找到，显示B and B\n                    System.out.println(b.show(b));//B and B\n\n                    // b为B类，c为C类，先找B类中show(C obj)，没有\n                    // B的父类为A，找A类中的show(C obj)，没有\n                    // 然后找B类中的show（B）找到，显示B and B\n                    System.out.println(b.show(c));//B and B\n\n                    // b为B类，d为D类，先找B类中show(D obj)，没有\n                    // B的父类为A，找A类中的show(D obj)，找到，显示A and D\n                    System.out.println(b.show(d));//A and D\n                }\n            }\n            ```\n    涉及到重写时，方法调用的优先级为：\n    1. this.show(O)\n    2. super.show(O)\n    3. this.show((super)O)\n    4. super.show((super)O)\n\n5. Object 通用方法\n    1. equals()\n        1. 等价关系\n            1. 自反性\n            2. 对称性\n            3. 传递性\n            4. 一致性 多次调用 equals() 方法结果不变\n            5. 与 null 的比较\n                - 对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false\n                - 对象是null在调用.equals()方法时会报空指针异常\n                - null == null 返回true\n        2. 等价与相等\n            - 对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。\n            - 对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。\n        3. 实现\n            - 检查是否为同一个对象的引用，如果是直接返回 true； if (this == o) return true;\n            - 传入对象是否为空，空返回false；检查是否是同一个类型，如果不是，直接返回 false；  if (o == null || getClass() != o.getClass()) return false;\n            - 将 Object 对象进行转型；EqualExample that = (EqualExample) o;\n            - 判断每个关键域是否相等。 判断你定义相等的每个成员变量是否相等\n\n    2. hashCode()\n        - hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。\n        等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。\n        - 在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。\n        - 理想的散列函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的散列值上。\n        这就要求了散列函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，\n        然后组成一个 R 进制的整数。R 一般取 31，因为它是一个奇素数，如果是偶数的话，\n        当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位。\n        - 一个数与 31 相乘可以转换成移位和减法：`31*x == (x<<5)-x`，编译器会自动进行这个优化。\n        ```java\n        public int hashCode(char[] chars) {\n                int var1 = 0;\n                if (var1 == 0 && chars.length > 0) {\n                    char[] var2 = chars;\n\n                    for(int var3 = 0; var3 < chars.length; ++var3) {\n                        var1 = 31 * var1 + var2[var3];\n                        //var1 = (var1 << 5) - var1 +var2[var3];\n                    }\n\n                    System.out.println(\"this.hash = \" + var1);\n                }\n\n                return var1;\n            }\n        ```\n        - ###### 常见hash算法\n            1. Object类的hashCode.返回对象的内存地址经过处理后的结构，由于每个对象的内存地址都不一样，所以哈希码也不一样。\n            2. String类的hashCode.根据String类包含的字符串的内容，根据一种特殊算法返回哈希码，只要字符串内容相同，返回的哈希码也相同。\n            3. Integer类，返回的哈希码就是Integer对象里所包含的那个整数的数值，\n            例如Integer i1=new Integer(100),i1.hashCode的值就是100 。由此可见，2个一样大小的Integer对象，返回的哈希码也一样。\n            - 哈希码要完成这么一件事，首先要保证如果equlas出来的结果相等，那么hashCode也相等。\n            - 一般的线性表，树中，记录在结构中的相对位置是随机的，即和记录的关键字之间不存在确定的关系，\n            因此，在结构中查找记录时需进行一系列和关键字的比较。这一类查找方法建立在“比较“的基础上，\n            查找的效率依赖于查找过程中所进行的比较次数。（链表最基础的比较，就是遍历比较，时间都花在了这个上）\n            - 理想的情况是能直接找到需要的记录，因此必须在记录的存储位置和它的关键字之间建立一个确定的对应关系f，\n            使每个关键字和结构中一个唯一的存储位置相对应。（通过单独识别码去找到该对象，建立联系）\n            4. 直接定址法：有一个从1到100岁的人口数字统计表，其中，年龄作为关键字，\n            哈希函数取关键字自身或者关键字的某个线性函数。取关键字自身效率不高,时间复杂度是O(1),空间复杂度是O(n),n是关键字的个数。\n            5. 数字分析法：重复的可能性大的不取，取的话造成冲突的机会增加，所以尽量不取可能重复的关键字。\n            6. 平方取中法： 取关键字平方后的中间几位为哈希地址。\n            {421，423，436}，平方之后的结果为{177241，178929，190096}，那么可以取{72，89，00}作为Hash地址。\n            7. 折叠法： 将关键字分割成位数相同的几部分（最后一部分的位数可以不同），\n            然后取这几部分的叠加和（舍去进位）作为哈希地址，这方法称为折叠法。\n            图书的ISBN号为8903-241-23，可以将address(key)=89+03+24+12+3作为Hash地址。\n            8. 除留余数法: 取关键字被某个不大于哈希表表长m的数p除后所得余数为哈希地址。H(key)=key MOD p (p<=m)\n            在这里p的选取非常关键，p选择的好的话，能够最大程度地减少冲突，p一般取不大于m的最大质数。\n            9. 随机数法: 选择一个随机函数，取关键字的随机函数值为它的哈希地址.\n            H(key)=random(key) ,其中random为随机函数。通常用于**关键字长度不等**时采用此法。\n            - 冲突：对不同的关键字可能得到同一哈希地址。\n            - ###### 处理冲突方法\n            - 开放定址法：当一个关键字和另一个关键字发生冲突时，使用某种探测技术在Hash表中形成一个探测序列，\n            然后沿着这个探测序列依次查找下去，当碰到一个空的单元时，则插入其中。Hi=(H(key)+di) MOD m i=1,2,...,k(k<=m-1)\n            比较常用的探测方法有**线性探测法**，比如有一组关键字{12，13，25，23，38，34，6，84，91}，\n            Hash表长为14，Hash函数为address(key)=key%11，当插入12，13，25时可以直接插入，\n            而当插入23时，地址1被占用了，因此沿着地址1依次往下探测(探测步长可以根据情况而定)，\n            直到探测到地址4，发现为空，则将23插入其中。（发现有，则顺延偏移）\n            **二次探测再散列**di取值可能为1,-1,2,-2,4,-4,9,-9,16,-16,...k*k,-k*k(k<=m/2).\n            **伪随机探测再散列**di取值可能为伪随机数列.\n            - 链地址法：采用数组和链表相结合的办法，将Hash地址相同的记录存储在一张线性表中，\n            而每张表的表头的序号即为计算得到的Hash地址。如上述例子中，采用链地址法形成的Hash表存储。\n            - 再哈希法: 当发生冲突时，使用第二个、第三个、哈希函数计算地址，直到无冲突时。缺点：计算时间增加。\n            - 建立一个公共溢出区:假设哈希函数的值域为[0,m-1],则设向量HashTable[0..m-1]为基本表，\n            另外设立存储空间向量OverTable[0..v]用以存储发生冲突的记录。\n        - Hash表大小的确定也非常关键，如果Hash表的空间远远大于最后实际存储的记录个数，\n        则造成了很大的空间浪费，如果选取小了的话，则容易造成冲突。\n        在实际情况中，一般需要根据最终记录存储个数和关键字的分布特点来确定Hash表的大小。\n        还有一种情况时可能事先不知道最终需要存储的记录个数，则需要动态维护Hash表的容量，\n        此时可能需要重新计算Hash地址。\n    3. 这里要注意区分三个概念：hashCode值、hash值、hash方法、数组下标\n        - hashCode值：是KV对中的K对象的hashCode方法的返回值（若没有重写则默认用Object类的hashCode方法的生成值）\n        Object类`public native int hashCode();`native关键字是系统相关的其他语言实现（C/C++）。\n        - hash值: 是在hashCode值的基础上又进行了一步运算后的结果，这个运算过程就是*hash方法*。\n        - 数组下标: 根据该hash值和数组长度计算出数组下标，计算公式：hash值  &（数组长度-1）= 下标。\n        - HashMap中*hash方法*：\n            ```java\n            static final int hash(Object var0) {\n                int var1;\n                return var0 == null ? 0 : (var1 = var0.hashCode()) ^ var1 >>> 16;\n            }\n            ```\n    4. toString()\n        - Object默认实现\n        ```java\n        public String toString() {\n            return this.getClass().getName() + \"@\" + Integer.toHexString(this.hashCode());\n        }\n        ```\n    5. clone()\n        1. cloneable\n        - clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，\n        其它类就不能直接去调用该类实例的 clone() 方法。\n        ```java\n        public class CloneExample {\n            private int a;\n            private int b;\n        }\n        CloneExample e1 = new CloneExample();\n        // CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object'\n        ```\n        重写 clone() 得到以下实现：\n        ```\n        public class CloneExample {\n            private int a;\n            private int b;\n\n            @Override\n            public CloneExample clone() throws CloneNotSupportedException {\n                return (CloneExample)super.clone();\n            }\n        }\n        ```\n        ```java\n        CloneExample e1 = new CloneExample();\n        try {\n            CloneExample e2 = e1.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        ```\n        ```bash\n        java.lang.CloneNotSupportedException: CloneExample\n        ```\n        上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。\n        - clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。\n        Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，\n        就会抛出 CloneNotSupportedException。\n        ```java\n        public class CloneExample implements Cloneable {\n            private int a;\n            private int b;\n\n            @Override\n            public Object clone() throws CloneNotSupportedException {\n                return super.clone();\n            }\n        }\n        ```\n        2. 浅拷贝\n            - 拷贝对象和原始对象的引用类型引用同一个对象。\n        3. 深拷贝\n            - 拷贝对象和原始对象的引用类型引用不同对象。\n            ```java\n                @Override\n                protected DeepCloneExample clone() throws CloneNotSupportedException {\n                    DeepCloneExample result = (DeepCloneExample) super.clone();\n                    result.arr = new int[arr.length];\n                    for (int i = 0; i < arr.length; i++) {\n                        result.arr[i] = arr[i];\n                    }\n                    return result;\n                }\n            ```\n        4. clone() 的替代方案\n            - 使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。\n            Effective Java 书上讲到，最好不要去使用 clone()\n            - 可以使用拷贝构造函数\n            - 拷贝工厂来拷贝一个对象。\n6. 关键字\n    1. <a href=\"#final\">final</a>\n    2. static\n        1. 静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，\n        可以直接通过类名来访问它。静态变量在内存中只存在一份。\n        - 实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。\n        2. 静态方法：\n        - 静态方法在类加载的时候就存在了，它不依赖于任何实例。\n        所以静态方法必须有实现，也就是说它**不能是抽象方法**。\n        - 只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。\n        3. 静态语句块：\n        - 静态语句块在类初始化时运行一次。\n        4. 静态内部类:\n        - 非静态内部类依赖于外部类的实例，而静态内部类不需要。\n        - 静态内部类不能访问外部类的非静态的变量和方法。\n        5. 静态导包:\n        - 在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。\n        `import static com.xxx.ClassName.*`\n        6. 初始化顺序\n        - 静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。\n        - 存在继承的情况下，初始化顺序为：\n            1. 父类（静态变量、静态语句块）\n            1. 子类（静态变量、静态语句块）\n            1. 父类（实例变量、普通语句块）\n            1. 父类（构造函数）\n            1. 子类（实例变量、普通语句块）\n            1. 子类（构造函数）\n7. 反射\n    - 每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，\n    会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。\n    - 类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。\n    也可以使用 Class.forName(\"com.mysql.jdbc.Driver\") 这种方式来控制类的加载，\n    该方法会返回一个 Class 对象。\n    - 反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。\n    - Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：\n        1. Field: 可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；\n        2. Method: 可以使用 invoke() 方法调用与 Method 对象关联的方法；\n        3. Constructor: 可以用 Constructor 创建新的对象。\n    - 反射的优点:\n        1. 可扩展性: 用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。\n        2. 类浏览器和可视化开发环境: 一个类浏览器需要可以枚举类的成员。\n        可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。\n        3. 调试器和测试工具: 调试器需要能够检查一个类里的私有成员。\n        测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。\n\n    - 反射的缺点:\n        1. 性能开销 ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。\n        因此，反射操作的效率要比那些非反射操作低得多。\n        我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。\n        2. 安全限制 ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。\n        如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。\n        3. 内部暴露 ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），\n        所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。\n        反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。\n\n8. <a href=\"#Throwable\">异常</a>\n9. 泛型\n    ```java\n    public class Box<T> {\n        // T stands for \"Type\"\n        private T t;\n        public void set(T t) { this.t = t; }\n        public T get() { return t; }\n    }\n    ```\n    1. 泛型类\n    ```java\n    Box<Integer> integerBox = new Box<Integer>();\n    Box<Double> doubleBox = new Box<Double>();\n    Box<String> stringBox = new Box<String>();\n    ```\n    2. 泛型方法\n        ```java\n        public class Util {\n            public static <K, V> boolean compare(Pair<K, V> p1, Pair<K, V> p2) {\n                return p1.getKey().equals(p2.getKey()) &&\n                       p1.getValue().equals(p2.getValue());\n            }\n        }\n        public class Pair<K, V> {\n            private K key;\n            private V value;\n            public Pair(K key, V value) {\n                this.key = key;\n                this.value = value;\n            }\n            public void setKey(K key) { this.key = key; }\n            public void setValue(V value) { this.value = value; }\n            public K getKey()   { return key; }\n            public V getValue() { return value; }\n        }\n        \n        Pair<Integer, String> p1 = new Pair<>(1, \"apple\");\n        Pair<Integer, String> p2 = new Pair<>(2, \"pear\");\n        boolean same = Util.<Integer, String>compare(p1, p2);\n        ```\n    3. 边界符\n        ```java\n        public static <T> int countGreaterThan(T[] anArray, T elem) {\n            int count = 0;\n            for (T e : anArray)\n                if (e > elem)  // compiler error 因为除了short, int, double, long, float, byte, char等原始类型，其他的类并不一定能使用操作符>\n                    ++count;\n            return count;\n        }\n \n        public interface Comparable<T> {\n            public int compareTo(T o);\n        }\n \n        // 告诉编译器它们都至少实现了compareTo方法\n        public static <T extends Comparable<T>> int countGreaterThan(T[] anArray, T elem) {\n            int count = 0;\n            for (T e : anArray)\n                if (e.compareTo(elem) > 0)\n                    ++count;\n            return count;\n        }\n        ```\n    4. 通配符\n        ```java\n        public void boxTest(Box<Number> n) { /* ... */ }\n        ```\n        虽然Integer和Double是Number的子类，但是在泛型中Box<Integer>或者Box<Double>与Box<Number>之间并没有任何的关系\n        \n        ```java\n        class Fruit {}\n        class Apple extends Fruit {}\n        class Orange extends Fruit {}\n        ```\n        我们创建了一个泛型类Reader，然后在f1()中当我们尝试Fruit f = fruitReader.readExact(apples);\n        编译器会报错，因为List<Fruit>与List<Apple>之间并没有任何的关系。\n        \n        ```java\n        public class GenericReading {\n            static List<Apple> apples = Arrays.asList(new Apple());\n            static List<Fruit> fruit = Arrays.asList(new Fruit());\n            static class Reader<T> {\n                T readExact(List<T> list) {\n                    return list.get(0);\n                }\n            }\n            static void f1() {\n                Reader<Fruit> fruitReader = new Reader<Fruit>();\n                // Errors: List<Fruit> cannot be applied to List<Apple>.\n                // Fruit f = fruitReader.readExact(apples);\n            }\n            public static void main(String[] args) {\n                f1();\n            }\n        }\n        ```\n        按照我们通常的思维习惯，Apple和Fruit之间肯定是存在联系，\n        然而编译器却无法识别，那怎么在泛型代码中解决这个问题呢？我们可以通过使用通配符来解决这个问题：\n        ```java\n        static class CovariantReader<T> {\n            T readCovariant(List<? extends T> list) {\n                return list.get(0);\n            }\n        }\n        static void f2() {\n            CovariantReader<Fruit> fruitReader = new CovariantReader<Fruit>();\n            Fruit f = fruitReader.readCovariant(fruit);\n            Fruit a = fruitReader.readCovariant(apples);\n        }\n        public static void main(String[] args) {\n            f2();\n        }\n        ```\n        这样就相当与告诉编译器，fruitReader的readCovariant方法接受的参数只要是满足Fruit的子类就行(包括Fruit自身)，\n        这样子类和父类之间的关系也就关联上了。","slug":"java-base-point-and-think","published":1,"layout":"post","photos":[],"link":"","_id":"ck6auwf76002uhgj3ibkwgm2h","content":"<h4 id=\"有时候走了太久太远，都忘了为什么出发了。\"><a href=\"#有时候走了太久太远，都忘了为什么出发了。\" class=\"headerlink\" title=\"有时候走了太久太远，都忘了为什么出发了。\"></a>有时候走了太久太远，都忘了为什么出发了。</h4><ol>\n<li>面向过程和面向对象<ol>\n<li>面向过程<ol>\n<li>概：面向对象在我印象里是最初在C中获得的，注重顺序思维，结构化编程，即使封装<br>函数也是为了复用，而不是降低耦合。</li>\n<li>优点：比面向对象性能更好，不用实例化，节省资源。性能因素占绝对重要性时，<br>优考虑面向过程的开发。</li>\n<li>缺点：流式思维，不符合客观世界规律，比起面向对象，更难维护、复用和、扩展。</li>\n</ol>\n</li>\n<li>面向对象：<ol>\n<li>概：是现实世界关系的抽象，符合现实世界的逻辑规律。</li>\n<li>优点：抑郁维护复用和扩展。有封装、继承和多态的特性。</li>\n<li>缺点：资源开销大，性能比面向过程差。</li>\n</ol>\n</li>\n<li>言之： 现在除了特别对性能有要求的一些项目，对于更多的业务系统讲，机器资源一般是<br>较为满足的，更注重的是易维护，易扩展，业务系统大概占据了软件开发项目八成，所以在业务系统上，<br>采用面向对象的方式进行开发。（现在的互联网行业人员流动那么大，程序员的编程水平习惯参差不齐，<br>如果还不注重维护性和扩展性的话，那大概就是前人挖坑闪后人，后人欲填其坑，其坑之大之深，难以处之。<br>故后人坑中再掘也，天坑套地坑，后人之后人无穷匮也，故现连环坑。）</li>\n</ol>\n</li>\n<li><p>Java的特点</p>\n<ol>\n<li>优点：<ol>\n<li>学习成本底。（相比C和C++吧，比Python还差些 :smile:）</li>\n<li>面向对象。（C++也是面向对象的，严格的说面向对象是一种思想）</li>\n<li>平台无关。可移植性好。（只要这个平台有对应的jvm，你只管敲你的Java代码，<br>编译成class后，jvm去生产适配各个平台的机器指令。）</li>\n<li>可靠性。（因为强类型？怎么就比其他语言更可靠了？质疑）</li>\n<li>安全性。（和强类型有关，也没有C里指针的各种乱指）</li>\n<li>多线程支持。（C++没有内置的对多线程的支持，需要调用系统的多线程支持）</li>\n<li>方便的网络编程。（简化了网络编程是指对JavaWeb方向的扩展么？确实在C里网络编程中的<br>通信一些东西确实比较复杂。）</li>\n<li>编译与解释并存。（Java确实从解释语言里学了很多，这点是我很欣赏的，知道发展自身，<br>才是生存下去的道理。）</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>初期性能经常与C系比较，确实差一些，但是现在的java性能已经不能被诟病了。</li>\n<li>过于形式主义的语法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>JVM JDK JRE</p>\n<ol>\n<li>JVM（Java Virtual Machine）<ul>\n<li>运行java字节码，字节码class文件jvm能理解</li>\n<li>对不同系统有不同实现</li>\n<li>class文件只面向jvm，各个平台上都是一样的</li>\n<li>一方面解决了解释型语言效率低问题</li>\n<li>保留了解释性语言可移植性</li>\n<li>在不同平台上不需要重新编译，可以直接运行</li>\n<li>.java文件  – jdk中的javac –&gt; .class文件</li>\n<li>.class文件  – jvm –&gt; 二进制机器码。jvm类加载器首先加载字节码文件，<br>解释器逐行解释执行。但是热点代码会多次被解释，所以引进了JIM(Just In Time)编译器。<br>运行时编译器，完成一次编译以后，字节码对应的机器码保存，下次调用到直接使用。<br>这一部分属于编译后调用，每次重新编译的是解释的部分。</li>\n<li>HotSpot 惰性评估(Lazy Evaluation)  热点代码是需要JIT编译的部分<br>JVM根据每次执行的情况收集信息并且相应的优化 执行次数越多，速度越快<br>JDK9引入AOT(Ahead of Time Compilation)编译，直接将字节码编译成机器码，<br>避免了JIT模式下的预热开销。</li>\n<li>支持分层编译和AOT协作使用 <code>？？？</code>   AOT编译质量不如JIT<code>？？？</code></li>\n<li>字节码 和 不同系统的JVM实现 保证了一次编译到处运行</li>\n<li>解释和编译混合（-Xmixed）</li>\n<li>JVM会进行上万次调用以收集足够的信息进行高效的编译，client 模式这个门限是 1500 次.Hotspot JVM 内置了两个不同的 JIT compiler，C1 对应前面说的 client 模式，<br>适用于对于启动速度敏感的应用，比如普通 Java 桌面应用；C2 对应 server 模式，<br>它的优化是为长时间运行的服务器端应用设计的</li>\n<li>默认是采用所谓的分层编译（TieredCompilation)</li>\n<li>“-Xint” JVM 只进行解释执行，不对代码进行编译,抛弃了 JIT 可能带来的性能优势.</li>\n<li>“-Xcomp” JVM 关闭解释器，不要进行解释执行 最大优化级别. 可能会导致 JVM 启动变慢非常多，<br>同时有些 JIT 编译器优化方式，比如分支预测，如果不进行 profiling，往往并不能进行有效优化。</li>\n<li>AOT（Ahead-of-Time Compilation），直接将字节码编译成机器代码，<br>这样就避免了 JIT 预热等各方面的开销</li>\n<li>大量 JVM 语言</li>\n</ul>\n</li>\n<li>JDK<ul>\n<li>Java Development Kit</li>\n<li>包括JRE</li>\n<li>编译器</li>\n<li>其他工具</li>\n</ul>\n</li>\n<li>JRE<ul>\n<li>Java Runtime Environment</li>\n<li>运行已编译java程序</li>\n<li>包括jvm java类库 java命令 其他基础构件</li>\n<li>包含jsp的web程序，也需要jdk，因为需要将JSP转换为Java servlet，需要jsk编译servlet。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Oracle JDK 和 OpenJDK</p>\n<ol>\n<li>Oracle JDK<ul>\n<li>不是完全开源的</li>\n<li>更稳定，优化更多，效率可能更高？</li>\n</ul>\n</li>\n<li>OpenJDK<ul>\n<li>开源</li>\n<li>GPL许可协议</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Java和C++的区别</p>\n<ol>\n<li>共通：面向对象，支持继承封装和多态</li>\n<li>java: 不提供指针访问内存，更安全   类单继承   接口多继承  内存管理机制</li>\n<li>C++： 提供指针   类可以多继承   需要程序员释放内存</li>\n</ol>\n</li>\n<li><p>字符型常量和字符串常量的区别<br> 1.</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> c = <span class=\"string\">'c'</span>;  String s = <span class=\"string\">\"sss\"</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>字符相当于ascII值，可以参加运算。字符串代表地址，即在内存中存放位置。</li>\n<li>char类型占2个字节 2*8bit = 16bit；字符串至少一个，结束标志（这句并不对，<br>在C++中，以\\0作为结束，但是在Java中，String是对象，有长度属性，不需要表示结尾）</li>\n</ol>\n</li>\n<li><p>构造器 Constructor 是否可被 override</p>\n<ul>\n<li>父类的私有属性和构造方法并不能被继承</li>\n<li>Constructor 也就不能被 override（重写）</li>\n<li>可以overload（重载）</li>\n</ul>\n</li>\n<li><p>Java 面向对象编程三大特性: 封装 继承 多态</p>\n<ol>\n<li>封装把对象属性私有化，提供可以被外界访问的属性的方法，<br>可不提供，但是如果一个类没有提供给外界访问的方法，那这个类也没有什么意义了。</li>\n<li>继承是使用已存在的类的定义作为基础建立新类的技术，<br>新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。<br>通过使用继承能复用以前的代码。</li>\n<li><ul>\n<li>子类有父类非private属性和方法<ul>\n<li>子类可以有自己的属性和方法</li>\n<li>子类可以重写父类非private方法（构造方法呢？基于自己的+super()）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多态指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用，<br>在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，<br>该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。<ul>\n<li>继承实现（多个子类对同一方法的重写）</li>\n<li>接口实现（实现接口并覆盖接口中同一方法）。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>String StringBuffer 和 StringBuilder</p>\n<ol>\n<li>可变性<ul>\n<li>String -&gt; private final char value[];  不可变</li>\n<li>StringBuilder 与 StringBuffer 都继承AbstractStringBuilder    char[] value; 可变</li>\n</ul>\n</li>\n<li>线程安全性<ul>\n<li>String final 常量线程安全</li>\n<li>StringBuilder 没有对方法加同步锁，非线程安全</li>\n<li>StringBuffer  加了同步锁，线程安全  ，内部使用 synchronized 进行同步</li>\n</ul>\n</li>\n<li>性能<ul>\n<li>对String变量改变赋值，生成新String对象，指针指向新的String对象</li>\n<li>StringBuffer每次操作自己</li>\n<li>StringBuilder 有更高的性能</li>\n</ul>\n</li>\n<li>少量数据为了方便直接String   操作大量数据 单线程StringBuilder  多线程StringBuffer</li>\n</ol>\n</li>\n<li><p>在一个静态方法内调用一个非静态成员为什么是非法的</p>\n<ul>\n<li>静态方法不通过对象去调用方法</li>\n</ul>\n</li>\n<li><p>在 Java 中定义一个不做事且没有参数的构造方法的作用</p>\n<ul>\n<li>继承 子类中的super() 调用父类中无参数构造函数 如果出现这种情况，而父类中没有，报错</li>\n</ul>\n</li>\n<li><p>import java和javax有什么区别</p>\n<ul>\n<li>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来说使用。</li>\n<li>然而随着时间的推移，javax 逐渐的扩展成为 Java API 的组成部分。</li>\n<li>但是，将扩展从 javax 包移动到 java 包将是太麻烦了，最终会破坏一堆现有的代码。</li>\n<li>因此，最终决定 javax 包将成为标准API的一部分。</li>\n<li>所以，实际上java和javax没有区别。这都是一个名字。</li>\n</ul>\n</li>\n<li><p>接口和抽象类的区别是什么</p>\n<ol>\n<li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法实现</li>\n<li>接口中的实例变量默认是 final 类型的，而抽象类中则不一定</li>\n<li>一个类可以实现多个接口，但最多只能实现一个抽象类(java中接口和继承的区别)</li>\n<li>一个类实现接口的话要实现接口的所有方法，而抽象类不一定(不实现默认使用父类)</li>\n<li>接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象<br>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</li>\n</ol>\n</li>\n<li><p>成员变量与局部变量的区别有那些</p>\n<ol>\n<li>从语法形式上<ul>\n<li>看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数</li>\n<li>成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；</li>\n<li>成员变量和局部变量都能被 final 所修饰；</li>\n</ul>\n</li>\n<li>从变量在内存中的存储方式来看<ul>\n<li>如果成员变量是使用static修饰的，那么这个成员变量是属于类的</li>\n<li>如果没有使用使用static修饰，这个成员变量是属于实例的。</li>\n<li>而对象存在于堆内存，局部变量存在于栈内存</li>\n</ul>\n</li>\n<li>从变量在内存中的生存时间上看<ul>\n<li>成员变量是对象的一部分，它随着对象的创建而存在</li>\n<li>局部变量随着方法的调用而自动消失。</li>\n</ul>\n</li>\n<li>成员变量如果没有被赋初值<ul>\n<li>则会自动以类型的默认值而赋值(一种情况例外被 final 修饰的成员变量也必须显示地赋值)</li>\n<li>局部变量则不会自动赋值。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>创建一个对象用什么运算符?对象实体与对象引用有何不同?</p>\n<ul>\n<li>new运算符，new创建对象实例（对象实例在堆内存中）</li>\n<li>对象引用指向对象实例（对象引用存放在栈内存中）</li>\n<li>一个对象引用可以指向0个或1个对象（一根绳子可以不系气球null，也可以系一个气球）</li>\n<li>一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）获取同一个对象</li>\n</ul>\n</li>\n<li><p>构造方法特性</p>\n<ul>\n<li>名字与类名相同</li>\n<li>没有返回值，但不能用void声明</li>\n<li>生成类的对象自动执行，无需调用</li>\n</ul>\n</li>\n<li><p>静态方法和实例方法有何不同</p>\n<ul>\n<li>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式，<br>调用静态方法可以无需创建对象。静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），<br>而不允许访问实例成员变量和实例方法.</li>\n<li>实例方法只有”对象名.方法名”的方式，实例方法可以访问所有成员和方法</li>\n</ul>\n</li>\n<li><p>在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是帮助子类做初始化工作。</p>\n</li>\n<li><p>== 与 equals</p>\n<ol>\n<li>==<ul>\n<li>它的作用是判断两个对象的地址是不是相等，两个对象是不是同一个对象。</li>\n<li>基本数据类型==比较的是值，引用数据类型==比较的是内存地址</li>\n</ul>\n</li>\n<li>equals()<ul>\n<li>类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li>\n<li>类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；<br>若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li>\n<li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，<br>而 String 的 equals 方法比较的是对象的值。</li>\n<li>创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，<br>如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>hashCode 与 equals</p>\n<ol>\n<li>hashCode<ul>\n<li>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。</li>\n<li>这个哈希码的作用是确定该对象在哈希表中的索引位置。</li>\n<li>hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</li>\n<li>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。<br>这其中就利用到了散列码！（可以快速找到所需要的对象）</li>\n</ul>\n</li>\n<li>为什么要有 hashCode<ul>\n<li>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，<br>同时也会与其他已经加入的对象的 hashcode 值作比较</li>\n<li>如果没有相符的hashcode，HashSet会假设对象没有重复出现。</li>\n<li>但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。</li>\n<li>如果两者相同，HashSet 就不会让其加入操作成功。</li>\n<li>如果不同的话，就会重新散列到其他位置。</li>\n<li>大大减少了 equals 的次数，相应就大大提高了执行速度。</li>\n</ul>\n</li>\n<li>hashCode（）与equals（）的相关规定<ul>\n<li>如果两个对象相等，则hashcode一定也是相同的</li>\n<li>两个对象相等,对两个对象分别调用equals方法都返回true</li>\n<li>两个对象有相同的hashcode值，它们也不一定是相等的</li>\n<li>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</li>\n<li>hashCode() 的默认行为是对堆上的对象产生独特值。<br>如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>为什么Java中只有值传递</p>\n<ul>\n<li>基本类型值，将值拷贝，进行值传递。对象传递的话，将对象的引用（地址）拷贝，进行值传递。<br>但是地址的copy值指向同一个对象，方法对对象成员的改动，即改动了对象在内存里的值，会反映在外部。<br>然而，如果直接换引用，是换了copy的引用，和外部原来的引用并没有关系。</li>\n</ul>\n</li>\n<li><p>线程,程序,进程的基本概念</p>\n<ol>\n<li>线程<ul>\n<li>与进程相似，比进程更小的执行单位。</li>\n<li>一个进程在其执行的过程中可以产生多个线程。</li>\n<li>与进程不同，多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，<br>或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</li>\n</ul>\n</li>\n<li>程序<ul>\n<li>含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中</li>\n<li>程序是静态的代码。</li>\n</ul>\n</li>\n<li>进程<ul>\n<li>是程序的一次执行过程，是系统运行程序的基本单位，进程是动态的。</li>\n<li>系统运行一个程序即是一个进程从创建，运行到消亡的过程。</li>\n<li>一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，<br>每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等。</li>\n<li>当程序在执行时，将会被操作系统载入内存中。</li>\n<li>线程是进程划分成的更小的运行单位。</li>\n<li>线程和进程最大的不同在于，基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。</li>\n<li>进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，<br>而线程则是在同一程序内几乎同时执行一个以上的程序段。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>线程基本状态</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>状态名称</th>\n<th>Point</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NEW</td>\n<td>初始状态，已经构建，没有调用start()方法</td>\n</tr>\n<tr>\n<td>RUNNABLE</td>\n<td>运行状态，就绪状态(调用start()方法，但还没有run) 　+　运行中状态</td>\n</tr>\n<tr>\n<td>BLOCKED</td>\n<td>阻塞状态，阻塞于锁？</td>\n</tr>\n<tr>\n<td>WAITING</td>\n<td>等待状态，需要其他线程通知或者中断</td>\n</tr>\n<tr>\n<td>TIME_WAITING</td>\n<td>超时等待状态，指定时间自行返回</td>\n</tr>\n<tr>\n<td>TERMINATED</td>\n<td>终止线程，执行完毕</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"24\">\n<li><p><a name=\"final\">final</a></p>\n<ol>\n<li><p>变量</p>\n<ul>\n<li>基本数据类型在初始化之后便不能更改</li>\n<li><p>引用类型初始化之后便不能再让其指向另一个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> List&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">strList.add(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">\"world\"</span>);  <span class=\"comment\">// 可以</span></span><br><span class=\"line\">List&lt;String&gt; unmodifiableStrList = List.of(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>);<span class=\"comment\">// List.of创建的本身就是不可变 List</span></span><br><span class=\"line\">unmodifiableStrList.add(<span class=\"string\">\"again\"</span>);<span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>但是被引用的对象本身是可以修改的。</p>\n</li>\n</ul>\n</li>\n<li>类<ul>\n<li>类不能被继承。</li>\n<li>final类中的所有成员方法都会被隐式地指定为final方法。</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>方法锁定，以防任何继承类修改它的含义</li>\n<li>早期的Java实现版本中，会将final方法转为内嵌调用。<br>但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升<br>（现在的Java版本已经不需要使用final方法进行这些优化了）。</li>\n<li>类中所有的private方法都隐式地指定为final。</li>\n</ul>\n</li>\n<li>java.lang 包下面的很多类，相当一部分都被声明成为 final class,有效避免 API 使用者更改基础功能,保证平台安全的必要手段</li>\n<li>final 修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误，甚至，有人明确推荐将所有方法参数、本地变量、成员变量声明成 final。</li>\n<li>final 变量可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值 final 变量，有利于减少额外的同步开销，以省去一些防御性拷贝的必要。</li>\n<li>利用 final 可能有助于 JVM 将方法进行内联???(有待求证)</li>\n<li>关于 setter/getter 方法，很多人喜欢直接用 IDE 一次全部生成，建议最好是你确定有需要时再实现。</li>\n</ol>\n</li>\n<li><p><a name=\"Throwable\">异常</a></p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">  Throwable--&gt;Error;</span><br><span class=\"line\">  Throwable--&gt;Exception;</span><br><span class=\"line\">  Error--&gt;VirtulMachineError;</span><br><span class=\"line\">  Error--&gt;AWTError;</span><br><span class=\"line\">  VirtulMachineError--&gt;StackOverFlowError;</span><br><span class=\"line\">  VirtulMachineError--&gt;OutOfMemoryError;</span><br><span class=\"line\">  Exception--&gt;IOException;</span><br><span class=\"line\">  Exception--&gt;RuntimeException;</span><br><span class=\"line\">  IOException--&gt;EOFException;</span><br><span class=\"line\">  IOException--&gt;FileNotFoundException;</span><br><span class=\"line\">  RuntimeException--&gt;ArrithmeticException;</span><br><span class=\"line\">  RuntimeException--&gt;MissingResourceException;</span><br><span class=\"line\">  RuntimeException--&gt;ClassNotFoundException;</span><br><span class=\"line\">  RuntimeException--&gt;NullPointerException;</span><br><span class=\"line\">  RuntimeException--&gt;IllegalArgumentException;</span><br><span class=\"line\">  RuntimeException--&gt;ArrayIndexOutOfBoundsException;</span><br><span class=\"line\">  RuntimeException--&gt;UnknownTypeException;</span><br></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>Error（错误）<ul>\n<li>程序无法处理的错误，表示运行应用程序中较严重问题。</li>\n<li>大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。<br>例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，<br>将出现 OutOfMemoryError。</li>\n<li>Error发生时，Java虚拟机（JVM）一般会选择线程终止。<ul>\n<li>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，<br>如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。</li>\n<li>错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li>\n<li>对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。</li>\n<li>在 Java中，错误通过Error的子类描述。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Exception（异常）<ul>\n<li>程序本身可以处理的异常。</li>\n<li>RuntimeException异常由Java虚拟机抛出。<br>NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）,<br>ArithmeticException（算术运算异常，一个整数除以0时，抛出该异常）,<br>ArrayIndexOutOfBoundsException （下标越界异常）。</li>\n<li>受检异常 ：需要用 try…catch… 语句捕获并进行处理，并且可以从异常中恢复；</li>\n<li>非受检异常 ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。</li>\n</ul>\n</li>\n</ol>\n<p><strong>异常能被程序本身可以处理，错误无法处理。</strong></p>\n<ol start=\"3\">\n<li><p>Throwable类常用方法</p>\n<ul>\n<li>public string getMessage():返回异常发生时的详细信息</li>\n<li>public string toString():返回异常发生时的简要描述</li>\n<li>public string getLocalizedMessage():返回异常对象的本地化信息。<br>使用Throwable的子类覆盖这个方法，可以声称本地化信息。<br>如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同</li>\n<li>public void printStackTrace():在控制台上打印Throwable对象封装的异常信息。但是在分布式系统中很难溯源，所以用日志记录</li>\n</ul>\n</li>\n<li><p>异常处理总结</p>\n<ul>\n<li><strong>try块：</strong> 用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。</li>\n<li><strong>catch 块：</strong> 用于处理try捕获到的异常。</li>\n<li><p><strong>inally 块：</strong> 无论是否捕获或处理异常，finally块里的语句都会被执行。<br>当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。</p>\n</li>\n<li><p><strong><em>finally块不会被执行</em></strong></p>\n<ul>\n<li>在finally语句块第一行发生了异常。 因为在其他行，finally块还是会得到执行</li>\n<li>在前面的代码中用了System.exit(int)已退出程序。 exit是带参函数 ；若该语句在异常语句之后，finally会执行</li>\n<li>程序所在的线程死亡。(后面两个在逗我咩QAQ，这不废话么)</li>\n<li>关闭CPU。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如果try语句里有return，返回的是try语句块中变量值。</p>\n<ol>\n<li>如果有返回值，就把返回值保存到局部变量中；</li>\n<li>执行jsr指令跳到finally语句里执行；</li>\n<li>执行完finally语句后，返回之前保存在局部变量表里的值。</li>\n<li>如果try，finally语句里均有return，忽略try的return，而使用finally的return.</li>\n</ol>\n</li>\n<li>应该尽量将捕获底层异常类(子类准确类)的catch子句放在前面，同时尽量将捕获相对高层的异常类(父类异常类)的catch子句放在后面。<br>否则，捕获底层异常类的catch子句将可能会被屏蔽。（你想啊，你吧Exception放在第一个catch，后面你的ShitException就被短路了）</li>\n<li>try语句的嵌套可以很隐蔽的发生。例如，我们可以将对方法的调用放在一个try块中。<br>在该方法的内部，有另一个try语句。在这种情况下，方法内部的try仍然是嵌套在外部调用该方法的try块中的。</li>\n<li>程序执行完throw语句之后立即停止；throw后面的任何语句不被执行，<br>最邻近的try块用来检查它是否含有一个与异常类型匹配的catch语句。<br>如果发现了匹配的块，控制转向该语句；如果没有发现，次包围的try块来检查，以此类推。<br>如果没有发现匹配的catch块，默认异常处理程序中断程序的执行并且打印堆栈轨迹。</li>\n<li>Throws 仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。<br>当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li>\n<li>finally创建的代码块在try/catch块完成之后另一个try/catch出现之前执行。<br>finally块无论有没有异常抛出都会执行。如果抛出异常，即使没有catch子句匹配，finally也会执行。<br>一个方法将从一个try/catch块返回到调用程序的任何时候，经过一个未捕获的异常或者是一个明确的返回语句，<br>finally子句在方法返回之前仍将执行。这在关闭文件句柄和释放任何在方法开始时被分配的其他资源是很有用。</li>\n<li>异常链顾名思义就是将异常发生的原因一个传一个串起来，即把底层的异常信息传给上层，这样逐层抛出。<br>当程序捕获到了一个底层异常，在处理部分选择了继续抛出一个更高级别的新异常给此方法的调用者。<br>这样异常的原因就会逐层传递。这样，位于高层的异常递归调用getCause()方法，就可以遍历各层的异常原因。<br>这就是Java异常链的原理。异常链的实际应用很少，发生异常时候逐层上抛不是个好注意，<br>上层拿到这些异常又能奈之何？而且异常逐层上抛会消耗大量资源， 因为要保存一个完整的异常链信息.</li>\n<li>用户自定义异常类，只需继承Exception类即可。<ul>\n<li>创建自定义异常类。</li>\n<li>在方法中通过throw关键字抛出异常对象。</li>\n<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；<br>否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>\n<li>在出现异常方法的调用者中捕获并处理异常。</li>\n</ul>\n</li>\n<li>try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，<br>尽量不要一个大的 try 包住整段的代码；利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。</li>\n<li>Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。</li>\n<li>业务上可以恢复的异常，可以通过完善任务重试机制，当执行异常时，保存当前任务信息加入重试队列。重试的策略根据业务需要决定，<br>达到重试上限依然无法成功，记录任务执行失败，同时发出告警。</li>\n<li>日志：类比消息中间件，处在不同线程之间的同一任务，简单高效一点的做法可能是用traceId/requestId串联。有些日志系统本身支持MDC/NDC功能，<br>可以串联相关联的日志。</li>\n</ol>\n</li>\n<li><p>transient</p>\n<ul>\n<li>阻止实例中那些用此关键字修饰的的变量序列化；</li>\n<li>当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复</li>\n<li>transient只能修饰变量，不能修饰类和方法。</li>\n</ul>\n</li>\n<li><p>console键盘输入</p>\n<ul>\n<li><p>通过 Scanner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scanner input = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">String s  = input.nextLine();</span><br><span class=\"line\">input.close();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过 BufferedReader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader input = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">String s = input.readLine();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"28\">\n<li><p>finalize</p>\n<ol>\n<li>finalize 的执行是和垃圾收集关联在一起的，一旦实现了非空的 finalize 方法，就会导致相应对象回收呈现数量级上的变慢，<br>有人专门做过 benchmark，大概是 40~50 倍的下降。</li>\n<li>finalize 被设计成在对象被垃圾收集前调用，这就意味着实现了 finalize 方法的对象是个“特殊公民”，JVM 要对它进行额外处理。<br>finalize 本质上成为了快速回收的阻碍者，可能导致你的对象经过多个垃圾收集周期才能被回收。</li>\n<li>System.runFinalization​() 告诉 JVM 积极一点，是不是就可以了？也许有点用，但是问题在于，这还是不可预测、不能保证的，所以本质上还是不能指望。<br>实践中，因为 finalize 拖慢垃圾收集，导致大量对象堆积，也是一种典型的导致 OOM 的原因。</li>\n<li>finalize 还会掩盖资源回收时的出错信息</li>\n<li>java.lang.ref.Cleaner 来替换掉原有的 finalize 实现.Cleaner 的实现利用了幻象引用（PhantomReference），<br>这是一种常见的所谓 post-mortem 清理机制。利用幻象引用和引用队列，可以保证对象被彻底销毁前做一些类似资源回收的工作,<br>比如关闭文件描述符（操作系统有限的资源），它比 finalize 更加轻量、更加可靠。每个 Cleaner 的操作都是独立的，它有自己的运行线程，所以可以避免意外死锁等问题。</li>\n</ol>\n</li>\n<li><p>强引用、软引用、弱引用、幻象引用</p>\n<ul>\n<li>可达性（reachable）状态和对垃圾收集的影响。</li>\n</ul>\n<ol>\n<li>强引用（“Strong” Reference）<ul>\n<li>普通对象引用</li>\n<li>要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象</li>\n<li>如果没有其他的引用关系 超过了引用的作用域或者显式地将相应（强）引用赋值为 null,就是可以被垃圾收集的了</li>\n<li>强可达（Strongly Reachable），就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。<br>比如，我们新创建一个对象，那么创建它的线程对它就是强可达。</li>\n</ul>\n</li>\n<li>软引用（SoftReference）<ul>\n<li>一种相对强引用弱化一些的引用</li>\n<li>可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象</li>\n<li>JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。</li>\n<li>软引用通常用来实现内存敏感的缓存.当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</li>\n<li>软可达（Softly Reachable），就是当我们只能通过软引用才能访问到对象的状态。</li>\n</ul>\n</li>\n<li>弱引用（WeakReference）<ul>\n<li>不能使对象豁免垃圾收集</li>\n<li>提供一种访问在弱引用状态下对象的途径</li>\n<li>构建一种没有特定约束的关系</li>\n<li>维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。</li>\n<li>缓存实现的选择。</li>\n<li>弱可达（Weakly Reachable），类似前面提到的，就是无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。<br>这是十分临近 finalize 状态的时机，当弱引用被清除的时候，就符合 finalize 的条件了。</li>\n</ul>\n</li>\n<li>幻象引用（WeakReference）<ul>\n<li>虚引用</li>\n<li>不能通过它访问对象</li>\n<li>提供了一种确保对象被 finalize 以后，做某些事情的机制</li>\n<li>做所谓的 Post-Mortem 清理机制, 利用幻象引用监控对象的创建和销毁。</li>\n<li>幻象可达（Phantom Reachable），就是没有强、软、弱引用关联，并且 finalize 过了，只有幻象引用指向这个对象的时候。</li>\n<li>最后的状态，就是不可达（unreachable），意味着对象可以被清除了。</li>\n</ul>\n</li>\n<li>所有引用类型，都是抽象类 java.lang.ref.Reference 的子类.除了幻象引用（因为 get 永远返回 null），如果对象还没有被销毁，<br>都可以通过 get 方法获取原有对象。利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态</li>\n<li>对于软引用、弱引用之类，垃圾收集器可能会存在二次确认的问题，以保证处于弱引用状态的对象，没有改变为强引用。</li>\n<li>如果我们错误的保持了强引用（比如，赋值给了 static 变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄漏。<br>检查弱引用指向对象是否被垃圾收集，也是诊断是否有特定内存泄漏的一个思路，如果我们的框架使用到弱引用又怀疑有内存泄漏，就可以从这个角度检查。</li>\n<li>引用队列（ReferenceQueue）使用<ul>\n<li>创建各种引用并关联到响应对象时，可以选择是否需要关联引用队列</li>\n<li>JVM 会在特定时机将引用 enqueue 到队列里，可以从队列里获取引用（remove 方法有获取的意思）进行相关后续逻辑</li>\n<li>尤其是幻象引用，get 方法只返回 null，如果再不指定引用队列，基本就没有意义了。</li>\n</ul>\n</li>\n<li>显式地影响软引用垃圾收集<ul>\n<li>软引用通常会在最后一次引用后，还能保持一段时间，默认值是根据堆剩余空间计算的（以 M bytes 为单位）</li>\n<li>XX:SoftRefLRUPolicyMSPerMB 参数，我们可以以毫秒（milliseconds）为单位设置</li>\n<li>对于 Client 模式剩余空间是计算当前堆里空闲的大小,而对于 server 模式 JVM，则是根据 -Xmx 指定的最大值来计算。不要过于依赖它</li>\n</ul>\n</li>\n<li>诊断 JVM 引用情况<ul>\n<li>HotSpot JVM PrintReferenceGC</li>\n<li>JDK 9类似 PrintGCTimeStamps 和 PrintReferenceGC 已经不再存在</li>\n</ul>\n</li>\n<li>Reachability Fence<ul>\n<li>通过底层 API 来达到强引用的效果</li>\n<li>按照 Java 语言规范，如果一个对象没有指向强引用，就符合垃圾收集的标准，有些时候，对象本身并没有强引用，但是也许它的部分属性还在被使用.<br>需要一个方法，在没有强引用情况下，通知 JVM 对象是在被使用的。</li>\n<li>reachabilityFence 大多使用在 Executors 或者类似新的 HTTP/2 客户端代码中，大部分都是异步调用的情况</li>\n<li>将需要 reachability 保障的代码段利用 try-finally 包围起来，在 finally 里明确声明对象强可达。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>数据类型</p>\n<ol>\n<li><p>基本类型</p>\n<p>|keyWord|package|size|range|default|<br>|—|—|—|—|—|<br>|boolean|Boolean|1byte字节、8bit位|true，false JVM 会在编译时期将 boolean 类型的数据转换为 int，1 true，0 false|false|<br>|byte|Byte|1byte字节、8bit位|能存256个数，正负各128个，0放在正数一半 –&gt; -128~127|0|<br>|char|Character|2byte字节、16bit位|能存65536个，对应Ascii码表，不需要负数，0~65535|’\\u0000’|<br>|short|Short|2byte字节、16bit位|能存65536个数，正负各32768个,0放正数一半 –&gt; -32768~32767|0|<br>|int|Integer|4byte字节、32bit位|能存4294967296个数，正负各2147483648个,0放正数一半 –&gt; -2147483648~2147483647|0|<br>|long|Long|8byte字节、64bit位|能存4294967296个数，正负各一半,0放正数一半 –&gt; 9223372036854775808~9223372036854775807|0L|<br>|float|Float|4byte字节、32bit位|符号位（sign）占用1位，用来表示正负数，指数位（exponent）占用8位，用来表示指数，小数位（fraction）占用23位，用来表示小数，不足位数补0。|0.0F|<br>|double|Double|8byte字节、64bit位|符号位（sign）占用1位，指数位（exponent）占用11位，小数位（fraction）占用52位，不足位数补0。|0.0D|</p>\n</li>\n<li><p>包装类型</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer x = <span class=\"number\">2</span>;     <span class=\"comment\">// 装箱</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> y = x;         <span class=\"comment\">// 拆箱</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缓存池</p>\n<ul>\n<li>new Integer(123) 每次都会新建一个对象；</li>\n<li>Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。</li>\n<li><p>先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，<br>那么就会引用相同的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer m = <span class=\"number\">123</span>;</span><br><span class=\"line\">Integer n = <span class=\"number\">123</span>;</span><br><span class=\"line\">System.out.println(m == n); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>String</p>\n<ol>\n<li>概：<ul>\n<li>final 不可被继承。</li>\n<li>Java 8 内部使用 char 数组存储数据</li>\n<li>Java 9 改用 byte 数组存储字符串，同时使用 coder 来标识使用了哪种编码。</li>\n</ul>\n</li>\n<li><p>不可变的好处</p>\n<ul>\n<li>缓存 hash 值：因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。<br>不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</li>\n<li>String Pool 的需要： 如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。<br>只有 String 是不可变的，才可能使用 String Pool。</li>\n<li>安全性：String 经常作为参数，String 不可变性可以保证参数不可变。<br>例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，<br>改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。</li>\n<li>线程安全:</li>\n</ul>\n</li>\n<li><p>String Pool</p>\n<ul>\n<li>字符串常量池（String Pool）保存着所有字符串字面量（literal strings），<br>这些字面量在编译时期就确定。</li>\n<li><p>当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等<br>（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；<br>否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">System.out.println(s1 == s2);           <span class=\"comment\">// false</span></span><br><span class=\"line\">String s3 = s1.intern();</span><br><span class=\"line\">String s4 = s1.intern();</span><br><span class=\"line\">System.out.println(s3 == s4);           <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>采用字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s5 = <span class=\"string\">\"bbb\"</span>;</span><br><span class=\"line\">String s6 = <span class=\"string\">\"bbb\"</span>;</span><br><span class=\"line\">System.out.println(s5 == s6);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。<br>而在 Java 7，String Pool 被移到堆中。<br>这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>\n</li>\n</ul>\n</li>\n<li><p>new String(“abc”)</p>\n<ul>\n<li>“abc” 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个 “abc” 字符串字面量</li>\n<li><p>而使用 new 的方式会在堆中创建一个字符串对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewStringTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反编译得到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">// ...</span><br><span class=\"line\">   #2 = Class              #18            // java/lang/String</span><br><span class=\"line\">   #3 = String             #19            // abc</span><br><span class=\"line\">// ...</span><br><span class=\"line\">  #18 = Utf8               java/lang/String</span><br><span class=\"line\">  #19 = Utf8               abc</span><br><span class=\"line\">// ...</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=3, locals=2, args_size=1</span><br><span class=\"line\">         0: new           #2                  // class java/lang/String</span><br><span class=\"line\">         3: dup</span><br><span class=\"line\">         4: ldc           #3                  // String abc</span><br><span class=\"line\">         6: invokespecial #4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class=\"line\">         9: astore_1</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<p>在 Constant Pool 中，#19 存储这字符串字面量 “abc”，<br>#3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。<br>在 main 方法中，0: 行使用 new #2 在堆中创建一个字符串对象，<br>并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。</p>\n</li>\n<li><p>String 构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.value = original.value;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.hash = original.hash;</span><br></pre></td></tr></table></figure>\n<p>将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>运算</p>\n<ol>\n<li>参数传递 都是值传递，对象也是地址当成值传递</li>\n<li><p>float 与 double</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// float f = 1.1; //这个是把double赋值给了float，Java 不能隐式执行向下转型，因为这会使得精度降低。</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> f = <span class=\"number\">1.1f</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐式类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> s1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// s1 = s1 + 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是使用 += 或者 ++ 运算符可以执行隐式类型转换。</span></span><br><span class=\"line\">s1 += <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// s1++;</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = (<span class=\"keyword\">short</span>) (s1 + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>switch</p>\n<ul>\n<li>从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。</li>\n<li>switch 不支持 long，是因为 switch 的设计初衷是对那些只有少数的几个值进行等值判断，<br>如果值过于复杂，那么还是用 if 比较合适。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>继承</p>\n<ol>\n<li>访问权限<ol>\n<li>private 设计良好的模块会隐藏所有的实现细节,称为信息隐藏或封装.<br>因此访问权限应当尽可能地使每个类或者成员不被外界访问。</li>\n<li>protected 在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。<br>子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别(里氏替换原则)</li>\n<li>public 类可见表示其它类可以用这个类创建实例对象。<br>成员可见表示其它类可以用这个类的实例对象访问到该成员；</li>\n<li>不加访问修饰符(default) 包级可见</li>\n</ol>\n</li>\n<li>抽象类与接口<ol>\n<li>抽象类<ul>\n<li>抽象类和抽象方法都使用 abstract 关键字进行声明</li>\n<li>抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。</li>\n<li>抽象类不能被实例化，需要继承抽象类才能实例化其子类。</li>\n</ul>\n</li>\n<li>接口<ul>\n<li>Java 8 之前，接口可以看成是一个完全抽象的类，不能有任何的方法实现。</li>\n<li>Java 8 开始，接口可以有默认的方法实现，因为不支持默认方法的接口的维护成本太高了。<br>在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。</li>\n<li>接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。</li>\n<li>接口的字段默认都是 static 和 final 的。</li>\n</ul>\n</li>\n<li>比较<ul>\n<li>从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，<br>即子类对象必须能够替换掉所有父类对象。<br>而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，<br>并不要求接口和实现接口的类具有 IS-A 关系。</li>\n<li>从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。</li>\n<li>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。</li>\n<li>接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。</li>\n</ul>\n</li>\n<li>使用选择<ol>\n<li>使用接口<ul>\n<li>需要让不相关的类都实现一个方法，<br>例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；</li>\n<li>需要使用多重继承。</li>\n</ul>\n</li>\n<li>使用抽象类<ul>\n<li>需要在几个相关的类中共享代码。</li>\n<li>需要能控制继承来的成员的访问权限，而不是都为 public。</li>\n<li>需要继承非静态和非常量字段。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>super<ul>\n<li>访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。</li>\n<li>访问父类的成员：如果子类重写了父类的某个方法，可以通过使用 super 关键字来引用父类的方法实现。</li>\n</ul>\n</li>\n<li><p>重写与重载</p>\n<ol>\n<li>重写（Override）<ul>\n<li>继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。</li>\n<li>里式替换原则<ol>\n<li>子类方法的访问权限必须大于等于父类方法；</li>\n<li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>重载（Overload）</p>\n<ul>\n<li><p>存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(D obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"A and D\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(A obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"A and A\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(B obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"B and B\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(A obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"B and A\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a1 = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        A a2 = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">        B b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">        C c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">        D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a1为A类，b为B类，先找A类中show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A</span></span><br><span class=\"line\">        System.out.println(a1.show(b)); <span class=\"comment\">//A and A</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a1为A类，c为C类，先找A类中show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 找A类中show(B obj)，因为C的父类是B，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A</span></span><br><span class=\"line\">        System.out.println(a1.show(c));<span class=\"comment\">//A and A</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a1为A类，d为D类，先找A类中show(D obj)，找到，显示A and D</span></span><br><span class=\"line\">        System.out.println(a1.show(d));<span class=\"comment\">//A and D</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，</span></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，先找A类中show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后，找A类中的show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A</span></span><br><span class=\"line\">        System.out.println(a2.show(b));<span class=\"comment\">//B and A</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，</span></span><br><span class=\"line\">        <span class=\"comment\">// c为C类，先找A类中show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后，找A类中的show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A</span></span><br><span class=\"line\">        System.out.println(a2.show(c));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，</span></span><br><span class=\"line\">        <span class=\"comment\">// d为D类，先找A类中show(D obj)，有,所以 A and D</span></span><br><span class=\"line\">        System.out.println(a2.show(d));<span class=\"comment\">//A and D</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，b为B类，先找B类中show(B obj)，找到，显示B and B</span></span><br><span class=\"line\">        System.out.println(b.show(b));<span class=\"comment\">//B and B</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，c为C类，先找B类中show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// B的父类为A，找A类中的show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后找B类中的show（B）找到，显示B and B</span></span><br><span class=\"line\">        System.out.println(b.show(c));<span class=\"comment\">//B and B</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，d为D类，先找B类中show(D obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// B的父类为A，找A类中的show(D obj)，找到，显示A and D</span></span><br><span class=\"line\">        System.out.println(b.show(d));<span class=\"comment\">//A and D</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>涉及到重写时，方法调用的优先级为：</p>\n</li>\n<li>this.show(O)</li>\n<li>super.show(O)</li>\n<li>this.show((super)O)</li>\n<li>super.show((super)O)</li>\n</ol>\n</li>\n<li><p>Object 通用方法</p>\n<ol>\n<li><p>equals()</p>\n<ol>\n<li>等价关系<ol>\n<li>自反性</li>\n<li>对称性</li>\n<li>传递性</li>\n<li>一致性 多次调用 equals() 方法结果不变</li>\n<li>与 null 的比较<ul>\n<li>对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false</li>\n<li>对象是null在调用.equals()方法时会报空指针异常</li>\n<li>null == null 返回true</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>等价与相等<ul>\n<li>对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。</li>\n<li>对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。</li>\n</ul>\n</li>\n<li>实现<ul>\n<li>检查是否为同一个对象的引用，如果是直接返回 true； if (this == o) return true;</li>\n<li>传入对象是否为空，空返回false；检查是否是同一个类型，如果不是，直接返回 false；  if (o == null || getClass() != o.getClass()) return false;</li>\n<li>将 Object 对象进行转型；EqualExample that = (EqualExample) o;</li>\n<li>判断每个关键域是否相等。 判断你定义相等的每个成员变量是否相等</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>hashCode()</p>\n<ul>\n<li>hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。<br>等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。</li>\n<li>在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。</li>\n<li>理想的散列函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的散列值上。<br>这就要求了散列函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，<br>然后组成一个 R 进制的整数。R 一般取 31，因为它是一个奇素数，如果是偶数的话，<br>当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位。</li>\n<li><p>一个数与 31 相乘可以转换成移位和减法：<code>31*x == (x&lt;&lt;5)-x</code>，编译器会自动进行这个优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">(<span class=\"keyword\">char</span>[] chars)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> var1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var1 == <span class=\"number\">0</span> &amp;&amp; chars.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] var2 = chars;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> var3 = <span class=\"number\">0</span>; var3 &lt; chars.length; ++var3) &#123;</span><br><span class=\"line\">                var1 = <span class=\"number\">31</span> * var1 + var2[var3];</span><br><span class=\"line\">                <span class=\"comment\">//var1 = (var1 &lt;&lt; 5) - var1 +var2[var3];</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"this.hash = \"</span> + var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> var1;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h6 id=\"常见hash算法\"><a href=\"#常见hash算法\" class=\"headerlink\" title=\"常见hash算法\"></a>常见hash算法</h6><ol>\n<li>Object类的hashCode.返回对象的内存地址经过处理后的结构，由于每个对象的内存地址都不一样，所以哈希码也不一样。</li>\n<li>String类的hashCode.根据String类包含的字符串的内容，根据一种特殊算法返回哈希码，只要字符串内容相同，返回的哈希码也相同。</li>\n<li>Integer类，返回的哈希码就是Integer对象里所包含的那个整数的数值，<br>例如Integer i1=new Integer(100),i1.hashCode的值就是100 。由此可见，2个一样大小的Integer对象，返回的哈希码也一样。</li>\n</ol>\n<ul>\n<li>哈希码要完成这么一件事，首先要保证如果equlas出来的结果相等，那么hashCode也相等。</li>\n<li>一般的线性表，树中，记录在结构中的相对位置是随机的，即和记录的关键字之间不存在确定的关系，<br>因此，在结构中查找记录时需进行一系列和关键字的比较。这一类查找方法建立在“比较“的基础上，<br>查找的效率依赖于查找过程中所进行的比较次数。（链表最基础的比较，就是遍历比较，时间都花在了这个上）</li>\n<li>理想的情况是能直接找到需要的记录，因此必须在记录的存储位置和它的关键字之间建立一个确定的对应关系f，<br>使每个关键字和结构中一个唯一的存储位置相对应。（通过单独识别码去找到该对象，建立联系）</li>\n</ul>\n<ol start=\"4\">\n<li>直接定址法：有一个从1到100岁的人口数字统计表，其中，年龄作为关键字，<br>哈希函数取关键字自身或者关键字的某个线性函数。取关键字自身效率不高,时间复杂度是O(1),空间复杂度是O(n),n是关键字的个数。</li>\n<li>数字分析法：重复的可能性大的不取，取的话造成冲突的机会增加，所以尽量不取可能重复的关键字。</li>\n<li>平方取中法： 取关键字平方后的中间几位为哈希地址。<br>{421，423，436}，平方之后的结果为{177241，178929，190096}，那么可以取{72，89，00}作为Hash地址。</li>\n<li>折叠法： 将关键字分割成位数相同的几部分（最后一部分的位数可以不同），<br>然后取这几部分的叠加和（舍去进位）作为哈希地址，这方法称为折叠法。<br>图书的ISBN号为8903-241-23，可以将address(key)=89+03+24+12+3作为Hash地址。</li>\n<li>除留余数法: 取关键字被某个不大于哈希表表长m的数p除后所得余数为哈希地址。H(key)=key MOD p (p&lt;=m)<br>在这里p的选取非常关键，p选择的好的话，能够最大程度地减少冲突，p一般取不大于m的最大质数。</li>\n<li>随机数法: 选择一个随机函数，取关键字的随机函数值为它的哈希地址.<br>H(key)=random(key) ,其中random为随机函数。通常用于<strong>关键字长度不等</strong>时采用此法。</li>\n</ol>\n<ul>\n<li>冲突：对不同的关键字可能得到同一哈希地址。</li>\n<li><h6 id=\"处理冲突方法\"><a href=\"#处理冲突方法\" class=\"headerlink\" title=\"处理冲突方法\"></a>处理冲突方法</h6></li>\n<li>开放定址法：当一个关键字和另一个关键字发生冲突时，使用某种探测技术在Hash表中形成一个探测序列，<br>然后沿着这个探测序列依次查找下去，当碰到一个空的单元时，则插入其中。Hi=(H(key)+di) MOD m i=1,2,…,k(k&lt;=m-1)<br>比较常用的探测方法有<strong>线性探测法</strong>，比如有一组关键字{12，13，25，23，38，34，6，84，91}，<br>Hash表长为14，Hash函数为address(key)=key%11，当插入12，13，25时可以直接插入，<br>而当插入23时，地址1被占用了，因此沿着地址1依次往下探测(探测步长可以根据情况而定)，<br>直到探测到地址4，发现为空，则将23插入其中。（发现有，则顺延偏移）<br><strong>二次探测再散列</strong>di取值可能为1,-1,2,-2,4,-4,9,-9,16,-16,…k<em>k,-k</em>k(k&lt;=m/2).<br><strong>伪随机探测再散列</strong>di取值可能为伪随机数列.</li>\n<li>链地址法：采用数组和链表相结合的办法，将Hash地址相同的记录存储在一张线性表中，<br>而每张表的表头的序号即为计算得到的Hash地址。如上述例子中，采用链地址法形成的Hash表存储。</li>\n<li>再哈希法: 当发生冲突时，使用第二个、第三个、哈希函数计算地址，直到无冲突时。缺点：计算时间增加。</li>\n<li>建立一个公共溢出区:假设哈希函数的值域为[0,m-1],则设向量HashTable[0..m-1]为基本表，<br>另外设立存储空间向量OverTable[0..v]用以存储发生冲突的记录。</li>\n</ul>\n</li>\n<li>Hash表大小的确定也非常关键，如果Hash表的空间远远大于最后实际存储的记录个数，<br>则造成了很大的空间浪费，如果选取小了的话，则容易造成冲突。<br>在实际情况中，一般需要根据最终记录存储个数和关键字的分布特点来确定Hash表的大小。<br>还有一种情况时可能事先不知道最终需要存储的记录个数，则需要动态维护Hash表的容量，<br>此时可能需要重新计算Hash地址。</li>\n</ul>\n</li>\n<li><p>这里要注意区分三个概念：hashCode值、hash值、hash方法、数组下标</p>\n<ul>\n<li>hashCode值：是KV对中的K对象的hashCode方法的返回值（若没有重写则默认用Object类的hashCode方法的生成值）<br>Object类<code>public native int hashCode();</code>native关键字是系统相关的其他语言实现（C/C++）。</li>\n<li>hash值: 是在hashCode值的基础上又进行了一步运算后的结果，这个运算过程就是<em>hash方法</em>。</li>\n<li>数组下标: 根据该hash值和数组长度计算出数组下标，计算公式：hash值  &amp;（数组长度-1）= 下标。</li>\n<li>HashMap中<em>hash方法</em>：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object var0)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> var1;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> var0 == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : (var1 = var0.hashCode()) ^ var1 &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>toString()</p>\n<ul>\n<li>Object默认实现<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(<span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>clone()</p>\n<ol>\n<li>cloneable</li>\n</ol>\n<ul>\n<li><p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，<br>其它类就不能直接去调用该类实例的 clone() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneExample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CloneExample e1 = <span class=\"keyword\">new</span> CloneExample();</span><br><span class=\"line\"><span class=\"comment\">// CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object'</span></span><br></pre></td></tr></table></figure>\n<p>重写 clone() 得到以下实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CloneExample &#123;</span><br><span class=\"line\">    private int a;</span><br><span class=\"line\">    private int b;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public CloneExample clone() throws CloneNotSupportedException &#123;</span><br><span class=\"line\">        return (CloneExample)super.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CloneExample e1 = <span class=\"keyword\">new</span> CloneExample();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    CloneExample e2 = e1.clone();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.CloneNotSupportedException: CloneExample</span><br></pre></td></tr></table></figure>\n<p>上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。</p>\n</li>\n<li>clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。<br>Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，<br>就会抛出 CloneNotSupportedException。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneExample</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>浅拷贝<ul>\n<li>拷贝对象和原始对象的引用类型引用同一个对象。</li>\n</ul>\n</li>\n<li><p>深拷贝</p>\n<ul>\n<li>拷贝对象和原始对象的引用类型引用不同对象。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> DeepCloneExample <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">    DeepCloneExample result = (DeepCloneExample) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    result.arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        result.arr[i] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>clone() 的替代方案</p>\n<ul>\n<li>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。<br>Effective Java 书上讲到，最好不要去使用 clone()</li>\n<li>可以使用拷贝构造函数</li>\n<li>拷贝工厂来拷贝一个对象。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>关键字<ol>\n<li><a href=\"#final\">final</a></li>\n<li>static<ol>\n<li>静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，<br>可以直接通过类名来访问它。静态变量在内存中只存在一份。</li>\n</ol>\n<ul>\n<li>实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。</li>\n</ul>\n<ol start=\"2\">\n<li>静态方法：</li>\n</ol>\n<ul>\n<li>静态方法在类加载的时候就存在了，它不依赖于任何实例。<br>所以静态方法必须有实现，也就是说它<strong>不能是抽象方法</strong>。</li>\n<li>只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。</li>\n</ul>\n<ol start=\"3\">\n<li>静态语句块：</li>\n</ol>\n<ul>\n<li>静态语句块在类初始化时运行一次。</li>\n</ul>\n<ol start=\"4\">\n<li>静态内部类:</li>\n</ol>\n<ul>\n<li>非静态内部类依赖于外部类的实例，而静态内部类不需要。</li>\n<li>静态内部类不能访问外部类的非静态的变量和方法。</li>\n</ul>\n<ol start=\"5\">\n<li>静态导包:</li>\n</ol>\n<ul>\n<li>在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。<br><code>import static com.xxx.ClassName.*</code></li>\n</ul>\n<ol start=\"6\">\n<li>初始化顺序</li>\n</ol>\n<ul>\n<li>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。</li>\n<li>存在继承的情况下，初始化顺序为：<ol>\n<li>父类（静态变量、静态语句块）</li>\n<li>子类（静态变量、静态语句块）</li>\n<li>父类（实例变量、普通语句块）</li>\n<li>父类（构造函数）</li>\n<li>子类（实例变量、普通语句块）</li>\n<li>子类（构造函数）</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>反射</p>\n<ul>\n<li>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，<br>会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</li>\n<li>类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。<br>也可以使用 Class.forName(“com.mysql.jdbc.Driver”) 这种方式来控制类的加载，<br>该方法会返回一个 Class 对象。</li>\n<li>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。</li>\n<li>Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：<ol>\n<li>Field: 可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；</li>\n<li>Method: 可以使用 invoke() 方法调用与 Method 对象关联的方法；</li>\n<li>Constructor: 可以用 Constructor 创建新的对象。</li>\n</ol>\n</li>\n<li><p>反射的优点:</p>\n<ol>\n<li>可扩展性: 用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。</li>\n<li>类浏览器和可视化开发环境: 一个类浏览器需要可以枚举类的成员。<br>可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。</li>\n<li>调试器和测试工具: 调试器需要能够检查一个类里的私有成员。<br>测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。</li>\n</ol>\n</li>\n<li><p>反射的缺点:</p>\n<ol>\n<li>性能开销 ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。<br>因此，反射操作的效率要比那些非反射操作低得多。<br>我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。</li>\n<li>安全限制 ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。<br>如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。</li>\n<li>内部暴露 ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），<br>所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。<br>反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#Throwable\">异常</a></p>\n</li>\n<li><p>泛型</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// T stands for \"Type\"</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T t;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T t)</span> </span>&#123; <span class=\"keyword\">this</span>.t = t; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> t; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>泛型类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;Integer&gt; integerBox = <span class=\"keyword\">new</span> Box&lt;Integer&gt;();</span><br><span class=\"line\">Box&lt;Double&gt; doubleBox = <span class=\"keyword\">new</span> Box&lt;Double&gt;();</span><br><span class=\"line\">Box&lt;String&gt; stringBox = <span class=\"keyword\">new</span> Box&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>泛型方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;K, V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">compare</span><span class=\"params\">(Pair&lt;K, V&gt; p1, Pair&lt;K, V&gt; p2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp;</span><br><span class=\"line\">               p1.getValue().equals(p2.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> V value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pair</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKey</span><span class=\"params\">(K key)</span> </span>&#123; <span class=\"keyword\">this</span>.key = key; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(V value)</span> </span>&#123; <span class=\"keyword\">this</span>.value = value; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>   </span>&#123; <span class=\"keyword\">return</span> key; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pair&lt;Integer, String&gt; p1 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">1</span>, <span class=\"string\">\"apple\"</span>);</span><br><span class=\"line\">Pair&lt;Integer, String&gt; p2 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">2</span>, <span class=\"string\">\"pear\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> same = Util.&lt;Integer, String&gt;compare(p1, p2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>边界符</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countGreaterThan</span><span class=\"params\">(T[] anArray, T elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T e : anArray)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e &gt; elem)  <span class=\"comment\">// compiler error 因为除了short, int, double, long, float, byte, char等原始类型，其他的类并不一定能使用操作符&gt;</span></span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 告诉编译器它们都至少实现了compareTo方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countGreaterThan</span><span class=\"params\">(T[] anArray, T elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T e : anArray)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.compareTo(elem) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通配符</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">boxTest</span><span class=\"params\">(Box&lt;Number&gt; n)</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p> 虽然Integer和Double是Number的子类，但是在泛型中Box<integer>或者Box<double>与Box<number>之间并没有任何的关系</number></double></integer></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p> 我们创建了一个泛型类Reader，然后在f1()中当我们尝试Fruit f = fruitReader.readExact(apples);<br> 编译器会报错，因为List<fruit>与List<apple>之间并没有任何的关系。</apple></fruit></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericReading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Apple&gt; apples = Arrays.asList(<span class=\"keyword\">new</span> Apple());</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Fruit&gt; fruit = Arrays.asList(<span class=\"keyword\">new</span> Fruit());</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reader</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">readExact</span><span class=\"params\">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Reader&lt;Fruit&gt; fruitReader = <span class=\"keyword\">new</span> Reader&lt;Fruit&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// Errors: List&lt;Fruit&gt; cannot be applied to List&lt;Apple&gt;.</span></span><br><span class=\"line\">        <span class=\"comment\">// Fruit f = fruitReader.readExact(apples);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        f1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 按照我们通常的思维习惯，Apple和Fruit之间肯定是存在联系，<br> 然而编译器却无法识别，那怎么在泛型代码中解决这个问题呢？我们可以通过使用通配符来解决这个问题：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CovariantReader</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">readCovariant</span><span class=\"params\">(List&lt;? extends T&gt; list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">f2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CovariantReader&lt;Fruit&gt; fruitReader = <span class=\"keyword\">new</span> CovariantReader&lt;Fruit&gt;();</span><br><span class=\"line\">    Fruit f = fruitReader.readCovariant(fruit);</span><br><span class=\"line\">    Fruit a = fruitReader.readCovariant(apples);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    f2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这样就相当与告诉编译器，fruitReader的readCovariant方法接受的参数只要是满足Fruit的子类就行(包括Fruit自身)，<br> 这样子类和父类之间的关系也就关联上了。</p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"project":{"Apple 官网临摹":{"title":"Apple 官网临摹","subTitle":"根据美版apple官网临摹","img_link":"http://o7bkkhiex.bkt.clouddn.com/item-apple.jpg","use":["jQuery"],"link":"http://haojen.github.io/apple-linmo/","data":"2016.3","direction":"临摹 2016 年三月份 Apple 美版单页面。"},"Anisina (阿尼丝娜)":{"title":"Anisina","subTitle":"基于 Hexo 制作的个人博客主题","img_link":"http://o7bkkhiex.bkt.clouddn.com/Anisina.png","use":["jQuery","Bootstrap","Node.js","EJS","Hexo","SASS"],"link":"http://haojen.github.io/","data":"2016.5","direction":"Hexo 是某位台湾友人基于 Node.js 编写的博客框架"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h4 id=\"有时候走了太久太远，都忘了为什么出发了。\"><a href=\"#有时候走了太久太远，都忘了为什么出发了。\" class=\"headerlink\" title=\"有时候走了太久太远，都忘了为什么出发了。\"></a>有时候走了太久太远，都忘了为什么出发了。</h4><ol>\n<li>面向过程和面向对象<ol>\n<li>面向过程<ol>\n<li>概：面向对象在我印象里是最初在C中获得的，注重顺序思维，结构化编程，即使封装<br>函数也是为了复用，而不是降低耦合。</li>\n<li>优点：比面向对象性能更好，不用实例化，节省资源。性能因素占绝对重要性时，<br>优考虑面向过程的开发。</li>\n<li>缺点：流式思维，不符合客观世界规律，比起面向对象，更难维护、复用和、扩展。</li>\n</ol>\n</li>\n<li>面向对象：<ol>\n<li>概：是现实世界关系的抽象，符合现实世界的逻辑规律。</li>\n<li>优点：抑郁维护复用和扩展。有封装、继承和多态的特性。</li>\n<li>缺点：资源开销大，性能比面向过程差。</li>\n</ol>\n</li>\n<li>言之： 现在除了特别对性能有要求的一些项目，对于更多的业务系统讲，机器资源一般是<br>较为满足的，更注重的是易维护，易扩展，业务系统大概占据了软件开发项目八成，所以在业务系统上，<br>采用面向对象的方式进行开发。（现在的互联网行业人员流动那么大，程序员的编程水平习惯参差不齐，<br>如果还不注重维护性和扩展性的话，那大概就是前人挖坑闪后人，后人欲填其坑，其坑之大之深，难以处之。<br>故后人坑中再掘也，天坑套地坑，后人之后人无穷匮也，故现连环坑。）</li>\n</ol>\n</li>\n<li><p>Java的特点</p>\n<ol>\n<li>优点：<ol>\n<li>学习成本底。（相比C和C++吧，比Python还差些 :smile:）</li>\n<li>面向对象。（C++也是面向对象的，严格的说面向对象是一种思想）</li>\n<li>平台无关。可移植性好。（只要这个平台有对应的jvm，你只管敲你的Java代码，<br>编译成class后，jvm去生产适配各个平台的机器指令。）</li>\n<li>可靠性。（因为强类型？怎么就比其他语言更可靠了？质疑）</li>\n<li>安全性。（和强类型有关，也没有C里指针的各种乱指）</li>\n<li>多线程支持。（C++没有内置的对多线程的支持，需要调用系统的多线程支持）</li>\n<li>方便的网络编程。（简化了网络编程是指对JavaWeb方向的扩展么？确实在C里网络编程中的<br>通信一些东西确实比较复杂。）</li>\n<li>编译与解释并存。（Java确实从解释语言里学了很多，这点是我很欣赏的，知道发展自身，<br>才是生存下去的道理。）</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>初期性能经常与C系比较，确实差一些，但是现在的java性能已经不能被诟病了。</li>\n<li>过于形式主义的语法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>JVM JDK JRE</p>\n<ol>\n<li>JVM（Java Virtual Machine）<ul>\n<li>运行java字节码，字节码class文件jvm能理解</li>\n<li>对不同系统有不同实现</li>\n<li>class文件只面向jvm，各个平台上都是一样的</li>\n<li>一方面解决了解释型语言效率低问题</li>\n<li>保留了解释性语言可移植性</li>\n<li>在不同平台上不需要重新编译，可以直接运行</li>\n<li>.java文件  – jdk中的javac –&gt; .class文件</li>\n<li>.class文件  – jvm –&gt; 二进制机器码。jvm类加载器首先加载字节码文件，<br>解释器逐行解释执行。但是热点代码会多次被解释，所以引进了JIM(Just In Time)编译器。<br>运行时编译器，完成一次编译以后，字节码对应的机器码保存，下次调用到直接使用。<br>这一部分属于编译后调用，每次重新编译的是解释的部分。</li>\n<li>HotSpot 惰性评估(Lazy Evaluation)  热点代码是需要JIT编译的部分<br>JVM根据每次执行的情况收集信息并且相应的优化 执行次数越多，速度越快<br>JDK9引入AOT(Ahead of Time Compilation)编译，直接将字节码编译成机器码，<br>避免了JIT模式下的预热开销。</li>\n<li>支持分层编译和AOT协作使用 <code>？？？</code>   AOT编译质量不如JIT<code>？？？</code></li>\n<li>字节码 和 不同系统的JVM实现 保证了一次编译到处运行</li>\n<li>解释和编译混合（-Xmixed）</li>\n<li>JVM会进行上万次调用以收集足够的信息进行高效的编译，client 模式这个门限是 1500 次.Hotspot JVM 内置了两个不同的 JIT compiler，C1 对应前面说的 client 模式，<br>适用于对于启动速度敏感的应用，比如普通 Java 桌面应用；C2 对应 server 模式，<br>它的优化是为长时间运行的服务器端应用设计的</li>\n<li>默认是采用所谓的分层编译（TieredCompilation)</li>\n<li>“-Xint” JVM 只进行解释执行，不对代码进行编译,抛弃了 JIT 可能带来的性能优势.</li>\n<li>“-Xcomp” JVM 关闭解释器，不要进行解释执行 最大优化级别. 可能会导致 JVM 启动变慢非常多，<br>同时有些 JIT 编译器优化方式，比如分支预测，如果不进行 profiling，往往并不能进行有效优化。</li>\n<li>AOT（Ahead-of-Time Compilation），直接将字节码编译成机器代码，<br>这样就避免了 JIT 预热等各方面的开销</li>\n<li>大量 JVM 语言</li>\n</ul>\n</li>\n<li>JDK<ul>\n<li>Java Development Kit</li>\n<li>包括JRE</li>\n<li>编译器</li>\n<li>其他工具</li>\n</ul>\n</li>\n<li>JRE<ul>\n<li>Java Runtime Environment</li>\n<li>运行已编译java程序</li>\n<li>包括jvm java类库 java命令 其他基础构件</li>\n<li>包含jsp的web程序，也需要jdk，因为需要将JSP转换为Java servlet，需要jsk编译servlet。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Oracle JDK 和 OpenJDK</p>\n<ol>\n<li>Oracle JDK<ul>\n<li>不是完全开源的</li>\n<li>更稳定，优化更多，效率可能更高？</li>\n</ul>\n</li>\n<li>OpenJDK<ul>\n<li>开源</li>\n<li>GPL许可协议</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>Java和C++的区别</p>\n<ol>\n<li>共通：面向对象，支持继承封装和多态</li>\n<li>java: 不提供指针访问内存，更安全   类单继承   接口多继承  内存管理机制</li>\n<li>C++： 提供指针   类可以多继承   需要程序员释放内存</li>\n</ol>\n</li>\n<li><p>字符型常量和字符串常量的区别<br> 1.</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> c = <span class=\"string\">'c'</span>;  String s = <span class=\"string\">\"sss\"</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>字符相当于ascII值，可以参加运算。字符串代表地址，即在内存中存放位置。</li>\n<li>char类型占2个字节 2*8bit = 16bit；字符串至少一个，结束标志（这句并不对，<br>在C++中，以\\0作为结束，但是在Java中，String是对象，有长度属性，不需要表示结尾）</li>\n</ol>\n</li>\n<li><p>构造器 Constructor 是否可被 override</p>\n<ul>\n<li>父类的私有属性和构造方法并不能被继承</li>\n<li>Constructor 也就不能被 override（重写）</li>\n<li>可以overload（重载）</li>\n</ul>\n</li>\n<li><p>Java 面向对象编程三大特性: 封装 继承 多态</p>\n<ol>\n<li>封装把对象属性私有化，提供可以被外界访问的属性的方法，<br>可不提供，但是如果一个类没有提供给外界访问的方法，那这个类也没有什么意义了。</li>\n<li>继承是使用已存在的类的定义作为基础建立新类的技术，<br>新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。<br>通过使用继承能复用以前的代码。</li>\n<li><ul>\n<li>子类有父类非private属性和方法<ul>\n<li>子类可以有自己的属性和方法</li>\n<li>子类可以重写父类非private方法（构造方法呢？基于自己的+super()）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多态指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用，<br>在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，<br>该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。<ul>\n<li>继承实现（多个子类对同一方法的重写）</li>\n<li>接口实现（实现接口并覆盖接口中同一方法）。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>String StringBuffer 和 StringBuilder</p>\n<ol>\n<li>可变性<ul>\n<li>String -&gt; private final char value[];  不可变</li>\n<li>StringBuilder 与 StringBuffer 都继承AbstractStringBuilder    char[] value; 可变</li>\n</ul>\n</li>\n<li>线程安全性<ul>\n<li>String final 常量线程安全</li>\n<li>StringBuilder 没有对方法加同步锁，非线程安全</li>\n<li>StringBuffer  加了同步锁，线程安全  ，内部使用 synchronized 进行同步</li>\n</ul>\n</li>\n<li>性能<ul>\n<li>对String变量改变赋值，生成新String对象，指针指向新的String对象</li>\n<li>StringBuffer每次操作自己</li>\n<li>StringBuilder 有更高的性能</li>\n</ul>\n</li>\n<li>少量数据为了方便直接String   操作大量数据 单线程StringBuilder  多线程StringBuffer</li>\n</ol>\n</li>\n<li><p>在一个静态方法内调用一个非静态成员为什么是非法的</p>\n<ul>\n<li>静态方法不通过对象去调用方法</li>\n</ul>\n</li>\n<li><p>在 Java 中定义一个不做事且没有参数的构造方法的作用</p>\n<ul>\n<li>继承 子类中的super() 调用父类中无参数构造函数 如果出现这种情况，而父类中没有，报错</li>\n</ul>\n</li>\n<li><p>import java和javax有什么区别</p>\n<ul>\n<li>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来说使用。</li>\n<li>然而随着时间的推移，javax 逐渐的扩展成为 Java API 的组成部分。</li>\n<li>但是，将扩展从 javax 包移动到 java 包将是太麻烦了，最终会破坏一堆现有的代码。</li>\n<li>因此，最终决定 javax 包将成为标准API的一部分。</li>\n<li>所以，实际上java和javax没有区别。这都是一个名字。</li>\n</ul>\n</li>\n<li><p>接口和抽象类的区别是什么</p>\n<ol>\n<li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法实现</li>\n<li>接口中的实例变量默认是 final 类型的，而抽象类中则不一定</li>\n<li>一个类可以实现多个接口，但最多只能实现一个抽象类(java中接口和继承的区别)</li>\n<li>一个类实现接口的话要实现接口的所有方法，而抽象类不一定(不实现默认使用父类)</li>\n<li>接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象<br>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</li>\n</ol>\n</li>\n<li><p>成员变量与局部变量的区别有那些</p>\n<ol>\n<li>从语法形式上<ul>\n<li>看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数</li>\n<li>成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；</li>\n<li>成员变量和局部变量都能被 final 所修饰；</li>\n</ul>\n</li>\n<li>从变量在内存中的存储方式来看<ul>\n<li>如果成员变量是使用static修饰的，那么这个成员变量是属于类的</li>\n<li>如果没有使用使用static修饰，这个成员变量是属于实例的。</li>\n<li>而对象存在于堆内存，局部变量存在于栈内存</li>\n</ul>\n</li>\n<li>从变量在内存中的生存时间上看<ul>\n<li>成员变量是对象的一部分，它随着对象的创建而存在</li>\n<li>局部变量随着方法的调用而自动消失。</li>\n</ul>\n</li>\n<li>成员变量如果没有被赋初值<ul>\n<li>则会自动以类型的默认值而赋值(一种情况例外被 final 修饰的成员变量也必须显示地赋值)</li>\n<li>局部变量则不会自动赋值。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>创建一个对象用什么运算符?对象实体与对象引用有何不同?</p>\n<ul>\n<li>new运算符，new创建对象实例（对象实例在堆内存中）</li>\n<li>对象引用指向对象实例（对象引用存放在栈内存中）</li>\n<li>一个对象引用可以指向0个或1个对象（一根绳子可以不系气球null，也可以系一个气球）</li>\n<li>一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）获取同一个对象</li>\n</ul>\n</li>\n<li><p>构造方法特性</p>\n<ul>\n<li>名字与类名相同</li>\n<li>没有返回值，但不能用void声明</li>\n<li>生成类的对象自动执行，无需调用</li>\n</ul>\n</li>\n<li><p>静态方法和实例方法有何不同</p>\n<ul>\n<li>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式，<br>调用静态方法可以无需创建对象。静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），<br>而不允许访问实例成员变量和实例方法.</li>\n<li>实例方法只有”对象名.方法名”的方式，实例方法可以访问所有成员和方法</li>\n</ul>\n</li>\n<li><p>在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是帮助子类做初始化工作。</p>\n</li>\n<li><p>== 与 equals</p>\n<ol>\n<li>==<ul>\n<li>它的作用是判断两个对象的地址是不是相等，两个对象是不是同一个对象。</li>\n<li>基本数据类型==比较的是值，引用数据类型==比较的是内存地址</li>\n</ul>\n</li>\n<li>equals()<ul>\n<li>类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li>\n<li>类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；<br>若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li>\n<li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，<br>而 String 的 equals 方法比较的是对象的值。</li>\n<li>创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，<br>如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>hashCode 与 equals</p>\n<ol>\n<li>hashCode<ul>\n<li>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。</li>\n<li>这个哈希码的作用是确定该对象在哈希表中的索引位置。</li>\n<li>hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</li>\n<li>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。<br>这其中就利用到了散列码！（可以快速找到所需要的对象）</li>\n</ul>\n</li>\n<li>为什么要有 hashCode<ul>\n<li>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，<br>同时也会与其他已经加入的对象的 hashcode 值作比较</li>\n<li>如果没有相符的hashcode，HashSet会假设对象没有重复出现。</li>\n<li>但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。</li>\n<li>如果两者相同，HashSet 就不会让其加入操作成功。</li>\n<li>如果不同的话，就会重新散列到其他位置。</li>\n<li>大大减少了 equals 的次数，相应就大大提高了执行速度。</li>\n</ul>\n</li>\n<li>hashCode（）与equals（）的相关规定<ul>\n<li>如果两个对象相等，则hashcode一定也是相同的</li>\n<li>两个对象相等,对两个对象分别调用equals方法都返回true</li>\n<li>两个对象有相同的hashcode值，它们也不一定是相等的</li>\n<li>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</li>\n<li>hashCode() 的默认行为是对堆上的对象产生独特值。<br>如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>为什么Java中只有值传递</p>\n<ul>\n<li>基本类型值，将值拷贝，进行值传递。对象传递的话，将对象的引用（地址）拷贝，进行值传递。<br>但是地址的copy值指向同一个对象，方法对对象成员的改动，即改动了对象在内存里的值，会反映在外部。<br>然而，如果直接换引用，是换了copy的引用，和外部原来的引用并没有关系。</li>\n</ul>\n</li>\n<li><p>线程,程序,进程的基本概念</p>\n<ol>\n<li>线程<ul>\n<li>与进程相似，比进程更小的执行单位。</li>\n<li>一个进程在其执行的过程中可以产生多个线程。</li>\n<li>与进程不同，多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，<br>或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</li>\n</ul>\n</li>\n<li>程序<ul>\n<li>含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中</li>\n<li>程序是静态的代码。</li>\n</ul>\n</li>\n<li>进程<ul>\n<li>是程序的一次执行过程，是系统运行程序的基本单位，进程是动态的。</li>\n<li>系统运行一个程序即是一个进程从创建，运行到消亡的过程。</li>\n<li>一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，<br>每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等。</li>\n<li>当程序在执行时，将会被操作系统载入内存中。</li>\n<li>线程是进程划分成的更小的运行单位。</li>\n<li>线程和进程最大的不同在于，基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。</li>\n<li>进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，<br>而线程则是在同一程序内几乎同时执行一个以上的程序段。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>线程基本状态</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>状态名称</th>\n<th>Point</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NEW</td>\n<td>初始状态，已经构建，没有调用start()方法</td>\n</tr>\n<tr>\n<td>RUNNABLE</td>\n<td>运行状态，就绪状态(调用start()方法，但还没有run) 　+　运行中状态</td>\n</tr>\n<tr>\n<td>BLOCKED</td>\n<td>阻塞状态，阻塞于锁？</td>\n</tr>\n<tr>\n<td>WAITING</td>\n<td>等待状态，需要其他线程通知或者中断</td>\n</tr>\n<tr>\n<td>TIME_WAITING</td>\n<td>超时等待状态，指定时间自行返回</td>\n</tr>\n<tr>\n<td>TERMINATED</td>\n<td>终止线程，执行完毕</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"24\">\n<li><p><a name=\"final\">final</a></p>\n<ol>\n<li><p>变量</p>\n<ul>\n<li>基本数据类型在初始化之后便不能更改</li>\n<li><p>引用类型初始化之后便不能再让其指向另一个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> List&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">strList.add(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">\"world\"</span>);  <span class=\"comment\">// 可以</span></span><br><span class=\"line\">List&lt;String&gt; unmodifiableStrList = List.of(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>);<span class=\"comment\">// List.of创建的本身就是不可变 List</span></span><br><span class=\"line\">unmodifiableStrList.add(<span class=\"string\">\"again\"</span>);<span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>但是被引用的对象本身是可以修改的。</p>\n</li>\n</ul>\n</li>\n<li>类<ul>\n<li>类不能被继承。</li>\n<li>final类中的所有成员方法都会被隐式地指定为final方法。</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>方法锁定，以防任何继承类修改它的含义</li>\n<li>早期的Java实现版本中，会将final方法转为内嵌调用。<br>但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升<br>（现在的Java版本已经不需要使用final方法进行这些优化了）。</li>\n<li>类中所有的private方法都隐式地指定为final。</li>\n</ul>\n</li>\n<li>java.lang 包下面的很多类，相当一部分都被声明成为 final class,有效避免 API 使用者更改基础功能,保证平台安全的必要手段</li>\n<li>final 修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误，甚至，有人明确推荐将所有方法参数、本地变量、成员变量声明成 final。</li>\n<li>final 变量可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值 final 变量，有利于减少额外的同步开销，以省去一些防御性拷贝的必要。</li>\n<li>利用 final 可能有助于 JVM 将方法进行内联???(有待求证)</li>\n<li>关于 setter/getter 方法，很多人喜欢直接用 IDE 一次全部生成，建议最好是你确定有需要时再实现。</li>\n</ol>\n</li>\n<li><p><a name=\"Throwable\">异常</a></p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">  Throwable--&gt;Error;</span><br><span class=\"line\">  Throwable--&gt;Exception;</span><br><span class=\"line\">  Error--&gt;VirtulMachineError;</span><br><span class=\"line\">  Error--&gt;AWTError;</span><br><span class=\"line\">  VirtulMachineError--&gt;StackOverFlowError;</span><br><span class=\"line\">  VirtulMachineError--&gt;OutOfMemoryError;</span><br><span class=\"line\">  Exception--&gt;IOException;</span><br><span class=\"line\">  Exception--&gt;RuntimeException;</span><br><span class=\"line\">  IOException--&gt;EOFException;</span><br><span class=\"line\">  IOException--&gt;FileNotFoundException;</span><br><span class=\"line\">  RuntimeException--&gt;ArrithmeticException;</span><br><span class=\"line\">  RuntimeException--&gt;MissingResourceException;</span><br><span class=\"line\">  RuntimeException--&gt;ClassNotFoundException;</span><br><span class=\"line\">  RuntimeException--&gt;NullPointerException;</span><br><span class=\"line\">  RuntimeException--&gt;IllegalArgumentException;</span><br><span class=\"line\">  RuntimeException--&gt;ArrayIndexOutOfBoundsException;</span><br><span class=\"line\">  RuntimeException--&gt;UnknownTypeException;</span><br></pre></td></tr></table></figure>\n</code></pre><ol>\n<li>Error（错误）<ul>\n<li>程序无法处理的错误，表示运行应用程序中较严重问题。</li>\n<li>大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。<br>例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，<br>将出现 OutOfMemoryError。</li>\n<li>Error发生时，Java虚拟机（JVM）一般会选择线程终止。<ul>\n<li>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，<br>如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。</li>\n<li>错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li>\n<li>对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。</li>\n<li>在 Java中，错误通过Error的子类描述。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Exception（异常）<ul>\n<li>程序本身可以处理的异常。</li>\n<li>RuntimeException异常由Java虚拟机抛出。<br>NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）,<br>ArithmeticException（算术运算异常，一个整数除以0时，抛出该异常）,<br>ArrayIndexOutOfBoundsException （下标越界异常）。</li>\n<li>受检异常 ：需要用 try…catch… 语句捕获并进行处理，并且可以从异常中恢复；</li>\n<li>非受检异常 ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。</li>\n</ul>\n</li>\n</ol>\n<p><strong>异常能被程序本身可以处理，错误无法处理。</strong></p>\n<ol start=\"3\">\n<li><p>Throwable类常用方法</p>\n<ul>\n<li>public string getMessage():返回异常发生时的详细信息</li>\n<li>public string toString():返回异常发生时的简要描述</li>\n<li>public string getLocalizedMessage():返回异常对象的本地化信息。<br>使用Throwable的子类覆盖这个方法，可以声称本地化信息。<br>如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同</li>\n<li>public void printStackTrace():在控制台上打印Throwable对象封装的异常信息。但是在分布式系统中很难溯源，所以用日志记录</li>\n</ul>\n</li>\n<li><p>异常处理总结</p>\n<ul>\n<li><strong>try块：</strong> 用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。</li>\n<li><strong>catch 块：</strong> 用于处理try捕获到的异常。</li>\n<li><p><strong>inally 块：</strong> 无论是否捕获或处理异常，finally块里的语句都会被执行。<br>当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。</p>\n</li>\n<li><p><strong><em>finally块不会被执行</em></strong></p>\n<ul>\n<li>在finally语句块第一行发生了异常。 因为在其他行，finally块还是会得到执行</li>\n<li>在前面的代码中用了System.exit(int)已退出程序。 exit是带参函数 ；若该语句在异常语句之后，finally会执行</li>\n<li>程序所在的线程死亡。(后面两个在逗我咩QAQ，这不废话么)</li>\n<li>关闭CPU。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如果try语句里有return，返回的是try语句块中变量值。</p>\n<ol>\n<li>如果有返回值，就把返回值保存到局部变量中；</li>\n<li>执行jsr指令跳到finally语句里执行；</li>\n<li>执行完finally语句后，返回之前保存在局部变量表里的值。</li>\n<li>如果try，finally语句里均有return，忽略try的return，而使用finally的return.</li>\n</ol>\n</li>\n<li>应该尽量将捕获底层异常类(子类准确类)的catch子句放在前面，同时尽量将捕获相对高层的异常类(父类异常类)的catch子句放在后面。<br>否则，捕获底层异常类的catch子句将可能会被屏蔽。（你想啊，你吧Exception放在第一个catch，后面你的ShitException就被短路了）</li>\n<li>try语句的嵌套可以很隐蔽的发生。例如，我们可以将对方法的调用放在一个try块中。<br>在该方法的内部，有另一个try语句。在这种情况下，方法内部的try仍然是嵌套在外部调用该方法的try块中的。</li>\n<li>程序执行完throw语句之后立即停止；throw后面的任何语句不被执行，<br>最邻近的try块用来检查它是否含有一个与异常类型匹配的catch语句。<br>如果发现了匹配的块，控制转向该语句；如果没有发现，次包围的try块来检查，以此类推。<br>如果没有发现匹配的catch块，默认异常处理程序中断程序的执行并且打印堆栈轨迹。</li>\n<li>Throws 仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。<br>当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li>\n<li>finally创建的代码块在try/catch块完成之后另一个try/catch出现之前执行。<br>finally块无论有没有异常抛出都会执行。如果抛出异常，即使没有catch子句匹配，finally也会执行。<br>一个方法将从一个try/catch块返回到调用程序的任何时候，经过一个未捕获的异常或者是一个明确的返回语句，<br>finally子句在方法返回之前仍将执行。这在关闭文件句柄和释放任何在方法开始时被分配的其他资源是很有用。</li>\n<li>异常链顾名思义就是将异常发生的原因一个传一个串起来，即把底层的异常信息传给上层，这样逐层抛出。<br>当程序捕获到了一个底层异常，在处理部分选择了继续抛出一个更高级别的新异常给此方法的调用者。<br>这样异常的原因就会逐层传递。这样，位于高层的异常递归调用getCause()方法，就可以遍历各层的异常原因。<br>这就是Java异常链的原理。异常链的实际应用很少，发生异常时候逐层上抛不是个好注意，<br>上层拿到这些异常又能奈之何？而且异常逐层上抛会消耗大量资源， 因为要保存一个完整的异常链信息.</li>\n<li>用户自定义异常类，只需继承Exception类即可。<ul>\n<li>创建自定义异常类。</li>\n<li>在方法中通过throw关键字抛出异常对象。</li>\n<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；<br>否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>\n<li>在出现异常方法的调用者中捕获并处理异常。</li>\n</ul>\n</li>\n<li>try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，<br>尽量不要一个大的 try 包住整段的代码；利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。</li>\n<li>Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。</li>\n<li>业务上可以恢复的异常，可以通过完善任务重试机制，当执行异常时，保存当前任务信息加入重试队列。重试的策略根据业务需要决定，<br>达到重试上限依然无法成功，记录任务执行失败，同时发出告警。</li>\n<li>日志：类比消息中间件，处在不同线程之间的同一任务，简单高效一点的做法可能是用traceId/requestId串联。有些日志系统本身支持MDC/NDC功能，<br>可以串联相关联的日志。</li>\n</ol>\n</li>\n<li><p>transient</p>\n<ul>\n<li>阻止实例中那些用此关键字修饰的的变量序列化；</li>\n<li>当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复</li>\n<li>transient只能修饰变量，不能修饰类和方法。</li>\n</ul>\n</li>\n<li><p>console键盘输入</p>\n<ul>\n<li><p>通过 Scanner</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scanner input = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">String s  = input.nextLine();</span><br><span class=\"line\">input.close();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过 BufferedReader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader input = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">String s = input.readLine();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"28\">\n<li><p>finalize</p>\n<ol>\n<li>finalize 的执行是和垃圾收集关联在一起的，一旦实现了非空的 finalize 方法，就会导致相应对象回收呈现数量级上的变慢，<br>有人专门做过 benchmark，大概是 40~50 倍的下降。</li>\n<li>finalize 被设计成在对象被垃圾收集前调用，这就意味着实现了 finalize 方法的对象是个“特殊公民”，JVM 要对它进行额外处理。<br>finalize 本质上成为了快速回收的阻碍者，可能导致你的对象经过多个垃圾收集周期才能被回收。</li>\n<li>System.runFinalization​() 告诉 JVM 积极一点，是不是就可以了？也许有点用，但是问题在于，这还是不可预测、不能保证的，所以本质上还是不能指望。<br>实践中，因为 finalize 拖慢垃圾收集，导致大量对象堆积，也是一种典型的导致 OOM 的原因。</li>\n<li>finalize 还会掩盖资源回收时的出错信息</li>\n<li>java.lang.ref.Cleaner 来替换掉原有的 finalize 实现.Cleaner 的实现利用了幻象引用（PhantomReference），<br>这是一种常见的所谓 post-mortem 清理机制。利用幻象引用和引用队列，可以保证对象被彻底销毁前做一些类似资源回收的工作,<br>比如关闭文件描述符（操作系统有限的资源），它比 finalize 更加轻量、更加可靠。每个 Cleaner 的操作都是独立的，它有自己的运行线程，所以可以避免意外死锁等问题。</li>\n</ol>\n</li>\n<li><p>强引用、软引用、弱引用、幻象引用</p>\n<ul>\n<li>可达性（reachable）状态和对垃圾收集的影响。</li>\n</ul>\n<ol>\n<li>强引用（“Strong” Reference）<ul>\n<li>普通对象引用</li>\n<li>要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象</li>\n<li>如果没有其他的引用关系 超过了引用的作用域或者显式地将相应（强）引用赋值为 null,就是可以被垃圾收集的了</li>\n<li>强可达（Strongly Reachable），就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。<br>比如，我们新创建一个对象，那么创建它的线程对它就是强可达。</li>\n</ul>\n</li>\n<li>软引用（SoftReference）<ul>\n<li>一种相对强引用弱化一些的引用</li>\n<li>可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象</li>\n<li>JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。</li>\n<li>软引用通常用来实现内存敏感的缓存.当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</li>\n<li>软可达（Softly Reachable），就是当我们只能通过软引用才能访问到对象的状态。</li>\n</ul>\n</li>\n<li>弱引用（WeakReference）<ul>\n<li>不能使对象豁免垃圾收集</li>\n<li>提供一种访问在弱引用状态下对象的途径</li>\n<li>构建一种没有特定约束的关系</li>\n<li>维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。</li>\n<li>缓存实现的选择。</li>\n<li>弱可达（Weakly Reachable），类似前面提到的，就是无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。<br>这是十分临近 finalize 状态的时机，当弱引用被清除的时候，就符合 finalize 的条件了。</li>\n</ul>\n</li>\n<li>幻象引用（WeakReference）<ul>\n<li>虚引用</li>\n<li>不能通过它访问对象</li>\n<li>提供了一种确保对象被 finalize 以后，做某些事情的机制</li>\n<li>做所谓的 Post-Mortem 清理机制, 利用幻象引用监控对象的创建和销毁。</li>\n<li>幻象可达（Phantom Reachable），就是没有强、软、弱引用关联，并且 finalize 过了，只有幻象引用指向这个对象的时候。</li>\n<li>最后的状态，就是不可达（unreachable），意味着对象可以被清除了。</li>\n</ul>\n</li>\n<li>所有引用类型，都是抽象类 java.lang.ref.Reference 的子类.除了幻象引用（因为 get 永远返回 null），如果对象还没有被销毁，<br>都可以通过 get 方法获取原有对象。利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态</li>\n<li>对于软引用、弱引用之类，垃圾收集器可能会存在二次确认的问题，以保证处于弱引用状态的对象，没有改变为强引用。</li>\n<li>如果我们错误的保持了强引用（比如，赋值给了 static 变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄漏。<br>检查弱引用指向对象是否被垃圾收集，也是诊断是否有特定内存泄漏的一个思路，如果我们的框架使用到弱引用又怀疑有内存泄漏，就可以从这个角度检查。</li>\n<li>引用队列（ReferenceQueue）使用<ul>\n<li>创建各种引用并关联到响应对象时，可以选择是否需要关联引用队列</li>\n<li>JVM 会在特定时机将引用 enqueue 到队列里，可以从队列里获取引用（remove 方法有获取的意思）进行相关后续逻辑</li>\n<li>尤其是幻象引用，get 方法只返回 null，如果再不指定引用队列，基本就没有意义了。</li>\n</ul>\n</li>\n<li>显式地影响软引用垃圾收集<ul>\n<li>软引用通常会在最后一次引用后，还能保持一段时间，默认值是根据堆剩余空间计算的（以 M bytes 为单位）</li>\n<li>XX:SoftRefLRUPolicyMSPerMB 参数，我们可以以毫秒（milliseconds）为单位设置</li>\n<li>对于 Client 模式剩余空间是计算当前堆里空闲的大小,而对于 server 模式 JVM，则是根据 -Xmx 指定的最大值来计算。不要过于依赖它</li>\n</ul>\n</li>\n<li>诊断 JVM 引用情况<ul>\n<li>HotSpot JVM PrintReferenceGC</li>\n<li>JDK 9类似 PrintGCTimeStamps 和 PrintReferenceGC 已经不再存在</li>\n</ul>\n</li>\n<li>Reachability Fence<ul>\n<li>通过底层 API 来达到强引用的效果</li>\n<li>按照 Java 语言规范，如果一个对象没有指向强引用，就符合垃圾收集的标准，有些时候，对象本身并没有强引用，但是也许它的部分属性还在被使用.<br>需要一个方法，在没有强引用情况下，通知 JVM 对象是在被使用的。</li>\n<li>reachabilityFence 大多使用在 Executors 或者类似新的 HTTP/2 客户端代码中，大部分都是异步调用的情况</li>\n<li>将需要 reachability 保障的代码段利用 try-finally 包围起来，在 finally 里明确声明对象强可达。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>数据类型</p>\n<ol>\n<li><p>基本类型</p>\n<p>|keyWord|package|size|range|default|<br>|—|—|—|—|—|<br>|boolean|Boolean|1byte字节、8bit位|true，false JVM 会在编译时期将 boolean 类型的数据转换为 int，1 true，0 false|false|<br>|byte|Byte|1byte字节、8bit位|能存256个数，正负各128个，0放在正数一半 –&gt; -128~127|0|<br>|char|Character|2byte字节、16bit位|能存65536个，对应Ascii码表，不需要负数，0~65535|’\\u0000’|<br>|short|Short|2byte字节、16bit位|能存65536个数，正负各32768个,0放正数一半 –&gt; -32768~32767|0|<br>|int|Integer|4byte字节、32bit位|能存4294967296个数，正负各2147483648个,0放正数一半 –&gt; -2147483648~2147483647|0|<br>|long|Long|8byte字节、64bit位|能存4294967296个数，正负各一半,0放正数一半 –&gt; 9223372036854775808~9223372036854775807|0L|<br>|float|Float|4byte字节、32bit位|符号位（sign）占用1位，用来表示正负数，指数位（exponent）占用8位，用来表示指数，小数位（fraction）占用23位，用来表示小数，不足位数补0。|0.0F|<br>|double|Double|8byte字节、64bit位|符号位（sign）占用1位，指数位（exponent）占用11位，小数位（fraction）占用52位，不足位数补0。|0.0D|</p>\n</li>\n<li><p>包装类型</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer x = <span class=\"number\">2</span>;     <span class=\"comment\">// 装箱</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> y = x;         <span class=\"comment\">// 拆箱</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缓存池</p>\n<ul>\n<li>new Integer(123) 每次都会新建一个对象；</li>\n<li>Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。</li>\n<li><p>先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，<br>那么就会引用相同的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer m = <span class=\"number\">123</span>;</span><br><span class=\"line\">Integer n = <span class=\"number\">123</span>;</span><br><span class=\"line\">System.out.println(m == n); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>String</p>\n<ol>\n<li>概：<ul>\n<li>final 不可被继承。</li>\n<li>Java 8 内部使用 char 数组存储数据</li>\n<li>Java 9 改用 byte 数组存储字符串，同时使用 coder 来标识使用了哪种编码。</li>\n</ul>\n</li>\n<li><p>不可变的好处</p>\n<ul>\n<li>缓存 hash 值：因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。<br>不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</li>\n<li>String Pool 的需要： 如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。<br>只有 String 是不可变的，才可能使用 String Pool。</li>\n<li>安全性：String 经常作为参数，String 不可变性可以保证参数不可变。<br>例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，<br>改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。</li>\n<li>线程安全:</li>\n</ul>\n</li>\n<li><p>String Pool</p>\n<ul>\n<li>字符串常量池（String Pool）保存着所有字符串字面量（literal strings），<br>这些字面量在编译时期就确定。</li>\n<li><p>当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等<br>（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；<br>否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">System.out.println(s1 == s2);           <span class=\"comment\">// false</span></span><br><span class=\"line\">String s3 = s1.intern();</span><br><span class=\"line\">String s4 = s1.intern();</span><br><span class=\"line\">System.out.println(s3 == s4);           <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>采用字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s5 = <span class=\"string\">\"bbb\"</span>;</span><br><span class=\"line\">String s6 = <span class=\"string\">\"bbb\"</span>;</span><br><span class=\"line\">System.out.println(s5 == s6);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。<br>而在 Java 7，String Pool 被移到堆中。<br>这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>\n</li>\n</ul>\n</li>\n<li><p>new String(“abc”)</p>\n<ul>\n<li>“abc” 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个 “abc” 字符串字面量</li>\n<li><p>而使用 new 的方式会在堆中创建一个字符串对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewStringTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反编译得到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">// ...</span><br><span class=\"line\">   #2 = Class              #18            // java/lang/String</span><br><span class=\"line\">   #3 = String             #19            // abc</span><br><span class=\"line\">// ...</span><br><span class=\"line\">  #18 = Utf8               java/lang/String</span><br><span class=\"line\">  #19 = Utf8               abc</span><br><span class=\"line\">// ...</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=3, locals=2, args_size=1</span><br><span class=\"line\">         0: new           #2                  // class java/lang/String</span><br><span class=\"line\">         3: dup</span><br><span class=\"line\">         4: ldc           #3                  // String abc</span><br><span class=\"line\">         6: invokespecial #4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class=\"line\">         9: astore_1</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<p>在 Constant Pool 中，#19 存储这字符串字面量 “abc”，<br>#3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。<br>在 main 方法中，0: 行使用 new #2 在堆中创建一个字符串对象，<br>并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。</p>\n</li>\n<li><p>String 构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.value = original.value;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.hash = original.hash;</span><br></pre></td></tr></table></figure>\n<p>将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>运算</p>\n<ol>\n<li>参数传递 都是值传递，对象也是地址当成值传递</li>\n<li><p>float 与 double</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// float f = 1.1; //这个是把double赋值给了float，Java 不能隐式执行向下转型，因为这会使得精度降低。</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> f = <span class=\"number\">1.1f</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐式类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> s1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// s1 = s1 + 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是使用 += 或者 ++ 运算符可以执行隐式类型转换。</span></span><br><span class=\"line\">s1 += <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// s1++;</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = (<span class=\"keyword\">short</span>) (s1 + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>switch</p>\n<ul>\n<li>从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。</li>\n<li>switch 不支持 long，是因为 switch 的设计初衷是对那些只有少数的几个值进行等值判断，<br>如果值过于复杂，那么还是用 if 比较合适。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>继承</p>\n<ol>\n<li>访问权限<ol>\n<li>private 设计良好的模块会隐藏所有的实现细节,称为信息隐藏或封装.<br>因此访问权限应当尽可能地使每个类或者成员不被外界访问。</li>\n<li>protected 在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。<br>子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别(里氏替换原则)</li>\n<li>public 类可见表示其它类可以用这个类创建实例对象。<br>成员可见表示其它类可以用这个类的实例对象访问到该成员；</li>\n<li>不加访问修饰符(default) 包级可见</li>\n</ol>\n</li>\n<li>抽象类与接口<ol>\n<li>抽象类<ul>\n<li>抽象类和抽象方法都使用 abstract 关键字进行声明</li>\n<li>抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。</li>\n<li>抽象类不能被实例化，需要继承抽象类才能实例化其子类。</li>\n</ul>\n</li>\n<li>接口<ul>\n<li>Java 8 之前，接口可以看成是一个完全抽象的类，不能有任何的方法实现。</li>\n<li>Java 8 开始，接口可以有默认的方法实现，因为不支持默认方法的接口的维护成本太高了。<br>在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。</li>\n<li>接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。</li>\n<li>接口的字段默认都是 static 和 final 的。</li>\n</ul>\n</li>\n<li>比较<ul>\n<li>从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，<br>即子类对象必须能够替换掉所有父类对象。<br>而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，<br>并不要求接口和实现接口的类具有 IS-A 关系。</li>\n<li>从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。</li>\n<li>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。</li>\n<li>接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。</li>\n</ul>\n</li>\n<li>使用选择<ol>\n<li>使用接口<ul>\n<li>需要让不相关的类都实现一个方法，<br>例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；</li>\n<li>需要使用多重继承。</li>\n</ul>\n</li>\n<li>使用抽象类<ul>\n<li>需要在几个相关的类中共享代码。</li>\n<li>需要能控制继承来的成员的访问权限，而不是都为 public。</li>\n<li>需要继承非静态和非常量字段。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>super<ul>\n<li>访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。</li>\n<li>访问父类的成员：如果子类重写了父类的某个方法，可以通过使用 super 关键字来引用父类的方法实现。</li>\n</ul>\n</li>\n<li><p>重写与重载</p>\n<ol>\n<li>重写（Override）<ul>\n<li>继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。</li>\n<li>里式替换原则<ol>\n<li>子类方法的访问权限必须大于等于父类方法；</li>\n<li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>重载（Overload）</p>\n<ul>\n<li><p>存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(D obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"A and D\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(A obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"A and A\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(B obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"B and B\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(A obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"B and A\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a1 = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        A a2 = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">        B b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">        C c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">        D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a1为A类，b为B类，先找A类中show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A</span></span><br><span class=\"line\">        System.out.println(a1.show(b)); <span class=\"comment\">//A and A</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a1为A类，c为C类，先找A类中show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 找A类中show(B obj)，因为C的父类是B，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后找A类中show(A obj)，因为B的父类为A，找到，显示A and A</span></span><br><span class=\"line\">        System.out.println(a1.show(c));<span class=\"comment\">//A and A</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a1为A类，d为D类，先找A类中show(D obj)，找到，显示A and D</span></span><br><span class=\"line\">        System.out.println(a1.show(d));<span class=\"comment\">//A and D</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，</span></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，先找A类中show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后，找A类中的show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A</span></span><br><span class=\"line\">        System.out.println(a2.show(b));<span class=\"comment\">//B and A</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，</span></span><br><span class=\"line\">        <span class=\"comment\">// c为C类，先找A类中show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后A类无父类，</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后，找A类中的show(B obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后找A类中的show(A obj),找到，但是这个方法被B类重写了，所以调用了B类的show(A obj),所以 B and A</span></span><br><span class=\"line\">        System.out.println(a2.show(c));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a2为A类(是以B的基础new一个A，然后地址给a2，但是只有A类中方法，但是A的show(A)被子类B重写，调用这个方法就是子类)，</span></span><br><span class=\"line\">        <span class=\"comment\">// d为D类，先找A类中show(D obj)，有,所以 A and D</span></span><br><span class=\"line\">        System.out.println(a2.show(d));<span class=\"comment\">//A and D</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，b为B类，先找B类中show(B obj)，找到，显示B and B</span></span><br><span class=\"line\">        System.out.println(b.show(b));<span class=\"comment\">//B and B</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，c为C类，先找B类中show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// B的父类为A，找A类中的show(C obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后找B类中的show（B）找到，显示B and B</span></span><br><span class=\"line\">        System.out.println(b.show(c));<span class=\"comment\">//B and B</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// b为B类，d为D类，先找B类中show(D obj)，没有</span></span><br><span class=\"line\">        <span class=\"comment\">// B的父类为A，找A类中的show(D obj)，找到，显示A and D</span></span><br><span class=\"line\">        System.out.println(b.show(d));<span class=\"comment\">//A and D</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>涉及到重写时，方法调用的优先级为：</p>\n</li>\n<li>this.show(O)</li>\n<li>super.show(O)</li>\n<li>this.show((super)O)</li>\n<li>super.show((super)O)</li>\n</ol>\n</li>\n<li><p>Object 通用方法</p>\n<ol>\n<li><p>equals()</p>\n<ol>\n<li>等价关系<ol>\n<li>自反性</li>\n<li>对称性</li>\n<li>传递性</li>\n<li>一致性 多次调用 equals() 方法结果不变</li>\n<li>与 null 的比较<ul>\n<li>对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false</li>\n<li>对象是null在调用.equals()方法时会报空指针异常</li>\n<li>null == null 返回true</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>等价与相等<ul>\n<li>对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。</li>\n<li>对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。</li>\n</ul>\n</li>\n<li>实现<ul>\n<li>检查是否为同一个对象的引用，如果是直接返回 true； if (this == o) return true;</li>\n<li>传入对象是否为空，空返回false；检查是否是同一个类型，如果不是，直接返回 false；  if (o == null || getClass() != o.getClass()) return false;</li>\n<li>将 Object 对象进行转型；EqualExample that = (EqualExample) o;</li>\n<li>判断每个关键域是否相等。 判断你定义相等的每个成员变量是否相等</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>hashCode()</p>\n<ul>\n<li>hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。<br>等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。</li>\n<li>在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。</li>\n<li>理想的散列函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的散列值上。<br>这就要求了散列函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，<br>然后组成一个 R 进制的整数。R 一般取 31，因为它是一个奇素数，如果是偶数的话，<br>当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位。</li>\n<li><p>一个数与 31 相乘可以转换成移位和减法：<code>31*x == (x&lt;&lt;5)-x</code>，编译器会自动进行这个优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">(<span class=\"keyword\">char</span>[] chars)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> var1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var1 == <span class=\"number\">0</span> &amp;&amp; chars.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] var2 = chars;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> var3 = <span class=\"number\">0</span>; var3 &lt; chars.length; ++var3) &#123;</span><br><span class=\"line\">                var1 = <span class=\"number\">31</span> * var1 + var2[var3];</span><br><span class=\"line\">                <span class=\"comment\">//var1 = (var1 &lt;&lt; 5) - var1 +var2[var3];</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"this.hash = \"</span> + var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> var1;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h6 id=\"常见hash算法\"><a href=\"#常见hash算法\" class=\"headerlink\" title=\"常见hash算法\"></a>常见hash算法</h6><ol>\n<li>Object类的hashCode.返回对象的内存地址经过处理后的结构，由于每个对象的内存地址都不一样，所以哈希码也不一样。</li>\n<li>String类的hashCode.根据String类包含的字符串的内容，根据一种特殊算法返回哈希码，只要字符串内容相同，返回的哈希码也相同。</li>\n<li>Integer类，返回的哈希码就是Integer对象里所包含的那个整数的数值，<br>例如Integer i1=new Integer(100),i1.hashCode的值就是100 。由此可见，2个一样大小的Integer对象，返回的哈希码也一样。</li>\n</ol>\n<ul>\n<li>哈希码要完成这么一件事，首先要保证如果equlas出来的结果相等，那么hashCode也相等。</li>\n<li>一般的线性表，树中，记录在结构中的相对位置是随机的，即和记录的关键字之间不存在确定的关系，<br>因此，在结构中查找记录时需进行一系列和关键字的比较。这一类查找方法建立在“比较“的基础上，<br>查找的效率依赖于查找过程中所进行的比较次数。（链表最基础的比较，就是遍历比较，时间都花在了这个上）</li>\n<li>理想的情况是能直接找到需要的记录，因此必须在记录的存储位置和它的关键字之间建立一个确定的对应关系f，<br>使每个关键字和结构中一个唯一的存储位置相对应。（通过单独识别码去找到该对象，建立联系）</li>\n</ul>\n<ol start=\"4\">\n<li>直接定址法：有一个从1到100岁的人口数字统计表，其中，年龄作为关键字，<br>哈希函数取关键字自身或者关键字的某个线性函数。取关键字自身效率不高,时间复杂度是O(1),空间复杂度是O(n),n是关键字的个数。</li>\n<li>数字分析法：重复的可能性大的不取，取的话造成冲突的机会增加，所以尽量不取可能重复的关键字。</li>\n<li>平方取中法： 取关键字平方后的中间几位为哈希地址。<br>{421，423，436}，平方之后的结果为{177241，178929，190096}，那么可以取{72，89，00}作为Hash地址。</li>\n<li>折叠法： 将关键字分割成位数相同的几部分（最后一部分的位数可以不同），<br>然后取这几部分的叠加和（舍去进位）作为哈希地址，这方法称为折叠法。<br>图书的ISBN号为8903-241-23，可以将address(key)=89+03+24+12+3作为Hash地址。</li>\n<li>除留余数法: 取关键字被某个不大于哈希表表长m的数p除后所得余数为哈希地址。H(key)=key MOD p (p&lt;=m)<br>在这里p的选取非常关键，p选择的好的话，能够最大程度地减少冲突，p一般取不大于m的最大质数。</li>\n<li>随机数法: 选择一个随机函数，取关键字的随机函数值为它的哈希地址.<br>H(key)=random(key) ,其中random为随机函数。通常用于<strong>关键字长度不等</strong>时采用此法。</li>\n</ol>\n<ul>\n<li>冲突：对不同的关键字可能得到同一哈希地址。</li>\n<li><h6 id=\"处理冲突方法\"><a href=\"#处理冲突方法\" class=\"headerlink\" title=\"处理冲突方法\"></a>处理冲突方法</h6></li>\n<li>开放定址法：当一个关键字和另一个关键字发生冲突时，使用某种探测技术在Hash表中形成一个探测序列，<br>然后沿着这个探测序列依次查找下去，当碰到一个空的单元时，则插入其中。Hi=(H(key)+di) MOD m i=1,2,…,k(k&lt;=m-1)<br>比较常用的探测方法有<strong>线性探测法</strong>，比如有一组关键字{12，13，25，23，38，34，6，84，91}，<br>Hash表长为14，Hash函数为address(key)=key%11，当插入12，13，25时可以直接插入，<br>而当插入23时，地址1被占用了，因此沿着地址1依次往下探测(探测步长可以根据情况而定)，<br>直到探测到地址4，发现为空，则将23插入其中。（发现有，则顺延偏移）<br><strong>二次探测再散列</strong>di取值可能为1,-1,2,-2,4,-4,9,-9,16,-16,…k<em>k,-k</em>k(k&lt;=m/2).<br><strong>伪随机探测再散列</strong>di取值可能为伪随机数列.</li>\n<li>链地址法：采用数组和链表相结合的办法，将Hash地址相同的记录存储在一张线性表中，<br>而每张表的表头的序号即为计算得到的Hash地址。如上述例子中，采用链地址法形成的Hash表存储。</li>\n<li>再哈希法: 当发生冲突时，使用第二个、第三个、哈希函数计算地址，直到无冲突时。缺点：计算时间增加。</li>\n<li>建立一个公共溢出区:假设哈希函数的值域为[0,m-1],则设向量HashTable[0..m-1]为基本表，<br>另外设立存储空间向量OverTable[0..v]用以存储发生冲突的记录。</li>\n</ul>\n</li>\n<li>Hash表大小的确定也非常关键，如果Hash表的空间远远大于最后实际存储的记录个数，<br>则造成了很大的空间浪费，如果选取小了的话，则容易造成冲突。<br>在实际情况中，一般需要根据最终记录存储个数和关键字的分布特点来确定Hash表的大小。<br>还有一种情况时可能事先不知道最终需要存储的记录个数，则需要动态维护Hash表的容量，<br>此时可能需要重新计算Hash地址。</li>\n</ul>\n</li>\n<li><p>这里要注意区分三个概念：hashCode值、hash值、hash方法、数组下标</p>\n<ul>\n<li>hashCode值：是KV对中的K对象的hashCode方法的返回值（若没有重写则默认用Object类的hashCode方法的生成值）<br>Object类<code>public native int hashCode();</code>native关键字是系统相关的其他语言实现（C/C++）。</li>\n<li>hash值: 是在hashCode值的基础上又进行了一步运算后的结果，这个运算过程就是<em>hash方法</em>。</li>\n<li>数组下标: 根据该hash值和数组长度计算出数组下标，计算公式：hash值  &amp;（数组长度-1）= 下标。</li>\n<li>HashMap中<em>hash方法</em>：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object var0)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> var1;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> var0 == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : (var1 = var0.hashCode()) ^ var1 &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>toString()</p>\n<ul>\n<li>Object默认实现<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(<span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>clone()</p>\n<ol>\n<li>cloneable</li>\n</ol>\n<ul>\n<li><p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，<br>其它类就不能直接去调用该类实例的 clone() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneExample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CloneExample e1 = <span class=\"keyword\">new</span> CloneExample();</span><br><span class=\"line\"><span class=\"comment\">// CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object'</span></span><br></pre></td></tr></table></figure>\n<p>重写 clone() 得到以下实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CloneExample &#123;</span><br><span class=\"line\">    private int a;</span><br><span class=\"line\">    private int b;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public CloneExample clone() throws CloneNotSupportedException &#123;</span><br><span class=\"line\">        return (CloneExample)super.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CloneExample e1 = <span class=\"keyword\">new</span> CloneExample();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    CloneExample e2 = e1.clone();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.CloneNotSupportedException: CloneExample</span><br></pre></td></tr></table></figure>\n<p>上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。</p>\n</li>\n<li>clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。<br>Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，<br>就会抛出 CloneNotSupportedException。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneExample</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>浅拷贝<ul>\n<li>拷贝对象和原始对象的引用类型引用同一个对象。</li>\n</ul>\n</li>\n<li><p>深拷贝</p>\n<ul>\n<li>拷贝对象和原始对象的引用类型引用不同对象。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> DeepCloneExample <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">    DeepCloneExample result = (DeepCloneExample) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    result.arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        result.arr[i] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>clone() 的替代方案</p>\n<ul>\n<li>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。<br>Effective Java 书上讲到，最好不要去使用 clone()</li>\n<li>可以使用拷贝构造函数</li>\n<li>拷贝工厂来拷贝一个对象。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>关键字<ol>\n<li><a href=\"#final\">final</a></li>\n<li>static<ol>\n<li>静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，<br>可以直接通过类名来访问它。静态变量在内存中只存在一份。</li>\n</ol>\n<ul>\n<li>实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。</li>\n</ul>\n<ol start=\"2\">\n<li>静态方法：</li>\n</ol>\n<ul>\n<li>静态方法在类加载的时候就存在了，它不依赖于任何实例。<br>所以静态方法必须有实现，也就是说它<strong>不能是抽象方法</strong>。</li>\n<li>只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。</li>\n</ul>\n<ol start=\"3\">\n<li>静态语句块：</li>\n</ol>\n<ul>\n<li>静态语句块在类初始化时运行一次。</li>\n</ul>\n<ol start=\"4\">\n<li>静态内部类:</li>\n</ol>\n<ul>\n<li>非静态内部类依赖于外部类的实例，而静态内部类不需要。</li>\n<li>静态内部类不能访问外部类的非静态的变量和方法。</li>\n</ul>\n<ol start=\"5\">\n<li>静态导包:</li>\n</ol>\n<ul>\n<li>在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。<br><code>import static com.xxx.ClassName.*</code></li>\n</ul>\n<ol start=\"6\">\n<li>初始化顺序</li>\n</ol>\n<ul>\n<li>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。</li>\n<li>存在继承的情况下，初始化顺序为：<ol>\n<li>父类（静态变量、静态语句块）</li>\n<li>子类（静态变量、静态语句块）</li>\n<li>父类（实例变量、普通语句块）</li>\n<li>父类（构造函数）</li>\n<li>子类（实例变量、普通语句块）</li>\n<li>子类（构造函数）</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>反射</p>\n<ul>\n<li>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，<br>会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</li>\n<li>类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。<br>也可以使用 Class.forName(“com.mysql.jdbc.Driver”) 这种方式来控制类的加载，<br>该方法会返回一个 Class 对象。</li>\n<li>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。</li>\n<li>Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：<ol>\n<li>Field: 可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；</li>\n<li>Method: 可以使用 invoke() 方法调用与 Method 对象关联的方法；</li>\n<li>Constructor: 可以用 Constructor 创建新的对象。</li>\n</ol>\n</li>\n<li><p>反射的优点:</p>\n<ol>\n<li>可扩展性: 用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。</li>\n<li>类浏览器和可视化开发环境: 一个类浏览器需要可以枚举类的成员。<br>可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。</li>\n<li>调试器和测试工具: 调试器需要能够检查一个类里的私有成员。<br>测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。</li>\n</ol>\n</li>\n<li><p>反射的缺点:</p>\n<ol>\n<li>性能开销 ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。<br>因此，反射操作的效率要比那些非反射操作低得多。<br>我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。</li>\n<li>安全限制 ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。<br>如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。</li>\n<li>内部暴露 ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），<br>所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。<br>反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#Throwable\">异常</a></p>\n</li>\n<li><p>泛型</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// T stands for \"Type\"</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T t;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T t)</span> </span>&#123; <span class=\"keyword\">this</span>.t = t; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> t; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>泛型类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;Integer&gt; integerBox = <span class=\"keyword\">new</span> Box&lt;Integer&gt;();</span><br><span class=\"line\">Box&lt;Double&gt; doubleBox = <span class=\"keyword\">new</span> Box&lt;Double&gt;();</span><br><span class=\"line\">Box&lt;String&gt; stringBox = <span class=\"keyword\">new</span> Box&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>泛型方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;K, V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">compare</span><span class=\"params\">(Pair&lt;K, V&gt; p1, Pair&lt;K, V&gt; p2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp;</span><br><span class=\"line\">               p1.getValue().equals(p2.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> V value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pair</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKey</span><span class=\"params\">(K key)</span> </span>&#123; <span class=\"keyword\">this</span>.key = key; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(V value)</span> </span>&#123; <span class=\"keyword\">this</span>.value = value; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>   </span>&#123; <span class=\"keyword\">return</span> key; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pair&lt;Integer, String&gt; p1 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">1</span>, <span class=\"string\">\"apple\"</span>);</span><br><span class=\"line\">Pair&lt;Integer, String&gt; p2 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">2</span>, <span class=\"string\">\"pear\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> same = Util.&lt;Integer, String&gt;compare(p1, p2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>边界符</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countGreaterThan</span><span class=\"params\">(T[] anArray, T elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T e : anArray)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e &gt; elem)  <span class=\"comment\">// compiler error 因为除了short, int, double, long, float, byte, char等原始类型，其他的类并不一定能使用操作符&gt;</span></span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 告诉编译器它们都至少实现了compareTo方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countGreaterThan</span><span class=\"params\">(T[] anArray, T elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T e : anArray)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.compareTo(elem) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通配符</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">boxTest</span><span class=\"params\">(Box&lt;Number&gt; n)</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p> 虽然Integer和Double是Number的子类，但是在泛型中Box<integer>或者Box<double>与Box<number>之间并没有任何的关系</number></double></integer></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p> 我们创建了一个泛型类Reader，然后在f1()中当我们尝试Fruit f = fruitReader.readExact(apples);<br> 编译器会报错，因为List<fruit>与List<apple>之间并没有任何的关系。</apple></fruit></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericReading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Apple&gt; apples = Arrays.asList(<span class=\"keyword\">new</span> Apple());</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Fruit&gt; fruit = Arrays.asList(<span class=\"keyword\">new</span> Fruit());</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reader</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">readExact</span><span class=\"params\">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Reader&lt;Fruit&gt; fruitReader = <span class=\"keyword\">new</span> Reader&lt;Fruit&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// Errors: List&lt;Fruit&gt; cannot be applied to List&lt;Apple&gt;.</span></span><br><span class=\"line\">        <span class=\"comment\">// Fruit f = fruitReader.readExact(apples);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        f1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 按照我们通常的思维习惯，Apple和Fruit之间肯定是存在联系，<br> 然而编译器却无法识别，那怎么在泛型代码中解决这个问题呢？我们可以通过使用通配符来解决这个问题：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CovariantReader</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">readCovariant</span><span class=\"params\">(List&lt;? extends T&gt; list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">f2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CovariantReader&lt;Fruit&gt; fruitReader = <span class=\"keyword\">new</span> CovariantReader&lt;Fruit&gt;();</span><br><span class=\"line\">    Fruit f = fruitReader.readCovariant(fruit);</span><br><span class=\"line\">    Fruit a = fruitReader.readCovariant(apples);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    f2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这样就相当与告诉编译器，fruitReader的readCovariant方法接受的参数只要是满足Fruit的子类就行(包括Fruit自身)，<br> 这样子类和父类之间的关系也就关联上了。</p>\n</li>\n</ol>\n</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/GO-Web-旅行扎记/huaji.jpeg","post":"ck6auwf1u0000hgj385edw0kt","slug":"huaji.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/初始的springboot项目的依赖分析/demo.png","post":"ck6auwf2f000jhgj3kxu4knaf","slug":"demo.png","modified":1,"renderable":1},{"_id":"source/_posts/手撕链表/LinkedList.png","slug":"LinkedList.png","post":"ck6auwf2j000uhgj3ldjv0e1b","modified":1,"renderable":0},{"_id":"source/_posts/手撕链表/链表类型和优势.png","post":"ck6auwf2j000uhgj3ldjv0e1b","slug":"链表类型和优势.png","modified":1,"renderable":1},{"_id":"source/_posts/口水Java虚拟机/1.png","post":"ck6auwf2h000ohgj3hc76pmfi","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/口水Java虚拟机/2.png","post":"ck6auwf2h000ohgj3hc76pmfi","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/口水Java虚拟机/3.png","post":"ck6auwf2h000ohgj3hc76pmfi","slug":"3.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck6auwf260007hgj387uboijr","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2c000dhgj3c6auosnm"},{"post_id":"ck6auwf1u0000hgj385edw0kt","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2e000hhgj32b9mfm58"},{"post_id":"ck6auwf270008hgj39zqldvwl","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2g000khgj3f93b8o80"},{"post_id":"ck6auwf2a000bhgj39cstsm3v","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2h000phgj3plozl0cg"},{"post_id":"ck6auwf200002hgj32kjzof5v","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2i000rhgj3k9utkitd"},{"post_id":"ck6auwf250006hgj3dum0yglj","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2j000vhgj3h7q327zj"},{"post_id":"ck6auwf2h000ohgj3hc76pmfi","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2k000xhgj36d8xzi1k"},{"post_id":"ck6auwf2b000chgj37i2fnm9m","category_id":"ck6auwf2g000lhgj3l4ipwsf1","_id":"ck6auwf2l000zhgj3chk4dwul"},{"post_id":"ck6auwf2i000qhgj3msbs1pl3","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2l0012hgj3bdbmclf7"},{"post_id":"ck6auwf2j000uhgj3ldjv0e1b","category_id":"ck6auwf230004hgj3p7kgpu7t","_id":"ck6auwf2m0013hgj37bw3yuc5"},{"post_id":"ck6auwf2f000jhgj3kxu4knaf","category_id":"ck6auwf2i000shgj3jiquph7w","_id":"ck6auwf2m0016hgj33skrv8j4"},{"post_id":"ck6auwf2k000whgj3t2i7pck4","category_id":"ck6auwf2l0011hgj3iflfgwl1","_id":"ck6auwf2m001ahgj315mvmj0l"},{"post_id":"ck6auwf2k000yhgj3swps2q07","category_id":"ck6auwf2m0015hgj3t1js1qmq","_id":"ck6auwf2n001ehgj3xaz23bsg"}],"PostTag":[{"post_id":"ck6auwf1u0000hgj385edw0kt","tag_id":"ck6auwf240005hgj3ocor94gw","_id":"ck6auwf2f000ihgj3w2nu78jq"},{"post_id":"ck6auwf1u0000hgj385edw0kt","tag_id":"ck6auwf28000ahgj3tf739in7","_id":"ck6auwf2g000mhgj3xwqe0hew"},{"post_id":"ck6auwf200002hgj32kjzof5v","tag_id":"ck6auwf2d000fhgj3d7x6p5b7","_id":"ck6auwf2m0017hgj3ezxq0ed6"},{"post_id":"ck6auwf200002hgj32kjzof5v","tag_id":"ck6auwf2g000nhgj31e2z3ohh","_id":"ck6auwf2m0018hgj32xxml5n6"},{"post_id":"ck6auwf200002hgj32kjzof5v","tag_id":"ck6auwf2i000thgj31519ddh4","_id":"ck6auwf2m001bhgj3xkn6o15l"},{"post_id":"ck6auwf200002hgj32kjzof5v","tag_id":"ck6auwf2l0010hgj3e5c1065k","_id":"ck6auwf2n001chgj3bv9iioux"},{"post_id":"ck6auwf250006hgj3dum0yglj","tag_id":"ck6auwf2m0014hgj3tbwslfdq","_id":"ck6auwf2n001ghgj30bm4dn59"},{"post_id":"ck6auwf250006hgj3dum0yglj","tag_id":"ck6auwf2m0019hgj3blrp4p1u","_id":"ck6auwf2n001hhgj39din2e7n"},{"post_id":"ck6auwf250006hgj3dum0yglj","tag_id":"ck6auwf2n001dhgj30m9nutsw","_id":"ck6auwf2n001jhgj3jagc30o0"},{"post_id":"ck6auwf260007hgj387uboijr","tag_id":"ck6auwf2d000fhgj3d7x6p5b7","_id":"ck6auwf2o001lhgj3eedxv0r4"},{"post_id":"ck6auwf260007hgj387uboijr","tag_id":"ck6auwf2n001ihgj3phh1tbxq","_id":"ck6auwf2o001mhgj327653cg7"},{"post_id":"ck6auwf270008hgj39zqldvwl","tag_id":"ck6auwf2o001khgj39n2j57ck","_id":"ck6auwf2o001qhgj3rx3fd080"},{"post_id":"ck6auwf270008hgj39zqldvwl","tag_id":"ck6auwf2o001nhgj34031q8sf","_id":"ck6auwf2p001rhgj3j941xhxj"},{"post_id":"ck6auwf270008hgj39zqldvwl","tag_id":"ck6auwf2o001ohgj3qlfjxpea","_id":"ck6auwf2p001thgj3mxhioxh6"},{"post_id":"ck6auwf2a000bhgj39cstsm3v","tag_id":"ck6auwf2d000fhgj3d7x6p5b7","_id":"ck6auwf2p001whgj33sqpmh4e"},{"post_id":"ck6auwf2a000bhgj39cstsm3v","tag_id":"ck6auwf2n001ihgj3phh1tbxq","_id":"ck6auwf2p001xhgj33g4xpw6s"},{"post_id":"ck6auwf2a000bhgj39cstsm3v","tag_id":"ck6auwf2p001uhgj3iqbifauc","_id":"ck6auwf2q001zhgj32ryoe2uz"},{"post_id":"ck6auwf2b000chgj37i2fnm9m","tag_id":"ck6auwf2p001vhgj3umu2c4ld","_id":"ck6auwf2q0020hgj3p98zxcwk"},{"post_id":"ck6auwf2d000ghgj3eydvydj2","tag_id":"ck6auwf2p001yhgj35s66mmvy","_id":"ck6auwf2q0024hgj3x7ym22lp"},{"post_id":"ck6auwf2d000ghgj3eydvydj2","tag_id":"ck6auwf2q0021hgj3b949oclz","_id":"ck6auwf2q0025hgj3rbnj86rn"},{"post_id":"ck6auwf2d000ghgj3eydvydj2","tag_id":"ck6auwf2q0022hgj3gy7mf4e4","_id":"ck6auwf2q0027hgj3qq30oyi5"},{"post_id":"ck6auwf2f000jhgj3kxu4knaf","tag_id":"ck6auwf2q0023hgj35ll7pdpj","_id":"ck6auwf2r0029hgj38arbl1xh"},{"post_id":"ck6auwf2f000jhgj3kxu4knaf","tag_id":"ck6auwf2q0026hgj3wr4y5y68","_id":"ck6auwf2r002ahgj319oh49kl"},{"post_id":"ck6auwf2h000ohgj3hc76pmfi","tag_id":"ck6auwf2q0023hgj35ll7pdpj","_id":"ck6auwf2r002ehgj3bm07rea9"},{"post_id":"ck6auwf2h000ohgj3hc76pmfi","tag_id":"ck6auwf2r002bhgj3dd5sn6rb","_id":"ck6auwf2r002fhgj37xhwmyvg"},{"post_id":"ck6auwf2h000ohgj3hc76pmfi","tag_id":"ck6auwf2r002chgj38bz6k2za","_id":"ck6auwf2s002hhgj34lcub1v7"},{"post_id":"ck6auwf2i000qhgj3msbs1pl3","tag_id":"ck6auwf2r002dhgj3uce403ie","_id":"ck6auwf2s002ihgj34pjd8ngz"},{"post_id":"ck6auwf2j000uhgj3ldjv0e1b","tag_id":"ck6auwf2i000thgj31519ddh4","_id":"ck6auwf2s002khgj3naebxo80"},{"post_id":"ck6auwf2k000whgj3t2i7pck4","tag_id":"ck6auwf2d000fhgj3d7x6p5b7","_id":"ck6auwf2t002nhgj3d2423xwv"},{"post_id":"ck6auwf2k000whgj3t2i7pck4","tag_id":"ck6auwf2s002jhgj3ecnhc7mh","_id":"ck6auwf2t002ohgj3qxpsrzif"},{"post_id":"ck6auwf2k000whgj3t2i7pck4","tag_id":"ck6auwf2s002lhgj35yt4wwwn","_id":"ck6auwf2t002qhgj37iku1rq9"},{"post_id":"ck6auwf2k000yhgj3swps2q07","tag_id":"ck6auwf2s002mhgj33l84gz1i","_id":"ck6auwf2t002rhgj3jgmubrey"},{"post_id":"ck6auwf2k000yhgj3swps2q07","tag_id":"ck6auwf2t002phgj3x43j0bkd","_id":"ck6auwf2t002shgj3cramkurl"}],"Tag":[{"name":"Go","_id":"ck6auwf240005hgj3ocor94gw"},{"name":"Web","_id":"ck6auwf28000ahgj3tf739in7"},{"name":"java","_id":"ck6auwf2d000fhgj3d7x6p5b7"},{"name":"hash","_id":"ck6auwf2g000nhgj31e2z3ohh"},{"name":"数据结构","_id":"ck6auwf2i000thgj31519ddh4"},{"name":"HashMap","_id":"ck6auwf2l0010hgj3e5c1065k"},{"name":"基础","_id":"ck6auwf2m0014hgj3tbwslfdq"},{"name":"网络协议","_id":"ck6auwf2m0019hgj3blrp4p1u"},{"name":"http","_id":"ck6auwf2n001dhgj30m9nutsw"},{"name":"spring boot","_id":"ck6auwf2n001ihgj3phh1tbxq"},{"name":"rpc","_id":"ck6auwf2o001khgj39n2j57ck"},{"name":"grpc","_id":"ck6auwf2o001nhgj34031q8sf"},{"name":"go","_id":"ck6auwf2o001ohgj3qlfjxpea"},{"name":"记录","_id":"ck6auwf2p001uhgj3iqbifauc"},{"name":"-springboot -java","_id":"ck6auwf2p001vhgj3umu2c4ld"},{"name":"spring","_id":"ck6auwf2p001yhgj35s66mmvy"},{"name":"数据库","_id":"ck6auwf2q0021hgj3b949oclz"},{"name":"事务","_id":"ck6auwf2q0022hgj3gy7mf4e4"},{"name":"Java","_id":"ck6auwf2q0023hgj35ll7pdpj"},{"name":"springboot","_id":"ck6auwf2q0026hgj3wr4y5y68"},{"name":"jvm","_id":"ck6auwf2r002bhgj3dd5sn6rb"},{"name":"笔记","_id":"ck6auwf2r002chgj38bz6k2za"},{"name":"算法","_id":"ck6auwf2r002dhgj3uce403ie"},{"name":"翻译","_id":"ck6auwf2s002jhgj3ecnhc7mh"},{"name":"异常","_id":"ck6auwf2s002lhgj35yt4wwwn"},{"name":"人生不满百","_id":"ck6auwf2s002mhgj33l84gz1i"},{"name":"诗词","_id":"ck6auwf2t002phgj3x43j0bkd"}]}}